var data = {lines:[
{"lineNum":"    1","line":"use super::common::round_up_to_page_size;"},
{"lineNum":"    2","line":"use crate::structs::{LLVMResult, MemProtect};"},
{"lineNum":"    3","line":"use libc::{"},
{"lineNum":"    4","line":"    c_void, mmap, mprotect, munmap, siginfo_t, MAP_ANON, MAP_PRIVATE, PROT_EXEC, PROT_NONE,"},
{"lineNum":"    5","line":"    PROT_READ, PROT_WRITE,"},
{"lineNum":"    6","line":"};"},
{"lineNum":"    7","line":"use nix::sys::signal::{"},
{"lineNum":"    8","line":"    sigaction, SaFlags, SigAction, SigHandler, SigSet, SIGBUS, SIGILL, SIGSEGV,"},
{"lineNum":"    9","line":"};"},
{"lineNum":"   10","line":"use std::ptr;"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"/// `__register_frame` and `__deregister_frame` on macos take a single fde as an"},
{"lineNum":"   13","line":"/// argument, so we need to parse the fde table here."},
{"lineNum":"   14","line":"///"},
{"lineNum":"   15","line":"/// This is a pretty direct port of llvm\'s fde handling code:"},
{"lineNum":"   16","line":"///     https://llvm.org/doxygen/RTDyldMemoryManager_8cpp_source.html."},
{"lineNum":"   17","line":"#[allow(clippy::cast_ptr_alignment)]"},
{"lineNum":"   18","line":"#[cfg(target_os = \"macos\")]"},
{"lineNum":"   19","line":"pub unsafe fn visit_fde(addr: *mut u8, size: usize, visitor: extern \"C\" fn(*mut u8)) {"},
{"lineNum":"   20","line":"    unsafe fn process_fde(entry: *mut u8, visitor: extern \"C\" fn(*mut u8)) -> *mut u8 {"},
{"lineNum":"   21","line":"        let mut p = entry;"},
{"lineNum":"   22","line":"        let length = (p as *const u32).read_unaligned();"},
{"lineNum":"   23","line":"        p = p.add(4);"},
{"lineNum":"   24","line":"        let offset = (p as *const u32).read_unaligned();"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"        if offset != 0 {"},
{"lineNum":"   27","line":"            visitor(entry);"},
{"lineNum":"   28","line":"        }"},
{"lineNum":"   29","line":"        p.add(length as usize)"},
{"lineNum":"   30","line":"    }"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    let mut p = addr;"},
{"lineNum":"   33","line":"    let end = p.add(size);"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"    loop {"},
{"lineNum":"   36","line":"        if p >= end {"},
{"lineNum":"   37","line":"            break;"},
{"lineNum":"   38","line":"        }"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"        p = process_fde(p, visitor);"},
{"lineNum":"   41","line":"    }"},
{"lineNum":"   42","line":"}"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"#[cfg(not(target_os = \"macos\"))]"},
{"lineNum":"   45","line":"pub unsafe fn visit_fde(addr: *mut u8, _size: usize, visitor: extern \"C\" fn(*mut u8)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   46","line":"    visitor(addr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   47","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"extern \"C\" {"},
{"lineNum":"   50","line":"    #[cfg_attr(nightly, unwind(allowed))]"},
{"lineNum":"   51","line":"    fn throw_trap(ty: i32) -> !;"},
{"lineNum":"   52","line":"}"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"pub unsafe fn install_signal_handler() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   55","line":"    let sa = SigAction::new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":"        SigHandler::SigAction(signal_trap_handler),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   57","line":"        SaFlags::SA_ONSTACK | SaFlags::SA_SIGINFO,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   58","line":"        SigSet::empty(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   59","line":"    );"},
{"lineNum":"   60","line":"    sigaction(SIGSEGV, &sa).unwrap();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   61","line":"    sigaction(SIGBUS, &sa).unwrap();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   62","line":"    sigaction(SIGILL, &sa).unwrap();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   63","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"#[cfg_attr(nightly, unwind(allowed))]"},
{"lineNum":"   66","line":"extern \"C\" fn signal_trap_handler(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":"    _signum: ::nix::libc::c_int,"},
{"lineNum":"   68","line":"    _siginfo: *mut siginfo_t,"},
{"lineNum":"   69","line":"    _ucontext: *mut c_void,"},
{"lineNum":"   70","line":") {"},
{"lineNum":"   71","line":"    unsafe {"},
{"lineNum":"   72","line":"        if SigSet::all().thread_unblock().is_err() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   73","line":"            std::process::abort();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   74","line":"        }"},
{"lineNum":"   75","line":"        // Apparently, we can unwind from arbitary instructions, as long"},
{"lineNum":"   76","line":"        // as we don\'t need to catch the exception inside the function that"},
{"lineNum":"   77","line":"        // was interrupted."},
{"lineNum":"   78","line":"        //"},
{"lineNum":"   79","line":"        // This works on macos, not sure about linux."},
{"lineNum":"   80","line":"        throw_trap(2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"    }"},
{"lineNum":"   82","line":"}"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"pub unsafe fn alloc_memory(","class":"lineCov","hits":"1","order":"618","possible_hits":"1",},
{"lineNum":"   85","line":"    size: usize,"},
{"lineNum":"   86","line":"    protect: MemProtect,"},
{"lineNum":"   87","line":"    ptr_out: &mut *mut u8,"},
{"lineNum":"   88","line":"    size_out: &mut usize,"},
{"lineNum":"   89","line":") -> LLVMResult {"},
{"lineNum":"   90","line":"    let size = round_up_to_page_size(size);","class":"lineCov","hits":"1","order":"619","possible_hits":"1",},
{"lineNum":"   91","line":"    let ptr = mmap(","class":"lineCov","hits":"1","order":"627","possible_hits":"1",},
{"lineNum":"   92","line":"        ptr::null_mut(),","class":"lineCov","hits":"1","order":"623","possible_hits":"1",},
{"lineNum":"   93","line":"        size,","class":"lineCov","hits":"1","order":"624","possible_hits":"1",},
{"lineNum":"   94","line":"        match protect {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   95","line":"            MemProtect::NONE => PROT_NONE,","class":"linePartCov","hits":"1","order":"625","possible_hits":"2",},
{"lineNum":"   96","line":"            MemProtect::READ => PROT_READ,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   97","line":"            MemProtect::READ_WRITE => PROT_READ | PROT_WRITE,","class":"lineCov","hits":"1","order":"626","possible_hits":"1",},
{"lineNum":"   98","line":"            MemProtect::READ_EXECUTE => PROT_READ | PROT_EXEC,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"        },"},
{"lineNum":"  100","line":"        MAP_PRIVATE | MAP_ANON,"},
{"lineNum":"  101","line":"        -1,"},
{"lineNum":"  102","line":"        0,"},
{"lineNum":"  103","line":"    );"},
{"lineNum":"  104","line":"    if ptr as isize == -1 {","class":"lineCov","hits":"1","order":"628","possible_hits":"1",},
{"lineNum":"  105","line":"        return LLVMResult::ALLOCATE_FAILURE;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"    }"},
{"lineNum":"  107","line":"    *ptr_out = ptr as _;","class":"lineCov","hits":"1","order":"629","possible_hits":"1",},
{"lineNum":"  108","line":"    *size_out = size;","class":"lineCov","hits":"1","order":"630","possible_hits":"1",},
{"lineNum":"  109","line":"    LLVMResult::OK","class":"lineCov","hits":"1","order":"631","possible_hits":"1",},
{"lineNum":"  110","line":"}","class":"linePartCov","hits":"2","order":"632","possible_hits":"3",},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"pub unsafe fn protect_memory(ptr: *mut u8, size: usize, protect: MemProtect) -> LLVMResult {","class":"lineCov","hits":"1","order":"663","possible_hits":"1",},
{"lineNum":"  113","line":"    let res = mprotect(","class":"lineCov","hits":"1","order":"669","possible_hits":"1",},
{"lineNum":"  114","line":"        ptr as _,","class":"lineCov","hits":"1","order":"664","possible_hits":"1",},
{"lineNum":"  115","line":"        round_up_to_page_size(size),","class":"lineCov","hits":"1","order":"665","possible_hits":"1",},
{"lineNum":"  116","line":"        match protect {","class":"linePartCov","hits":"2","order":"668","possible_hits":"3",},
{"lineNum":"  117","line":"            MemProtect::NONE => PROT_NONE,","class":"linePartCov","hits":"1","order":"666","possible_hits":"2",},
{"lineNum":"  118","line":"            MemProtect::READ => PROT_READ,","class":"lineCov","hits":"1","order":"676","possible_hits":"1",},
{"lineNum":"  119","line":"            MemProtect::READ_WRITE => PROT_READ | PROT_WRITE,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  120","line":"            MemProtect::READ_EXECUTE => PROT_READ | PROT_EXEC,","class":"lineCov","hits":"1","order":"667","possible_hits":"1",},
{"lineNum":"  121","line":"        },"},
{"lineNum":"  122","line":"    );"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"    if res == 0 {","class":"linePartCov","hits":"1","order":"670","possible_hits":"2",},
{"lineNum":"  125","line":"        LLVMResult::OK","class":"lineCov","hits":"1","order":"671","possible_hits":"1",},
{"lineNum":"  126","line":"    } else {"},
{"lineNum":"  127","line":"        LLVMResult::PROTECT_FAILURE","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"    }"},
{"lineNum":"  129","line":"}","class":"linePartCov","hits":"1","order":"672","possible_hits":"2",},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"pub unsafe fn dealloc_memory(ptr: *mut u8, size: usize) -> LLVMResult {","class":"lineCov","hits":"1","order":"774","possible_hits":"1",},
{"lineNum":"  132","line":"    let res = munmap(ptr as _, round_up_to_page_size(size));","class":"lineCov","hits":"1","order":"775","possible_hits":"1",},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"    if res == 0 {","class":"linePartCov","hits":"1","order":"776","possible_hits":"2",},
{"lineNum":"  135","line":"        LLVMResult::OK","class":"lineCov","hits":"1","order":"777","possible_hits":"1",},
{"lineNum":"  136","line":"    } else {"},
{"lineNum":"  137","line":"        LLVMResult::DEALLOC_FAILURE","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  138","line":"    }"},
{"lineNum":"  139","line":"}","class":"linePartCov","hits":"1","order":"778","possible_hits":"2",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "compile_debug", "date" : "2019-11-28 11:37:30", "instrumented" : 51, "covered" : 28,};
var merged_data = [];
