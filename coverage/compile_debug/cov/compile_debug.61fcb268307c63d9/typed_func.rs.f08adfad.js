var data = {lines:[
{"lineNum":"    1","line":"//! The typed func module implements a way of representing a wasm function"},
{"lineNum":"    2","line":"//! with the correct types from rust. Function calls using a typed func have a low overhead."},
{"lineNum":"    3","line":"use crate::{"},
{"lineNum":"    4","line":"    error::RuntimeError,"},
{"lineNum":"    5","line":"    export::{Context, Export, FuncPointer},"},
{"lineNum":"    6","line":"    import::IsExport,"},
{"lineNum":"    7","line":"    types::{FuncSig, NativeWasmType, Type, WasmExternType},"},
{"lineNum":"    8","line":"    vm,"},
{"lineNum":"    9","line":"};"},
{"lineNum":"   10","line":"use std::{"},
{"lineNum":"   11","line":"    any::Any,"},
{"lineNum":"   12","line":"    convert::Infallible,"},
{"lineNum":"   13","line":"    ffi::c_void,"},
{"lineNum":"   14","line":"    fmt,"},
{"lineNum":"   15","line":"    marker::PhantomData,"},
{"lineNum":"   16","line":"    mem, panic,"},
{"lineNum":"   17","line":"    ptr::{self, NonNull},"},
{"lineNum":"   18","line":"    sync::Arc,"},
{"lineNum":"   19","line":"};"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"/// Wasm trap info."},
{"lineNum":"   22","line":"#[repr(C)]"},
{"lineNum":"   23","line":"pub enum WasmTrapInfo {"},
{"lineNum":"   24","line":"    /// Unreachable trap."},
{"lineNum":"   25","line":"    Unreachable = 0,"},
{"lineNum":"   26","line":"    /// Call indirect incorrect signature trap."},
{"lineNum":"   27","line":"    IncorrectCallIndirectSignature = 1,"},
{"lineNum":"   28","line":"    /// Memory out of bounds trap."},
{"lineNum":"   29","line":"    MemoryOutOfBounds = 2,"},
{"lineNum":"   30","line":"    /// Call indirect out of bounds trap."},
{"lineNum":"   31","line":"    CallIndirectOOB = 3,"},
{"lineNum":"   32","line":"    /// Illegal arithmetic trap."},
{"lineNum":"   33","line":"    IllegalArithmetic = 4,"},
{"lineNum":"   34","line":"    /// Misaligned atomic access trap."},
{"lineNum":"   35","line":"    MisalignedAtomicAccess = 5,"},
{"lineNum":"   36","line":"    /// Unknown trap."},
{"lineNum":"   37","line":"    Unknown,"},
{"lineNum":"   38","line":"}"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"impl fmt::Display for WasmTrapInfo {"},
{"lineNum":"   41","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"   42","line":"        write!("},
{"lineNum":"   43","line":"            f,"},
{"lineNum":"   44","line":"            \"{}\","},
{"lineNum":"   45","line":"            match self {"},
{"lineNum":"   46","line":"                WasmTrapInfo::Unreachable => \"unreachable\","},
{"lineNum":"   47","line":"                WasmTrapInfo::IncorrectCallIndirectSignature => {"},
{"lineNum":"   48","line":"                    \"incorrect `call_indirect` signature\""},
{"lineNum":"   49","line":"                }"},
{"lineNum":"   50","line":"                WasmTrapInfo::MemoryOutOfBounds => \"memory out-of-bounds access\","},
{"lineNum":"   51","line":"                WasmTrapInfo::CallIndirectOOB => \"`call_indirect` out-of-bounds\","},
{"lineNum":"   52","line":"                WasmTrapInfo::IllegalArithmetic => \"illegal arithmetic operation\","},
{"lineNum":"   53","line":"                WasmTrapInfo::MisalignedAtomicAccess => \"misaligned atomic access\","},
{"lineNum":"   54","line":"                WasmTrapInfo::Unknown => \"unknown\","},
{"lineNum":"   55","line":"            }"},
{"lineNum":"   56","line":"        )"},
{"lineNum":"   57","line":"    }"},
{"lineNum":"   58","line":"}"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"/// This is just an empty trait to constrict that types that"},
{"lineNum":"   61","line":"/// can be put into the third/fourth (depending if you include lifetimes)"},
{"lineNum":"   62","line":"/// of the `Func` struct."},
{"lineNum":"   63","line":"pub trait Kind {}"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"/// Aliases to an extern \"C\" type used as a trampoline to a function."},
{"lineNum":"   66","line":"pub type Trampoline = unsafe extern \"C\" fn("},
{"lineNum":"   67","line":"    vmctx: *mut vm::Ctx,"},
{"lineNum":"   68","line":"    func: NonNull<vm::Func>,"},
{"lineNum":"   69","line":"    args: *const u64,"},
{"lineNum":"   70","line":"    rets: *mut u64,"},
{"lineNum":"   71","line":");"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"/// Aliases to an extern \"C\" type used to invoke a function."},
{"lineNum":"   74","line":"pub type Invoke = unsafe extern \"C\" fn("},
{"lineNum":"   75","line":"    trampoline: Trampoline,"},
{"lineNum":"   76","line":"    vmctx: *mut vm::Ctx,"},
{"lineNum":"   77","line":"    func: NonNull<vm::Func>,"},
{"lineNum":"   78","line":"    args: *const u64,"},
{"lineNum":"   79","line":"    rets: *mut u64,"},
{"lineNum":"   80","line":"    trap_info: *mut WasmTrapInfo,"},
{"lineNum":"   81","line":"    user_error: *mut Option<Box<dyn Any>>,"},
{"lineNum":"   82","line":"    extra: Option<NonNull<c_void>>,"},
{"lineNum":"   83","line":") -> bool;"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"/// TODO(lachlan): Naming TBD."},
{"lineNum":"   86","line":"/// This contains the trampoline and invoke functions for a specific signature,"},
{"lineNum":"   87","line":"/// as well as the environment that the invoke function may or may not require."},
{"lineNum":"   88","line":"#[derive(Copy, Clone)]"},
{"lineNum":"   89","line":"pub struct Wasm {"},
{"lineNum":"   90","line":"    pub(crate) trampoline: Trampoline,"},
{"lineNum":"   91","line":"    pub(crate) invoke: Invoke,"},
{"lineNum":"   92","line":"    pub(crate) invoke_env: Option<NonNull<c_void>>,"},
{"lineNum":"   93","line":"}"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"impl Wasm {"},
{"lineNum":"   96","line":"    /// Create new `Wasm` from given parts."},
{"lineNum":"   97","line":"    pub unsafe fn from_raw_parts(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   98","line":"        trampoline: Trampoline,"},
{"lineNum":"   99","line":"        invoke: Invoke,"},
{"lineNum":"  100","line":"        invoke_env: Option<NonNull<c_void>>,"},
{"lineNum":"  101","line":"    ) -> Self {"},
{"lineNum":"  102","line":"        Self {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"            trampoline,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  104","line":"            invoke,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  105","line":"            invoke_env,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"        }"},
{"lineNum":"  107","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  108","line":"}"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"/// This type, as part of the `Func` type signature, represents a function that is created"},
{"lineNum":"  111","line":"/// by the host."},
{"lineNum":"  112","line":"pub struct Host(());"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"impl Kind for Wasm {}"},
{"lineNum":"  115","line":"impl Kind for Host {}"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"/// Represents a list of WebAssembly values."},
{"lineNum":"  118","line":"pub trait WasmTypeList {"},
{"lineNum":"  119","line":"    /// CStruct type."},
{"lineNum":"  120","line":"    type CStruct;"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"    /// Array of return values."},
{"lineNum":"  123","line":"    type RetArray: AsMut<[u64]>;"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    /// Construct `Self` based on an array of returned values."},
{"lineNum":"  126","line":"    fn from_ret_array(array: Self::RetArray) -> Self;"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    /// Generates an empty array that will hold the returned values of"},
{"lineNum":"  129","line":"    /// the WebAssembly function."},
{"lineNum":"  130","line":"    fn empty_ret_array() -> Self::RetArray;"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    /// Transforms C values into Rust values."},
{"lineNum":"  133","line":"    fn from_c_struct(c_struct: Self::CStruct) -> Self;"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"    /// Transforms Rust values into C values."},
{"lineNum":"  136","line":"    fn into_c_struct(self) -> Self::CStruct;"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"    /// Get types of the current values."},
{"lineNum":"  139","line":"    fn types() -> &\'static [Type];"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    /// This method is used to distribute the values onto a function,"},
{"lineNum":"  142","line":"    /// e.g. `(1, 2).call(func, â€¦)`. This form is unlikely to be used"},
{"lineNum":"  143","line":"    /// directly in the code, see the `Func:call` implementation."},
{"lineNum":"  144","line":"    unsafe fn call<Rets>("},
{"lineNum":"  145","line":"        self,"},
{"lineNum":"  146","line":"        f: NonNull<vm::Func>,"},
{"lineNum":"  147","line":"        wasm: Wasm,"},
{"lineNum":"  148","line":"        ctx: *mut vm::Ctx,"},
{"lineNum":"  149","line":"    ) -> Result<Rets, RuntimeError>"},
{"lineNum":"  150","line":"    where"},
{"lineNum":"  151","line":"        Rets: WasmTypeList;"},
{"lineNum":"  152","line":"}"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"/// Empty trait to specify the kind of `ExternalFunction`: With or"},
{"lineNum":"  155","line":"/// without a `vm::Ctx` argument. See the `ExplicitVmCtx` and the"},
{"lineNum":"  156","line":"/// `ImplicitVmCtx` structures."},
{"lineNum":"  157","line":"///"},
{"lineNum":"  158","line":"/// This type is never aimed to be used by a user. It is used by the"},
{"lineNum":"  159","line":"/// trait system to automatically generate an appropriate `wrap`"},
{"lineNum":"  160","line":"/// function."},
{"lineNum":"  161","line":"pub trait ExternalFunctionKind {}"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"/// This empty structure indicates that an external function must"},
{"lineNum":"  164","line":"/// contain an explicit `vm::Ctx` argument (at first position)."},
{"lineNum":"  165","line":"///"},
{"lineNum":"  166","line":"/// ```rs,ignore"},
{"lineNum":"  167","line":"/// fn add_one(_: mut &vm::Ctx, x: i32) -> i32 {"},
{"lineNum":"  168","line":"///     x + 1"},
{"lineNum":"  169","line":"/// }"},
{"lineNum":"  170","line":"/// ```"},
{"lineNum":"  171","line":"pub struct ExplicitVmCtx {}"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"/// This empty structure indicates that an external function has no"},
{"lineNum":"  174","line":"/// `vm::Ctx` argument (at first position). Its signature is:"},
{"lineNum":"  175","line":"///"},
{"lineNum":"  176","line":"/// ```rs,ignore"},
{"lineNum":"  177","line":"/// fn add_one(x: i32) -> i32 {"},
{"lineNum":"  178","line":"///     x + 1"},
{"lineNum":"  179","line":"/// }"},
{"lineNum":"  180","line":"/// ```"},
{"lineNum":"  181","line":"pub struct ImplicitVmCtx {}"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"impl ExternalFunctionKind for ExplicitVmCtx {}"},
{"lineNum":"  184","line":"impl ExternalFunctionKind for ImplicitVmCtx {}"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"/// Represents a function that can be converted to a `vm::Func`"},
{"lineNum":"  187","line":"/// (function pointer) that can be called within WebAssembly."},
{"lineNum":"  188","line":"pub trait ExternalFunction<Kind, Args, Rets>"},
{"lineNum":"  189","line":"where"},
{"lineNum":"  190","line":"    Kind: ExternalFunctionKind,"},
{"lineNum":"  191","line":"    Args: WasmTypeList,"},
{"lineNum":"  192","line":"    Rets: WasmTypeList,"},
{"lineNum":"  193","line":"{"},
{"lineNum":"  194","line":"    /// Conver to function pointer."},
{"lineNum":"  195","line":"    fn to_raw(self) -> (NonNull<vm::Func>, Option<NonNull<vm::FuncEnv>>);"},
{"lineNum":"  196","line":"}"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"/// Represents a TrapEarly type."},
{"lineNum":"  199","line":"pub trait TrapEarly<Rets>"},
{"lineNum":"  200","line":"where"},
{"lineNum":"  201","line":"    Rets: WasmTypeList,"},
{"lineNum":"  202","line":"{"},
{"lineNum":"  203","line":"    /// The error type for this trait."},
{"lineNum":"  204","line":"    type Error: \'static;"},
{"lineNum":"  205","line":"    /// Get returns or error result."},
{"lineNum":"  206","line":"    fn report(self) -> Result<Rets, Self::Error>;"},
{"lineNum":"  207","line":"}"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"impl<Rets> TrapEarly<Rets> for Rets"},
{"lineNum":"  210","line":"where"},
{"lineNum":"  211","line":"    Rets: WasmTypeList,"},
{"lineNum":"  212","line":"{"},
{"lineNum":"  213","line":"    type Error = Infallible;"},
{"lineNum":"  214","line":"    fn report(self) -> Result<Rets, Infallible> {"},
{"lineNum":"  215","line":"        Ok(self)"},
{"lineNum":"  216","line":"    }"},
{"lineNum":"  217","line":"}"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"impl<Rets, E> TrapEarly<Rets> for Result<Rets, E>"},
{"lineNum":"  220","line":"where"},
{"lineNum":"  221","line":"    Rets: WasmTypeList,"},
{"lineNum":"  222","line":"    E: \'static,"},
{"lineNum":"  223","line":"{"},
{"lineNum":"  224","line":"    type Error = E;"},
{"lineNum":"  225","line":"    fn report(self) -> Result<Rets, E> {"},
{"lineNum":"  226","line":"        self"},
{"lineNum":"  227","line":"    }"},
{"lineNum":"  228","line":"}"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"/// Represents a function that can be used by WebAssembly."},
{"lineNum":"  231","line":"pub struct Func<\'a, Args = (), Rets = (), Inner: Kind = Wasm> {"},
{"lineNum":"  232","line":"    inner: Inner,"},
{"lineNum":"  233","line":"    func: NonNull<vm::Func>,"},
{"lineNum":"  234","line":"    func_env: Option<NonNull<vm::FuncEnv>>,"},
{"lineNum":"  235","line":"    vmctx: *mut vm::Ctx,"},
{"lineNum":"  236","line":"    _phantom: PhantomData<(&\'a (), Args, Rets)>,"},
{"lineNum":"  237","line":"}"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"unsafe impl<\'a, Args, Rets> Send for Func<\'a, Args, Rets, Wasm> {}"},
{"lineNum":"  240","line":"unsafe impl<\'a, Args, Rets> Send for Func<\'a, Args, Rets, Host> {}"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"impl<\'a, Args, Rets> Func<\'a, Args, Rets, Wasm>"},
{"lineNum":"  243","line":"where"},
{"lineNum":"  244","line":"    Args: WasmTypeList,"},
{"lineNum":"  245","line":"    Rets: WasmTypeList,"},
{"lineNum":"  246","line":"{"},
{"lineNum":"  247","line":"    pub(crate) unsafe fn from_raw_parts("},
{"lineNum":"  248","line":"        inner: Wasm,"},
{"lineNum":"  249","line":"        func: NonNull<vm::Func>,"},
{"lineNum":"  250","line":"        func_env: Option<NonNull<vm::FuncEnv>>,"},
{"lineNum":"  251","line":"        vmctx: *mut vm::Ctx,"},
{"lineNum":"  252","line":"    ) -> Func<\'a, Args, Rets, Wasm> {"},
{"lineNum":"  253","line":"        Func {"},
{"lineNum":"  254","line":"            inner,"},
{"lineNum":"  255","line":"            func,"},
{"lineNum":"  256","line":"            func_env,"},
{"lineNum":"  257","line":"            vmctx,"},
{"lineNum":"  258","line":"            _phantom: PhantomData,"},
{"lineNum":"  259","line":"        }"},
{"lineNum":"  260","line":"    }"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"    /// Get the underlying func pointer."},
{"lineNum":"  263","line":"    pub fn get_vm_func(&self) -> NonNull<vm::Func> {"},
{"lineNum":"  264","line":"        self.func"},
{"lineNum":"  265","line":"    }"},
{"lineNum":"  266","line":"}"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"impl<\'a, Args, Rets> Func<\'a, Args, Rets, Host>"},
{"lineNum":"  269","line":"where"},
{"lineNum":"  270","line":"    Args: WasmTypeList,"},
{"lineNum":"  271","line":"    Rets: WasmTypeList,"},
{"lineNum":"  272","line":"{"},
{"lineNum":"  273","line":"    /// Creates a new `Func`."},
{"lineNum":"  274","line":"    pub fn new<F, Kind>(func: F) -> Func<\'a, Args, Rets, Host>"},
{"lineNum":"  275","line":"    where"},
{"lineNum":"  276","line":"        Kind: ExternalFunctionKind,"},
{"lineNum":"  277","line":"        F: ExternalFunction<Kind, Args, Rets>,"},
{"lineNum":"  278","line":"    {"},
{"lineNum":"  279","line":"        let (func, func_env) = func.to_raw();"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"        Func {"},
{"lineNum":"  282","line":"            inner: Host(()),"},
{"lineNum":"  283","line":"            func,"},
{"lineNum":"  284","line":"            func_env,"},
{"lineNum":"  285","line":"            vmctx: ptr::null_mut(),"},
{"lineNum":"  286","line":"            _phantom: PhantomData,"},
{"lineNum":"  287","line":"        }"},
{"lineNum":"  288","line":"    }"},
{"lineNum":"  289","line":"}"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"impl<\'a, Args, Rets, Inner> Func<\'a, Args, Rets, Inner>"},
{"lineNum":"  292","line":"where"},
{"lineNum":"  293","line":"    Args: WasmTypeList,"},
{"lineNum":"  294","line":"    Rets: WasmTypeList,"},
{"lineNum":"  295","line":"    Inner: Kind,"},
{"lineNum":"  296","line":"{"},
{"lineNum":"  297","line":"    /// Returns the types of the function inputs."},
{"lineNum":"  298","line":"    pub fn params(&self) -> &\'static [Type] {"},
{"lineNum":"  299","line":"        Args::types()"},
{"lineNum":"  300","line":"    }"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"    /// Returns the types of the function outputs."},
{"lineNum":"  303","line":"    pub fn returns(&self) -> &\'static [Type] {"},
{"lineNum":"  304","line":"        Rets::types()"},
{"lineNum":"  305","line":"    }"},
{"lineNum":"  306","line":"}"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"impl WasmTypeList for Infallible {"},
{"lineNum":"  309","line":"    type CStruct = Infallible;"},
{"lineNum":"  310","line":"    type RetArray = [u64; 0];"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"    fn from_ret_array(_: Self::RetArray) -> Self {"},
{"lineNum":"  313","line":"        unreachable!()"},
{"lineNum":"  314","line":"    }"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"    fn empty_ret_array() -> Self::RetArray {"},
{"lineNum":"  317","line":"        unreachable!()"},
{"lineNum":"  318","line":"    }"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"    fn from_c_struct(_: Self::CStruct) -> Self {"},
{"lineNum":"  321","line":"        unreachable!()"},
{"lineNum":"  322","line":"    }"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"    fn into_c_struct(self) -> Self::CStruct {"},
{"lineNum":"  325","line":"        unreachable!()"},
{"lineNum":"  326","line":"    }"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"    fn types() -> &\'static [Type] {"},
{"lineNum":"  329","line":"        &[]"},
{"lineNum":"  330","line":"    }"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"    #[allow(non_snake_case)]"},
{"lineNum":"  333","line":"    unsafe fn call<Rets>("},
{"lineNum":"  334","line":"        self,"},
{"lineNum":"  335","line":"        _: NonNull<vm::Func>,"},
{"lineNum":"  336","line":"        _: Wasm,"},
{"lineNum":"  337","line":"        _: *mut vm::Ctx,"},
{"lineNum":"  338","line":"    ) -> Result<Rets, RuntimeError>"},
{"lineNum":"  339","line":"    where"},
{"lineNum":"  340","line":"        Rets: WasmTypeList,"},
{"lineNum":"  341","line":"    {"},
{"lineNum":"  342","line":"        unreachable!()"},
{"lineNum":"  343","line":"    }"},
{"lineNum":"  344","line":"}"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"macro_rules! impl_traits {"},
{"lineNum":"  347","line":"    ( [$repr:ident] $struct_name:ident, $( $x:ident ),* ) => {"},
{"lineNum":"  348","line":"        /// Struct for typed funcs."},
{"lineNum":"  349","line":"        #[repr($repr)]"},
{"lineNum":"  350","line":"        pub struct $struct_name< $( $x ),* > ( $( <$x as WasmExternType>::Native ),* )"},
{"lineNum":"  351","line":"        where"},
{"lineNum":"  352","line":"            $( $x: WasmExternType ),*;"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"        impl< $( $x ),* > WasmTypeList for ( $( $x ),* )"},
{"lineNum":"  355","line":"        where"},
{"lineNum":"  356","line":"            $( $x: WasmExternType ),*"},
{"lineNum":"  357","line":"        {"},
{"lineNum":"  358","line":"            type CStruct = $struct_name<$( $x ),*>;"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"            type RetArray = [u64; count_idents!( $( $x ),* )];"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"            fn from_ret_array(array: Self::RetArray) -> Self {"},
{"lineNum":"  363","line":"                #[allow(non_snake_case)]"},
{"lineNum":"  364","line":"                let [ $( $x ),* ] = array;"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"                ( $( WasmExternType::from_native(NativeWasmType::from_binary($x)) ),* )"},
{"lineNum":"  367","line":"            }"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"            fn empty_ret_array() -> Self::RetArray {"},
{"lineNum":"  370","line":"                [0; count_idents!( $( $x ),* )]"},
{"lineNum":"  371","line":"            }"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"            fn from_c_struct(c_struct: Self::CStruct) -> Self {"},
{"lineNum":"  374","line":"                #[allow(non_snake_case)]"},
{"lineNum":"  375","line":"                let $struct_name ( $( $x ),* ) = c_struct;"},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"                ( $( WasmExternType::from_native($x) ),* )"},
{"lineNum":"  378","line":"            }"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"            #[allow(unused_parens, non_snake_case)]"},
{"lineNum":"  381","line":"            fn into_c_struct(self) -> Self::CStruct {"},
{"lineNum":"  382","line":"                let ( $( $x ),* ) = self;"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"                $struct_name ( $( WasmExternType::to_native($x) ),* )"},
{"lineNum":"  385","line":"            }"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"            fn types() -> &\'static [Type] {"},
{"lineNum":"  388","line":"                &[$( $x::Native::TYPE ),*]"},
{"lineNum":"  389","line":"            }"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"            #[allow(unused_parens, non_snake_case)]"},
{"lineNum":"  392","line":"            unsafe fn call<Rets>("},
{"lineNum":"  393","line":"                self,"},
{"lineNum":"  394","line":"                f: NonNull<vm::Func>,"},
{"lineNum":"  395","line":"                wasm: Wasm,"},
{"lineNum":"  396","line":"                ctx: *mut vm::Ctx,"},
{"lineNum":"  397","line":"            ) -> Result<Rets, RuntimeError>"},
{"lineNum":"  398","line":"            where"},
{"lineNum":"  399","line":"                Rets: WasmTypeList"},
{"lineNum":"  400","line":"            {"},
{"lineNum":"  401","line":"                let ( $( $x ),* ) = self;"},
{"lineNum":"  402","line":"                let args = [ $( $x.to_native().to_binary()),* ];"},
{"lineNum":"  403","line":"                let mut rets = Rets::empty_ret_array();"},
{"lineNum":"  404","line":"                let mut trap = WasmTrapInfo::Unknown;"},
{"lineNum":"  405","line":"                let mut user_error = None;"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"                if (wasm.invoke)("},
{"lineNum":"  408","line":"                    wasm.trampoline,"},
{"lineNum":"  409","line":"                    ctx,"},
{"lineNum":"  410","line":"                    f,"},
{"lineNum":"  411","line":"                    args.as_ptr(),"},
{"lineNum":"  412","line":"                    rets.as_mut().as_mut_ptr(),"},
{"lineNum":"  413","line":"                    &mut trap,"},
{"lineNum":"  414","line":"                    &mut user_error,"},
{"lineNum":"  415","line":"                    wasm.invoke_env"},
{"lineNum":"  416","line":"                ) {"},
{"lineNum":"  417","line":"                    Ok(Rets::from_ret_array(rets))"},
{"lineNum":"  418","line":"                } else {"},
{"lineNum":"  419","line":"                    if let Some(data) = user_error {"},
{"lineNum":"  420","line":"                        Err(RuntimeError::Error { data })"},
{"lineNum":"  421","line":"                    } else {"},
{"lineNum":"  422","line":"                        Err(RuntimeError::Trap { msg: trap.to_string().into() })"},
{"lineNum":"  423","line":"                    }"},
{"lineNum":"  424","line":"                }"},
{"lineNum":"  425","line":"            }"},
{"lineNum":"  426","line":"        }"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"        impl< $( $x, )* Rets, Trap, FN > ExternalFunction<ExplicitVmCtx, ( $( $x ),* ), Rets> for FN"},
{"lineNum":"  429","line":"        where"},
{"lineNum":"  430","line":"            $( $x: WasmExternType, )*"},
{"lineNum":"  431","line":"            Rets: WasmTypeList,"},
{"lineNum":"  432","line":"            Trap: TrapEarly<Rets>,"},
{"lineNum":"  433","line":"            FN: Fn(&mut vm::Ctx $( , $x )*) -> Trap + \'static,"},
{"lineNum":"  434","line":"        {"},
{"lineNum":"  435","line":"            #[allow(non_snake_case)]"},
{"lineNum":"  436","line":"            fn to_raw(self) -> (NonNull<vm::Func>, Option<NonNull<vm::FuncEnv>>) {"},
{"lineNum":"  437","line":"                // The `wrap` function is a wrapper around the"},
{"lineNum":"  438","line":"                // imported function. It manages the argument passed"},
{"lineNum":"  439","line":"                // to the imported function (in this case, the"},
{"lineNum":"  440","line":"                // `vmctx` along with the regular WebAssembly"},
{"lineNum":"  441","line":"                // arguments), and it manages the trapping."},
{"lineNum":"  442","line":"                //"},
{"lineNum":"  443","line":"                // It is also required for the LLVM backend to be"},
{"lineNum":"  444","line":"                // able to unwind through this function."},
{"lineNum":"  445","line":"                #[cfg_attr(nightly, unwind(allowed))]"},
{"lineNum":"  446","line":"                extern fn wrap<$( $x, )* Rets, Trap, FN>("},
{"lineNum":"  447","line":"                    vmctx: &vm::Ctx $( , $x: <$x as WasmExternType>::Native )*"},
{"lineNum":"  448","line":"                ) -> Rets::CStruct"},
{"lineNum":"  449","line":"                where"},
{"lineNum":"  450","line":"                    $( $x: WasmExternType, )*"},
{"lineNum":"  451","line":"                    Rets: WasmTypeList,"},
{"lineNum":"  452","line":"                    Trap: TrapEarly<Rets>,"},
{"lineNum":"  453","line":"                    FN: Fn(&mut vm::Ctx, $( $x, )*) -> Trap,"},
{"lineNum":"  454","line":"                {"},
{"lineNum":"  455","line":"                    // Get the pointer to this `wrap` function."},
{"lineNum":"  456","line":"                    let self_pointer = wrap::<$( $x, )* Rets, Trap, FN> as *const vm::Func;"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"                    // Get the collection of imported functions."},
{"lineNum":"  459","line":"                    let vm_imported_functions = unsafe { &(*vmctx.import_backing).vm_functions };"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"                    // Retrieve the `vm::FuncCtx`."},
{"lineNum":"  462","line":"                    let mut func_ctx: NonNull<vm::FuncCtx> = vm_imported_functions"},
{"lineNum":"  463","line":"                        .iter()"},
{"lineNum":"  464","line":"                        .find_map(|(_, imported_func)| {"},
{"lineNum":"  465","line":"                            if imported_func.func == self_pointer {"},
{"lineNum":"  466","line":"                                Some(imported_func.func_ctx)"},
{"lineNum":"  467","line":"                            } else {"},
{"lineNum":"  468","line":"                                None"},
{"lineNum":"  469","line":"                            }"},
{"lineNum":"  470","line":"                        })"},
{"lineNum":"  471","line":"                        .expect(\"Import backing is not well-formed, cannot find `func_ctx`.\");"},
{"lineNum":"  472","line":"                    let func_ctx = unsafe { func_ctx.as_mut() };"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"                    // Extract `vm::Ctx` from `vm::FuncCtx`. The"},
{"lineNum":"  475","line":"                    // pointer is always non-null."},
{"lineNum":"  476","line":"                    let vmctx = unsafe { func_ctx.vmctx.as_mut() };"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"                    // Extract `vm::FuncEnv` from `vm::FuncCtx`."},
{"lineNum":"  479","line":"                    let func_env = func_ctx.func_env;"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"                    let func: &FN = match func_env {"},
{"lineNum":"  482","line":"                        // The imported function is a regular"},
{"lineNum":"  483","line":"                        // function, a closure without a captured"},
{"lineNum":"  484","line":"                        // environment, or a closure with a captured"},
{"lineNum":"  485","line":"                        // environment."},
{"lineNum":"  486","line":"                        Some(func_env) => unsafe {"},
{"lineNum":"  487","line":"                            let func: NonNull<FN> = func_env.cast();"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"                            &*func.as_ptr()"},
{"lineNum":"  490","line":"                        },"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"                        // This branch is supposed to be unreachable."},
{"lineNum":"  493","line":"                        None => unreachable!()"},
{"lineNum":"  494","line":"                    };"},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"                    // Catch unwind in case of errors."},
{"lineNum":"  497","line":"                    let err = match panic::catch_unwind("},
{"lineNum":"  498","line":"                        panic::AssertUnwindSafe("},
{"lineNum":"  499","line":"                            || {"},
{"lineNum":"  500","line":"                                func(vmctx $( , WasmExternType::from_native($x) )* ).report()"},
{"lineNum":"  501","line":"                                //   ^^^^^ The imported function"},
{"lineNum":"  502","line":"                                //         expects `vm::Ctx` as first"},
{"lineNum":"  503","line":"                                //         argument; provide it."},
{"lineNum":"  504","line":"                            }"},
{"lineNum":"  505","line":"                        )"},
{"lineNum":"  506","line":"                    ) {"},
{"lineNum":"  507","line":"                        Ok(Ok(returns)) => return returns.into_c_struct(),"},
{"lineNum":"  508","line":"                        Ok(Err(err)) => {"},
{"lineNum":"  509","line":"                            let b: Box<_> = err.into();"},
{"lineNum":"  510","line":"                            b as Box<dyn Any>"},
{"lineNum":"  511","line":"                        },"},
{"lineNum":"  512","line":"                        Err(err) => err,"},
{"lineNum":"  513","line":"                    };"},
{"lineNum":"  514","line":""},
{"lineNum":"  515","line":"                    // At this point, there is an error that needs to"},
{"lineNum":"  516","line":"                    // be trapped."},
{"lineNum":"  517","line":"                    unsafe {"},
{"lineNum":"  518","line":"                        (&*vmctx.module).runnable_module.do_early_trap(err)"},
{"lineNum":"  519","line":"                    }"},
{"lineNum":"  520","line":"                }"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"                // Extract the captured environment of the imported"},
{"lineNum":"  523","line":"                // function if any."},
{"lineNum":"  524","line":"                let func_env: Option<NonNull<vm::FuncEnv>> ="},
{"lineNum":"  525","line":"                    // `FN` is a function pointer, or a closure"},
{"lineNum":"  526","line":"                    // _without_ a captured environment."},
{"lineNum":"  527","line":"                    if mem::size_of::<Self>() == 0 {"},
{"lineNum":"  528","line":"                        NonNull::new(&self as *const _ as *mut vm::FuncEnv)"},
{"lineNum":"  529","line":"                    }"},
{"lineNum":"  530","line":"                    // `FN` is a closure _with_ a captured"},
{"lineNum":"  531","line":"                    // environment."},
{"lineNum":"  532","line":"                    else {"},
{"lineNum":"  533","line":"                        NonNull::new(Box::into_raw(Box::new(self))).map(NonNull::cast)"},
{"lineNum":"  534","line":"                    };"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"                ("},
{"lineNum":"  537","line":"                    NonNull::new(wrap::<$( $x, )* Rets, Trap, Self> as *mut vm::Func).unwrap(),"},
{"lineNum":"  538","line":"                    func_env"},
{"lineNum":"  539","line":"                )"},
{"lineNum":"  540","line":"            }"},
{"lineNum":"  541","line":"        }"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"        impl< $( $x, )* Rets, Trap, FN > ExternalFunction<ImplicitVmCtx, ( $( $x ),* ), Rets> for FN"},
{"lineNum":"  544","line":"        where"},
{"lineNum":"  545","line":"            $( $x: WasmExternType, )*"},
{"lineNum":"  546","line":"            Rets: WasmTypeList,"},
{"lineNum":"  547","line":"            Trap: TrapEarly<Rets>,"},
{"lineNum":"  548","line":"            FN: Fn($( $x, )*) -> Trap + \'static,"},
{"lineNum":"  549","line":"        {"},
{"lineNum":"  550","line":"            #[allow(non_snake_case)]"},
{"lineNum":"  551","line":"            fn to_raw(self) -> (NonNull<vm::Func>, Option<NonNull<vm::FuncEnv>>) {"},
{"lineNum":"  552","line":"                // The `wrap` function is a wrapper around the"},
{"lineNum":"  553","line":"                // imported function. It manages the argument passed"},
{"lineNum":"  554","line":"                // to the imported function (in this case, only the"},
{"lineNum":"  555","line":"                // regular WebAssembly arguments), and it manages the"},
{"lineNum":"  556","line":"                // trapping."},
{"lineNum":"  557","line":"                //"},
{"lineNum":"  558","line":"                // It is also required for the LLVM backend to be"},
{"lineNum":"  559","line":"                // able to unwind through this function."},
{"lineNum":"  560","line":"                #[cfg_attr(nightly, unwind(allowed))]"},
{"lineNum":"  561","line":"                extern fn wrap<$( $x, )* Rets, Trap, FN>("},
{"lineNum":"  562","line":"                    vmctx: &vm::Ctx $( , $x: <$x as WasmExternType>::Native )*"},
{"lineNum":"  563","line":"                ) -> Rets::CStruct"},
{"lineNum":"  564","line":"                where"},
{"lineNum":"  565","line":"                    $( $x: WasmExternType, )*"},
{"lineNum":"  566","line":"                    Rets: WasmTypeList,"},
{"lineNum":"  567","line":"                    Trap: TrapEarly<Rets>,"},
{"lineNum":"  568","line":"                    FN: Fn($( $x, )*) -> Trap,"},
{"lineNum":"  569","line":"                {"},
{"lineNum":"  570","line":"                    // Get the pointer to this `wrap` function."},
{"lineNum":"  571","line":"                    let self_pointer = wrap::<$( $x, )* Rets, Trap, FN> as *const vm::Func;"},
{"lineNum":"  572","line":""},
{"lineNum":"  573","line":"                    // Get the collection of imported functions."},
{"lineNum":"  574","line":"                    let vm_imported_functions = unsafe { &(*vmctx.import_backing).vm_functions };"},
{"lineNum":"  575","line":""},
{"lineNum":"  576","line":"                    // Retrieve the `vm::FuncCtx`."},
{"lineNum":"  577","line":"                    let mut func_ctx: NonNull<vm::FuncCtx> = vm_imported_functions"},
{"lineNum":"  578","line":"                        .iter()"},
{"lineNum":"  579","line":"                        .find_map(|(_, imported_func)| {"},
{"lineNum":"  580","line":"                            if imported_func.func == self_pointer {"},
{"lineNum":"  581","line":"                                Some(imported_func.func_ctx)"},
{"lineNum":"  582","line":"                            } else {"},
{"lineNum":"  583","line":"                                None"},
{"lineNum":"  584","line":"                            }"},
{"lineNum":"  585","line":"                        })"},
{"lineNum":"  586","line":"                        .expect(\"Import backing is not well-formed, cannot find `func_ctx`.\");"},
{"lineNum":"  587","line":"                    let func_ctx = unsafe { func_ctx.as_mut() };"},
{"lineNum":"  588","line":""},
{"lineNum":"  589","line":"                    // Extract `vm::Ctx` from `vm::FuncCtx`. The"},
{"lineNum":"  590","line":"                    // pointer is always non-null."},
{"lineNum":"  591","line":"                    let vmctx = unsafe { func_ctx.vmctx.as_mut() };"},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"                    // Extract `vm::FuncEnv` from `vm::FuncCtx`."},
{"lineNum":"  594","line":"                    let func_env = func_ctx.func_env;"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"                    let func: &FN = match func_env {"},
{"lineNum":"  597","line":"                        // The imported function is a regular"},
{"lineNum":"  598","line":"                        // function, a closure without a captured"},
{"lineNum":"  599","line":"                        // environment, or a closure with a captured"},
{"lineNum":"  600","line":"                        // environment."},
{"lineNum":"  601","line":"                        Some(func_env) => unsafe {"},
{"lineNum":"  602","line":"                            let func: NonNull<FN> = func_env.cast();"},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"                            &*func.as_ptr()"},
{"lineNum":"  605","line":"                        },"},
{"lineNum":"  606","line":""},
{"lineNum":"  607","line":"                        // This branch is supposed to be unreachable."},
{"lineNum":"  608","line":"                        None => unreachable!()"},
{"lineNum":"  609","line":"                    };"},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"                    // Catch unwind in case of errors."},
{"lineNum":"  612","line":"                    let err = match panic::catch_unwind("},
{"lineNum":"  613","line":"                        panic::AssertUnwindSafe("},
{"lineNum":"  614","line":"                            || {"},
{"lineNum":"  615","line":"                                func($( WasmExternType::from_native($x), )* ).report()"},
{"lineNum":"  616","line":"                            }"},
{"lineNum":"  617","line":"                        )"},
{"lineNum":"  618","line":"                    ) {"},
{"lineNum":"  619","line":"                        Ok(Ok(returns)) => return returns.into_c_struct(),"},
{"lineNum":"  620","line":"                        Ok(Err(err)) => {"},
{"lineNum":"  621","line":"                            let b: Box<_> = err.into();"},
{"lineNum":"  622","line":"                            b as Box<dyn Any>"},
{"lineNum":"  623","line":"                        },"},
{"lineNum":"  624","line":"                        Err(err) => err,"},
{"lineNum":"  625","line":"                    };"},
{"lineNum":"  626","line":""},
{"lineNum":"  627","line":"                    // At this point, there is an error that needs to"},
{"lineNum":"  628","line":"                    // be trapped."},
{"lineNum":"  629","line":"                    unsafe {"},
{"lineNum":"  630","line":"                        (&*vmctx.module).runnable_module.do_early_trap(err)"},
{"lineNum":"  631","line":"                    }"},
{"lineNum":"  632","line":"                }"},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"                // Extract the captured environment of the imported"},
{"lineNum":"  635","line":"                // function if any."},
{"lineNum":"  636","line":"                let func_env: Option<NonNull<vm::FuncEnv>> ="},
{"lineNum":"  637","line":"                    // `FN` is a function pointer, or a closure"},
{"lineNum":"  638","line":"                    // _without_ a captured environment."},
{"lineNum":"  639","line":"                    if mem::size_of::<Self>() == 0 {"},
{"lineNum":"  640","line":"                        NonNull::new(&self as *const _ as *mut vm::FuncEnv)"},
{"lineNum":"  641","line":"                    }"},
{"lineNum":"  642","line":"                    // `FN` is a closure _with_ a captured"},
{"lineNum":"  643","line":"                    // environment."},
{"lineNum":"  644","line":"                    else {"},
{"lineNum":"  645","line":"                        NonNull::new(Box::into_raw(Box::new(self))).map(NonNull::cast)"},
{"lineNum":"  646","line":"                    };"},
{"lineNum":"  647","line":""},
{"lineNum":"  648","line":"                ("},
{"lineNum":"  649","line":"                    NonNull::new(wrap::<$( $x, )* Rets, Trap, Self> as *mut vm::Func).unwrap(),"},
{"lineNum":"  650","line":"                    func_env"},
{"lineNum":"  651","line":"                )"},
{"lineNum":"  652","line":"            }"},
{"lineNum":"  653","line":"        }"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"        impl<\'a $( , $x )*, Rets> Func<\'a, ( $( $x ),* ), Rets, Wasm>"},
{"lineNum":"  656","line":"        where"},
{"lineNum":"  657","line":"            $( $x: WasmExternType, )*"},
{"lineNum":"  658","line":"            Rets: WasmTypeList,"},
{"lineNum":"  659","line":"        {"},
{"lineNum":"  660","line":"            /// Call the typed func and return results."},
{"lineNum":"  661","line":"            #[allow(non_snake_case)]"},
{"lineNum":"  662","line":"            pub fn call(&self, $( $x: $x, )* ) -> Result<Rets, RuntimeError> {"},
{"lineNum":"  663","line":"                #[allow(unused_parens)]"},
{"lineNum":"  664","line":"                unsafe {"},
{"lineNum":"  665","line":"                    <( $( $x ),* ) as WasmTypeList>::call("},
{"lineNum":"  666","line":"                        ( $( $x ),* ),"},
{"lineNum":"  667","line":"                        self.func,"},
{"lineNum":"  668","line":"                        self.inner,"},
{"lineNum":"  669","line":"                        self.vmctx"},
{"lineNum":"  670","line":"                    )"},
{"lineNum":"  671","line":"                }"},
{"lineNum":"  672","line":"            }"},
{"lineNum":"  673","line":"        }"},
{"lineNum":"  674","line":"    };"},
{"lineNum":"  675","line":"}"},
{"lineNum":"  676","line":""},
{"lineNum":"  677","line":"macro_rules! count_idents {"},
{"lineNum":"  678","line":"    ( $($idents:ident),* ) => {{"},
{"lineNum":"  679","line":"        #[allow(dead_code, non_camel_case_types)]"},
{"lineNum":"  680","line":"        enum Idents { $($idents,)* __CountIdentsLast }"},
{"lineNum":"  681","line":"        const COUNT: usize = Idents::__CountIdentsLast as usize;"},
{"lineNum":"  682","line":"        COUNT"},
{"lineNum":"  683","line":"    }};"},
{"lineNum":"  684","line":"}"},
{"lineNum":"  685","line":""},
{"lineNum":"  686","line":"impl_traits!([C] S0,);"},
{"lineNum":"  687","line":"impl_traits!([transparent] S1, A);"},
{"lineNum":"  688","line":"impl_traits!([C] S2, A, B);"},
{"lineNum":"  689","line":"impl_traits!([C] S3, A, B, C);"},
{"lineNum":"  690","line":"impl_traits!([C] S4, A, B, C, D);"},
{"lineNum":"  691","line":"impl_traits!([C] S5, A, B, C, D, E);"},
{"lineNum":"  692","line":"impl_traits!([C] S6, A, B, C, D, E, F);"},
{"lineNum":"  693","line":"impl_traits!([C] S7, A, B, C, D, E, F, G);"},
{"lineNum":"  694","line":"impl_traits!([C] S8, A, B, C, D, E, F, G, H);"},
{"lineNum":"  695","line":"impl_traits!([C] S9, A, B, C, D, E, F, G, H, I);"},
{"lineNum":"  696","line":"impl_traits!([C] S10, A, B, C, D, E, F, G, H, I, J);"},
{"lineNum":"  697","line":"impl_traits!([C] S11, A, B, C, D, E, F, G, H, I, J, K);"},
{"lineNum":"  698","line":"impl_traits!([C] S12, A, B, C, D, E, F, G, H, I, J, K, L);"},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"impl<\'a, Args, Rets, Inner> IsExport for Func<\'a, Args, Rets, Inner>"},
{"lineNum":"  701","line":"where"},
{"lineNum":"  702","line":"    Args: WasmTypeList,"},
{"lineNum":"  703","line":"    Rets: WasmTypeList,"},
{"lineNum":"  704","line":"    Inner: Kind,"},
{"lineNum":"  705","line":"{"},
{"lineNum":"  706","line":"    fn to_export(&self) -> Export {"},
{"lineNum":"  707","line":"        let func = unsafe { FuncPointer::new(self.func.as_ptr()) };"},
{"lineNum":"  708","line":"        let ctx = match self.func_env {"},
{"lineNum":"  709","line":"            func_env @ Some(_) => Context::ExternalWithEnv(self.vmctx, func_env),"},
{"lineNum":"  710","line":"            None => Context::Internal,"},
{"lineNum":"  711","line":"        };"},
{"lineNum":"  712","line":"        let signature = Arc::new(FuncSig::new(Args::types(), Rets::types()));"},
{"lineNum":"  713","line":""},
{"lineNum":"  714","line":"        Export::Function {"},
{"lineNum":"  715","line":"            func,"},
{"lineNum":"  716","line":"            ctx,"},
{"lineNum":"  717","line":"            signature,"},
{"lineNum":"  718","line":"        }"},
{"lineNum":"  719","line":"    }"},
{"lineNum":"  720","line":"}"},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"#[cfg(test)]"},
{"lineNum":"  723","line":"mod tests {"},
{"lineNum":"  724","line":"    use super::*;"},
{"lineNum":"  725","line":""},
{"lineNum":"  726","line":"    macro_rules! test_func_arity_n {"},
{"lineNum":"  727","line":"        ($test_name:ident, $($x:ident),*) => {"},
{"lineNum":"  728","line":"            #[test]"},
{"lineNum":"  729","line":"            fn $test_name() {"},
{"lineNum":"  730","line":"                use crate::vm;"},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"                fn with_vmctx(_: &mut vm::Ctx, $($x: i32),*) -> i32 {"},
{"lineNum":"  733","line":"                    vec![$($x),*].iter().sum()"},
{"lineNum":"  734","line":"                }"},
{"lineNum":"  735","line":""},
{"lineNum":"  736","line":"                fn without_vmctx($($x: i32),*) -> i32 {"},
{"lineNum":"  737","line":"                    vec![$($x),*].iter().sum()"},
{"lineNum":"  738","line":"                }"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"                let _ = Func::new(with_vmctx);"},
{"lineNum":"  741","line":"                let _ = Func::new(without_vmctx);"},
{"lineNum":"  742","line":"                let _ = Func::new(|_: &mut vm::Ctx, $($x: i32),*| -> i32 {"},
{"lineNum":"  743","line":"                    vec![$($x),*].iter().sum()"},
{"lineNum":"  744","line":"                });"},
{"lineNum":"  745","line":"                let _ = Func::new(|$($x: i32),*| -> i32 {"},
{"lineNum":"  746","line":"                    vec![$($x),*].iter().sum()"},
{"lineNum":"  747","line":"                });"},
{"lineNum":"  748","line":"            }"},
{"lineNum":"  749","line":"        }"},
{"lineNum":"  750","line":"    }"},
{"lineNum":"  751","line":""},
{"lineNum":"  752","line":"    #[test]"},
{"lineNum":"  753","line":"    fn test_func_arity_0() {"},
{"lineNum":"  754","line":"        fn foo(_: &mut vm::Ctx) -> i32 {"},
{"lineNum":"  755","line":"            0"},
{"lineNum":"  756","line":"        }"},
{"lineNum":"  757","line":""},
{"lineNum":"  758","line":"        fn bar() -> i32 {"},
{"lineNum":"  759","line":"            0"},
{"lineNum":"  760","line":"        }"},
{"lineNum":"  761","line":""},
{"lineNum":"  762","line":"        let _ = Func::new(foo);"},
{"lineNum":"  763","line":"        let _ = Func::new(bar);"},
{"lineNum":"  764","line":"        let _ = Func::new(|_: &mut vm::Ctx| -> i32 { 0 });"},
{"lineNum":"  765","line":"        let _ = Func::new(|| -> i32 { 0 });"},
{"lineNum":"  766","line":"    }"},
{"lineNum":"  767","line":""},
{"lineNum":"  768","line":"    test_func_arity_n!(test_func_arity_1, a);"},
{"lineNum":"  769","line":"    test_func_arity_n!(test_func_arity_2, a, b);"},
{"lineNum":"  770","line":"    test_func_arity_n!(test_func_arity_3, a, b, c);"},
{"lineNum":"  771","line":"    test_func_arity_n!(test_func_arity_4, a, b, c, d);"},
{"lineNum":"  772","line":"    test_func_arity_n!(test_func_arity_5, a, b, c, d, e);"},
{"lineNum":"  773","line":"    test_func_arity_n!(test_func_arity_6, a, b, c, d, e, f);"},
{"lineNum":"  774","line":"    test_func_arity_n!(test_func_arity_7, a, b, c, d, e, f, g);"},
{"lineNum":"  775","line":"    test_func_arity_n!(test_func_arity_8, a, b, c, d, e, f, g, h);"},
{"lineNum":"  776","line":"    test_func_arity_n!(test_func_arity_9, a, b, c, d, e, f, g, h, i);"},
{"lineNum":"  777","line":"    test_func_arity_n!(test_func_arity_10, a, b, c, d, e, f, g, h, i, j);"},
{"lineNum":"  778","line":"    test_func_arity_n!(test_func_arity_11, a, b, c, d, e, f, g, h, i, j, k);"},
{"lineNum":"  779","line":"    test_func_arity_n!(test_func_arity_12, a, b, c, d, e, f, g, h, i, j, k, l);"},
{"lineNum":"  780","line":""},
{"lineNum":"  781","line":"    #[test]"},
{"lineNum":"  782","line":"    fn test_call() {"},
{"lineNum":"  783","line":"        fn foo(_ctx: &mut vm::Ctx, a: i32, b: i32) -> (i32, i32) {"},
{"lineNum":"  784","line":"            (a, b)"},
{"lineNum":"  785","line":"        }"},
{"lineNum":"  786","line":""},
{"lineNum":"  787","line":"        let _f = Func::new(foo);"},
{"lineNum":"  788","line":"    }"},
{"lineNum":"  789","line":""},
{"lineNum":"  790","line":"    #[test]"},
{"lineNum":"  791","line":"    fn test_imports() {"},
{"lineNum":"  792","line":"        use crate::{func, imports};"},
{"lineNum":"  793","line":""},
{"lineNum":"  794","line":"        fn foo(_ctx: &mut vm::Ctx, a: i32) -> i32 {"},
{"lineNum":"  795","line":"            a"},
{"lineNum":"  796","line":"        }"},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"        let _import_object = imports! {"},
{"lineNum":"  799","line":"            \"env\" => {"},
{"lineNum":"  800","line":"                \"foo\" => func!(foo),"},
{"lineNum":"  801","line":"            },"},
{"lineNum":"  802","line":"        };"},
{"lineNum":"  803","line":"    }"},
{"lineNum":"  804","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "compile_debug", "date" : "2019-11-28 11:37:30", "instrumented" : 6, "covered" : 0,};
var merged_data = [];
