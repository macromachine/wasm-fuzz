var data = {lines:[
{"lineNum":"    1","line":"use crate::{"},
{"lineNum":"    2","line":"    error::CompileResult,"},
{"lineNum":"    3","line":"    module::ModuleInner,"},
{"lineNum":"    4","line":"    state::ModuleStateMap,"},
{"lineNum":"    5","line":"    typed_func::Wasm,"},
{"lineNum":"    6","line":"    types::{LocalFuncIndex, SigIndex},"},
{"lineNum":"    7","line":"    vm,"},
{"lineNum":"    8","line":"};"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"use crate::{"},
{"lineNum":"   11","line":"    cache::{Artifact, Error as CacheError},"},
{"lineNum":"   12","line":"    codegen::BreakpointMap,"},
{"lineNum":"   13","line":"    module::ModuleInfo,"},
{"lineNum":"   14","line":"    sys::Memory,"},
{"lineNum":"   15","line":"};"},
{"lineNum":"   16","line":"use std::{any::Any, ptr::NonNull};"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"use std::collections::HashMap;"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"pub mod sys {"},
{"lineNum":"   21","line":"    pub use crate::sys::*;"},
{"lineNum":"   22","line":"}"},
{"lineNum":"   23","line":"pub use crate::sig_registry::SigRegistry;"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/// Enum used to select which compiler should be used to generate code."},
{"lineNum":"   26","line":"#[derive(Serialize, Deserialize, Debug, Copy, Clone, PartialEq, Eq)]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   27","line":"pub enum Backend {"},
{"lineNum":"   28","line":"    Cranelift,"},
{"lineNum":"   29","line":"    Singlepass,"},
{"lineNum":"   30","line":"    LLVM,"},
{"lineNum":"   31","line":"    Auto,"},
{"lineNum":"   32","line":"}"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"impl Backend {"},
{"lineNum":"   35","line":"    /// Get a list of the currently enabled (via feature flag) backends."},
{"lineNum":"   36","line":"    pub fn variants() -> &\'static [&\'static str] {"},
{"lineNum":"   37","line":"        &["},
{"lineNum":"   38","line":"            #[cfg(feature = \"backend-cranelift\")]"},
{"lineNum":"   39","line":"            \"cranelift\","},
{"lineNum":"   40","line":"            #[cfg(feature = \"backend-singlepass\")]"},
{"lineNum":"   41","line":"            \"singlepass\","},
{"lineNum":"   42","line":"            #[cfg(feature = \"backend-llvm\")]"},
{"lineNum":"   43","line":"            \"llvm\","},
{"lineNum":"   44","line":"            \"auto\","},
{"lineNum":"   45","line":"        ]"},
{"lineNum":"   46","line":"    }"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    /// Stable string representation of the backend."},
{"lineNum":"   49","line":"    /// It can be used as part of a cache key, for example."},
{"lineNum":"   50","line":"    pub fn to_string(&self) -> &\'static str {"},
{"lineNum":"   51","line":"        match self {"},
{"lineNum":"   52","line":"            Backend::Cranelift => \"cranelift\","},
{"lineNum":"   53","line":"            Backend::Singlepass => \"singlepass\","},
{"lineNum":"   54","line":"            Backend::LLVM => \"llvm\","},
{"lineNum":"   55","line":"            Backend::Auto => \"auto\","},
{"lineNum":"   56","line":"        }"},
{"lineNum":"   57","line":"    }"},
{"lineNum":"   58","line":"}"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"impl Default for Backend {"},
{"lineNum":"   61","line":"    fn default() -> Self {"},
{"lineNum":"   62","line":"        Backend::Cranelift"},
{"lineNum":"   63","line":"    }"},
{"lineNum":"   64","line":"}"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"impl std::str::FromStr for Backend {"},
{"lineNum":"   67","line":"    type Err = String;"},
{"lineNum":"   68","line":"    fn from_str(s: &str) -> Result<Backend, String> {"},
{"lineNum":"   69","line":"        match s.to_lowercase().as_str() {"},
{"lineNum":"   70","line":"            \"singlepass\" => Ok(Backend::Singlepass),"},
{"lineNum":"   71","line":"            \"cranelift\" => Ok(Backend::Cranelift),"},
{"lineNum":"   72","line":"            \"llvm\" => Ok(Backend::LLVM),"},
{"lineNum":"   73","line":"            \"auto\" => Ok(Backend::Auto),"},
{"lineNum":"   74","line":"            _ => Err(format!(\"The backend {} doesn\'t exist\", s)),"},
{"lineNum":"   75","line":"        }"},
{"lineNum":"   76","line":"    }"},
{"lineNum":"   77","line":"}"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"#[derive(Copy, Clone, Debug)]"},
{"lineNum":"   80","line":"pub enum Architecture {"},
{"lineNum":"   81","line":"    X64,"},
{"lineNum":"   82","line":"    Aarch64,"},
{"lineNum":"   83","line":"}"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"#[repr(u8)]"},
{"lineNum":"   86","line":"#[derive(Copy, Clone, Debug)]"},
{"lineNum":"   87","line":"pub enum InlineBreakpointType {"},
{"lineNum":"   88","line":"    Trace,"},
{"lineNum":"   89","line":"    Middleware,"},
{"lineNum":"   90","line":"    Unknown,"},
{"lineNum":"   91","line":"}"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"#[derive(Clone, Debug)]"},
{"lineNum":"   94","line":"pub struct InlineBreakpoint {"},
{"lineNum":"   95","line":"    pub size: usize,"},
{"lineNum":"   96","line":"    pub ty: InlineBreakpointType,"},
{"lineNum":"   97","line":"}"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"pub fn get_inline_breakpoint_size(arch: Architecture, backend: Backend) -> Option<usize> {"},
{"lineNum":"  100","line":"    match (arch, backend) {"},
{"lineNum":"  101","line":"        (Architecture::X64, Backend::Singlepass) => Some(7),"},
{"lineNum":"  102","line":"        (Architecture::Aarch64, Backend::Singlepass) => Some(12),"},
{"lineNum":"  103","line":"        _ => None,"},
{"lineNum":"  104","line":"    }"},
{"lineNum":"  105","line":"}"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"pub fn read_inline_breakpoint("},
{"lineNum":"  108","line":"    arch: Architecture,"},
{"lineNum":"  109","line":"    backend: Backend,"},
{"lineNum":"  110","line":"    code: &[u8],"},
{"lineNum":"  111","line":") -> Option<InlineBreakpoint> {"},
{"lineNum":"  112","line":"    match arch {"},
{"lineNum":"  113","line":"        Architecture::X64 => match backend {"},
{"lineNum":"  114","line":"            Backend::Singlepass => {"},
{"lineNum":"  115","line":"                if code.len() < 7 {"},
{"lineNum":"  116","line":"                    None"},
{"lineNum":"  117","line":"                } else if &code[..6] == &[0x0f, 0x0b, 0x0f, 0xb9, 0xcd, 0xff] {"},
{"lineNum":"  118","line":"                    // ud2 ud (int 0xff) code"},
{"lineNum":"  119","line":"                    Some(InlineBreakpoint {"},
{"lineNum":"  120","line":"                        size: 7,"},
{"lineNum":"  121","line":"                        ty: match code[6] {"},
{"lineNum":"  122","line":"                            0 => InlineBreakpointType::Trace,"},
{"lineNum":"  123","line":"                            1 => InlineBreakpointType::Middleware,"},
{"lineNum":"  124","line":"                            _ => InlineBreakpointType::Unknown,"},
{"lineNum":"  125","line":"                        },"},
{"lineNum":"  126","line":"                    })"},
{"lineNum":"  127","line":"                } else {"},
{"lineNum":"  128","line":"                    None"},
{"lineNum":"  129","line":"                }"},
{"lineNum":"  130","line":"            }"},
{"lineNum":"  131","line":"            _ => None,"},
{"lineNum":"  132","line":"        },"},
{"lineNum":"  133","line":"        Architecture::Aarch64 => match backend {"},
{"lineNum":"  134","line":"            Backend::Singlepass => {"},
{"lineNum":"  135","line":"                if code.len() < 12 {"},
{"lineNum":"  136","line":"                    None"},
{"lineNum":"  137","line":"                } else if &code[..8] == &[0, 0, 0, 0, 0xff, 0xff, 0xff, 0xff] {"},
{"lineNum":"  138","line":"                    Some(InlineBreakpoint {"},
{"lineNum":"  139","line":"                        size: 12,"},
{"lineNum":"  140","line":"                        ty: match code[8] {"},
{"lineNum":"  141","line":"                            0 => InlineBreakpointType::Trace,"},
{"lineNum":"  142","line":"                            1 => InlineBreakpointType::Middleware,"},
{"lineNum":"  143","line":"                            _ => InlineBreakpointType::Unknown,"},
{"lineNum":"  144","line":"                        },"},
{"lineNum":"  145","line":"                    })"},
{"lineNum":"  146","line":"                } else {"},
{"lineNum":"  147","line":"                    None"},
{"lineNum":"  148","line":"                }"},
{"lineNum":"  149","line":"            }"},
{"lineNum":"  150","line":"            _ => None,"},
{"lineNum":"  151","line":"        },"},
{"lineNum":"  152","line":"    }"},
{"lineNum":"  153","line":"}"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"#[cfg(test)]"},
{"lineNum":"  156","line":"mod backend_test {"},
{"lineNum":"  157","line":"    use super::*;"},
{"lineNum":"  158","line":"    use std::str::FromStr;"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"    #[test]"},
{"lineNum":"  161","line":"    fn str_repr_matches() {"},
{"lineNum":"  162","line":"        // if this test breaks, think hard about why it\'s breaking"},
{"lineNum":"  163","line":"        // can we avoid having these be different?"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"        for &backend in &[Backend::Cranelift, Backend::LLVM, Backend::Singlepass] {"},
{"lineNum":"  166","line":"            assert_eq!(backend, Backend::from_str(backend.to_string()).unwrap());"},
{"lineNum":"  167","line":"        }"},
{"lineNum":"  168","line":"    }"},
{"lineNum":"  169","line":"}"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"/// This type cannot be constructed from"},
{"lineNum":"  172","line":"/// outside the runtime crate."},
{"lineNum":"  173","line":"pub struct Token {"},
{"lineNum":"  174","line":"    _private: (),"},
{"lineNum":"  175","line":"}"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"impl Token {"},
{"lineNum":"  178","line":"    pub(crate) fn generate() -> Self {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  179","line":"        Self { _private: () }"},
{"lineNum":"  180","line":"    }","class":"linePartCov","hits":"1","order":"26","possible_hits":"2",},
{"lineNum":"  181","line":"}"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"#[derive(Copy, Clone, Debug)]"},
{"lineNum":"  184","line":"pub enum MemoryBoundCheckMode {"},
{"lineNum":"  185","line":"    Default,"},
{"lineNum":"  186","line":"    Enable,"},
{"lineNum":"  187","line":"    Disable,"},
{"lineNum":"  188","line":"}"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"impl Default for MemoryBoundCheckMode {"},
{"lineNum":"  191","line":"    fn default() -> MemoryBoundCheckMode {","class":"lineCov","hits":"1","order":"32","possible_hits":"1",},
{"lineNum":"  192","line":"        MemoryBoundCheckMode::Default","class":"lineCov","hits":"1","order":"33","possible_hits":"1",},
{"lineNum":"  193","line":"    }","class":"linePartCov","hits":"1","order":"34","possible_hits":"2",},
{"lineNum":"  194","line":"}"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"/// Controls which experimental features will be enabled."},
{"lineNum":"  197","line":"#[derive(Debug, Default)]","class":"lineCov","hits":"2","order":"38","possible_hits":"2",},
{"lineNum":"  198","line":"pub struct Features {"},
{"lineNum":"  199","line":"    pub simd: bool,","class":"lineCov","hits":"1","order":"39","possible_hits":"1",},
{"lineNum":"  200","line":"    pub threads: bool,","class":"lineCov","hits":"1","order":"40","possible_hits":"1",},
{"lineNum":"  201","line":"}"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"/// Configuration data for the compiler"},
{"lineNum":"  204","line":"#[derive(Debug, Default)]","class":"linePartCov","hits":"1","order":"29","possible_hits":"4",},
{"lineNum":"  205","line":"pub struct CompilerConfig {"},
{"lineNum":"  206","line":"    /// Symbol information generated from emscripten; used for more detailed debug messages"},
{"lineNum":"  207","line":"    pub symbol_map: Option<HashMap<u32, String>>,","class":"lineCov","hits":"1","order":"30","possible_hits":"1",},
{"lineNum":"  208","line":"    pub memory_bound_check_mode: MemoryBoundCheckMode,","class":"lineCov","hits":"1","order":"31","possible_hits":"1",},
{"lineNum":"  209","line":"    pub enforce_stack_check: bool,","class":"lineCov","hits":"1","order":"35","possible_hits":"1",},
{"lineNum":"  210","line":"    pub track_state: bool,","class":"lineCov","hits":"1","order":"36","possible_hits":"1",},
{"lineNum":"  211","line":"    pub features: Features,","class":"lineCov","hits":"1","order":"37","possible_hits":"1",},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"    // target info used by LLVM"},
{"lineNum":"  214","line":"    pub triple: Option<String>,","class":"lineCov","hits":"1","order":"41","possible_hits":"1",},
{"lineNum":"  215","line":"    pub cpu_name: Option<String>,","class":"lineCov","hits":"1","order":"42","possible_hits":"1",},
{"lineNum":"  216","line":"    pub cpu_features: Option<String>,","class":"lineCov","hits":"1","order":"43","possible_hits":"1",},
{"lineNum":"  217","line":"}"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"pub trait Compiler {"},
{"lineNum":"  220","line":"    /// Compiles a `Module` from WebAssembly binary format."},
{"lineNum":"  221","line":"    /// The `CompileToken` parameter ensures that this can only"},
{"lineNum":"  222","line":"    /// be called from inside the runtime."},
{"lineNum":"  223","line":"    fn compile("},
{"lineNum":"  224","line":"        &self,"},
{"lineNum":"  225","line":"        wasm: &[u8],"},
{"lineNum":"  226","line":"        comp_conf: CompilerConfig,"},
{"lineNum":"  227","line":"        _: Token,"},
{"lineNum":"  228","line":"    ) -> CompileResult<ModuleInner>;"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"    unsafe fn from_cache(&self, cache: Artifact, _: Token) -> Result<ModuleInner, CacheError>;"},
{"lineNum":"  231","line":"}"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"pub trait RunnableModule: Send + Sync {"},
{"lineNum":"  234","line":"    /// This returns a pointer to the function designated by the `local_func_index`"},
{"lineNum":"  235","line":"    /// parameter."},
{"lineNum":"  236","line":"    fn get_func("},
{"lineNum":"  237","line":"        &self,"},
{"lineNum":"  238","line":"        info: &ModuleInfo,"},
{"lineNum":"  239","line":"        local_func_index: LocalFuncIndex,"},
{"lineNum":"  240","line":"    ) -> Option<NonNull<vm::Func>>;"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"    fn get_module_state_map(&self) -> Option<ModuleStateMap> {"},
{"lineNum":"  243","line":"        None"},
{"lineNum":"  244","line":"    }"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"    fn get_breakpoints(&self) -> Option<BreakpointMap> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  247","line":"        None","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  248","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"    unsafe fn patch_local_function(&self, _idx: usize, _target_address: usize) -> bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":"        false"},
{"lineNum":"  252","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"    /// A wasm trampoline contains the necessary data to dynamically call an exported wasm function."},
{"lineNum":"  255","line":"    /// Given a particular signature index, we are returned a trampoline that is matched with that"},
{"lineNum":"  256","line":"    /// signature and an invoke function that can call the trampoline."},
{"lineNum":"  257","line":"    fn get_trampoline(&self, info: &ModuleInfo, sig_index: SigIndex) -> Option<Wasm>;"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"    unsafe fn do_early_trap(&self, data: Box<dyn Any>) -> !;"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    /// Returns the machine code associated with this module."},
{"lineNum":"  262","line":"    fn get_code(&self) -> Option<&[u8]> {"},
{"lineNum":"  263","line":"        None"},
{"lineNum":"  264","line":"    }"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"    /// Returns the beginning offsets of all functions, including import trampolines."},
{"lineNum":"  267","line":"    fn get_offsets(&self) -> Option<Vec<usize>> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  268","line":"        None","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"    /// Returns the beginning offsets of all local functions."},
{"lineNum":"  272","line":"    fn get_local_function_offsets(&self) -> Option<Vec<usize>> {"},
{"lineNum":"  273","line":"        None"},
{"lineNum":"  274","line":"    }"},
{"lineNum":"  275","line":"}"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"pub trait CacheGen: Send + Sync {"},
{"lineNum":"  278","line":"    fn generate_cache(&self) -> Result<(Box<[u8]>, Memory), CacheError>;"},
{"lineNum":"  279","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "compile_debug", "date" : "2019-11-28 11:37:30", "instrumented" : 26, "covered" : 16,};
var merged_data = [];
