var data = {lines:[
{"lineNum":"    1","line":"//! Wasmer Runtime Core Library","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":"    2","line":"//!"},
{"lineNum":"    3","line":"//! The runtime core library provides common data structures which are shared by compiler backends"},
{"lineNum":"    4","line":"//! to implement a Web Assembly runtime."},
{"lineNum":"    5","line":"//!"},
{"lineNum":"    6","line":"//! The runtime core also provides an API for users who use wasmer as an embedded wasm runtime which"},
{"lineNum":"    7","line":"//! allows operations like compiling, instantiating, providing imports, access exports, memories,"},
{"lineNum":"    8","line":"//! and tables for example."},
{"lineNum":"    9","line":"//!"},
{"lineNum":"   10","line":"//! The runtime core library is recommended to be used by only power users who wish to customize the"},
{"lineNum":"   11","line":"//! wasmer runtime.  Most wasmer users should prefer the API which is re-exported by the wasmer"},
{"lineNum":"   12","line":"//! runtime library which provides common defaults and a friendly API."},
{"lineNum":"   13","line":"//!"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#![deny("},
{"lineNum":"   16","line":"    dead_code,"},
{"lineNum":"   17","line":"    missing_docs,"},
{"lineNum":"   18","line":"    nonstandard_style,"},
{"lineNum":"   19","line":"    unused_imports,"},
{"lineNum":"   20","line":"    unused_mut,"},
{"lineNum":"   21","line":"    unused_variables,"},
{"lineNum":"   22","line":"    unused_unsafe,"},
{"lineNum":"   23","line":"    unreachable_patterns"},
{"lineNum":"   24","line":")]"},
{"lineNum":"   25","line":"#![cfg_attr(nightly, feature(unwind_attributes))]"},
{"lineNum":"   26","line":"#![doc(html_favicon_url = \"https://wasmer.io/static/icons/favicon.ico\")]"},
{"lineNum":"   27","line":"#![doc(html_logo_url = \"https://avatars3.githubusercontent.com/u/44205449?s=200&v=4\")]"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"#[macro_use]"},
{"lineNum":"   30","line":"extern crate serde_derive;"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"#[allow(unused_imports)]"},
{"lineNum":"   33","line":"#[macro_use]"},
{"lineNum":"   34","line":"extern crate lazy_static;"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"#[macro_use]"},
{"lineNum":"   37","line":"mod macros;"},
{"lineNum":"   38","line":"#[doc(hidden)]"},
{"lineNum":"   39","line":"pub mod backend;"},
{"lineNum":"   40","line":"mod backing;"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"pub mod cache;"},
{"lineNum":"   43","line":"pub mod codegen;"},
{"lineNum":"   44","line":"pub mod error;"},
{"lineNum":"   45","line":"pub mod export;"},
{"lineNum":"   46","line":"pub mod global;"},
{"lineNum":"   47","line":"pub mod import;"},
{"lineNum":"   48","line":"pub mod instance;"},
{"lineNum":"   49","line":"pub mod loader;"},
{"lineNum":"   50","line":"pub mod memory;"},
{"lineNum":"   51","line":"pub mod module;"},
{"lineNum":"   52","line":"pub mod parse;"},
{"lineNum":"   53","line":"mod sig_registry;"},
{"lineNum":"   54","line":"pub mod structures;"},
{"lineNum":"   55","line":"mod sys;"},
{"lineNum":"   56","line":"pub mod table;"},
{"lineNum":"   57","line":"#[cfg(all(unix, target_arch = \"x86_64\"))]"},
{"lineNum":"   58","line":"pub mod trampoline_x64;"},
{"lineNum":"   59","line":"pub mod typed_func;"},
{"lineNum":"   60","line":"pub mod types;"},
{"lineNum":"   61","line":"pub mod units;"},
{"lineNum":"   62","line":"pub mod vm;"},
{"lineNum":"   63","line":"#[doc(hidden)]"},
{"lineNum":"   64","line":"pub mod vmcalls;"},
{"lineNum":"   65","line":"#[cfg(all(unix, target_arch = \"x86_64\"))]"},
{"lineNum":"   66","line":"pub use trampoline_x64 as trampoline;"},
{"lineNum":"   67","line":"#[cfg(unix)]"},
{"lineNum":"   68","line":"pub mod fault;"},
{"lineNum":"   69","line":"pub mod state;"},
{"lineNum":"   70","line":"#[cfg(feature = \"managed\")]"},
{"lineNum":"   71","line":"pub mod tiering;"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"use self::error::CompileResult;"},
{"lineNum":"   74","line":"#[doc(inline)]"},
{"lineNum":"   75","line":"pub use self::error::Result;"},
{"lineNum":"   76","line":"#[doc(inline)]"},
{"lineNum":"   77","line":"pub use self::import::IsExport;"},
{"lineNum":"   78","line":"#[doc(inline)]"},
{"lineNum":"   79","line":"pub use self::instance::{DynFunc, Instance};"},
{"lineNum":"   80","line":"#[doc(inline)]"},
{"lineNum":"   81","line":"pub use self::module::Module;"},
{"lineNum":"   82","line":"#[doc(inline)]"},
{"lineNum":"   83","line":"pub use self::typed_func::Func;"},
{"lineNum":"   84","line":"use std::sync::Arc;"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"pub use wasmparser;"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"use self::cache::{Artifact, Error as CacheError};"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"pub mod prelude {"},
{"lineNum":"   91","line":"    //! The prelude module is a helper module used to bring commonly used runtime core imports into"},
{"lineNum":"   92","line":"    //! scope."},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    pub use crate::import::{ImportObject, Namespace};"},
{"lineNum":"   95","line":"    pub use crate::types::{"},
{"lineNum":"   96","line":"        FuncIndex, GlobalIndex, ImportedFuncIndex, ImportedGlobalIndex, ImportedMemoryIndex,"},
{"lineNum":"   97","line":"        ImportedTableIndex, LocalFuncIndex, LocalGlobalIndex, LocalMemoryIndex, LocalTableIndex,"},
{"lineNum":"   98","line":"        MemoryIndex, TableIndex, Type, Value,"},
{"lineNum":"   99","line":"    };"},
{"lineNum":"  100","line":"    pub use crate::vm;"},
{"lineNum":"  101","line":"    pub use crate::{func, imports};"},
{"lineNum":"  102","line":"}"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"/// Compile a [`Module`] using the provided compiler from"},
{"lineNum":"  105","line":"/// WebAssembly binary code. This function is useful if it"},
{"lineNum":"  106","line":"/// is necessary to a compile a module before it can be instantiated"},
{"lineNum":"  107","line":"/// and must be used if you wish to use a different backend from the default."},
{"lineNum":"  108","line":"///"},
{"lineNum":"  109","line":"/// [`Module`]: struct.Module.html"},
{"lineNum":"  110","line":"pub fn compile_with(","class":"lineCov","hits":"1","order":"24","possible_hits":"1",},
{"lineNum":"  111","line":"    wasm: &[u8],"},
{"lineNum":"  112","line":"    compiler: &dyn backend::Compiler,"},
{"lineNum":"  113","line":") -> CompileResult<module::Module> {"},
{"lineNum":"  114","line":"    let token = backend::Token::generate();","class":"lineCov","hits":"1","order":"25","possible_hits":"1",},
{"lineNum":"  115","line":"    compiler","class":"lineCov","hits":"3","order":"27","possible_hits":"3",},
{"lineNum":"  116","line":"        .compile(wasm, Default::default(), token)","class":"lineCov","hits":"1","order":"28","possible_hits":"1",},
{"lineNum":"  117","line":"        .map(|mut inner| {","class":"linePartCov","hits":"2","order":"745","possible_hits":"3",},
{"lineNum":"  118","line":"            let inner_info: &mut crate::module::ModuleInfo = &mut inner.info;","class":"lineCov","hits":"1","order":"746","possible_hits":"1",},
{"lineNum":"  119","line":"            inner_info.import_custom_sections(wasm).unwrap();","class":"lineCov","hits":"2","order":"747","possible_hits":"2",},
{"lineNum":"  120","line":"            module::Module::new(Arc::new(inner))","class":"lineCov","hits":"1","order":"753","possible_hits":"1",},
{"lineNum":"  121","line":"        })","class":"lineCov","hits":"1","order":"757","possible_hits":"1",},
{"lineNum":"  122","line":"}","class":"linePartCov","hits":"1","order":"758","possible_hits":"2",},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"/// The same as `compile_with` but changes the compiler behavior"},
{"lineNum":"  125","line":"/// with the values in the `CompilerConfig`"},
{"lineNum":"  126","line":"pub fn compile_with_config("},
{"lineNum":"  127","line":"    wasm: &[u8],"},
{"lineNum":"  128","line":"    compiler: &dyn backend::Compiler,"},
{"lineNum":"  129","line":"    compiler_config: backend::CompilerConfig,"},
{"lineNum":"  130","line":") -> CompileResult<module::Module> {"},
{"lineNum":"  131","line":"    let token = backend::Token::generate();"},
{"lineNum":"  132","line":"    compiler"},
{"lineNum":"  133","line":"        .compile(wasm, compiler_config, token)"},
{"lineNum":"  134","line":"        .map(|inner| module::Module::new(Arc::new(inner)))"},
{"lineNum":"  135","line":"}"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"/// Perform validation as defined by the"},
{"lineNum":"  138","line":"/// WebAssembly specification. Returns `true` if validation"},
{"lineNum":"  139","line":"/// succeeded, `false` if validation failed."},
{"lineNum":"  140","line":"pub fn validate(wasm: &[u8]) -> bool {"},
{"lineNum":"  141","line":"    validate_and_report_errors(wasm).is_ok()"},
{"lineNum":"  142","line":"}"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"/// The same as `validate` but with an Error message on failure"},
{"lineNum":"  145","line":"pub fn validate_and_report_errors(wasm: &[u8]) -> ::std::result::Result<(), String> {"},
{"lineNum":"  146","line":"    validate_and_report_errors_with_features(wasm, Default::default())"},
{"lineNum":"  147","line":"}"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"/// The same as `validate_and_report_errors` but with a Features."},
{"lineNum":"  150","line":"pub fn validate_and_report_errors_with_features("},
{"lineNum":"  151","line":"    wasm: &[u8],"},
{"lineNum":"  152","line":"    features: backend::Features,"},
{"lineNum":"  153","line":") -> ::std::result::Result<(), String> {"},
{"lineNum":"  154","line":"    use wasmparser::WasmDecoder;"},
{"lineNum":"  155","line":"    let config = wasmparser::ValidatingParserConfig {"},
{"lineNum":"  156","line":"        operator_config: wasmparser::OperatorValidatorConfig {"},
{"lineNum":"  157","line":"            enable_simd: features.simd,"},
{"lineNum":"  158","line":"            enable_bulk_memory: false,"},
{"lineNum":"  159","line":"            enable_multi_value: false,"},
{"lineNum":"  160","line":"            enable_reference_types: false,"},
{"lineNum":"  161","line":"            enable_threads: features.threads,"},
{"lineNum":"  162","line":"        },"},
{"lineNum":"  163","line":"    };"},
{"lineNum":"  164","line":"    let mut parser = wasmparser::ValidatingParser::new(wasm, Some(config));"},
{"lineNum":"  165","line":"    loop {"},
{"lineNum":"  166","line":"        let state = parser.read();"},
{"lineNum":"  167","line":"        match *state {"},
{"lineNum":"  168","line":"            wasmparser::ParserState::EndWasm => break Ok(()),"},
{"lineNum":"  169","line":"            wasmparser::ParserState::Error(e) => break Err(format!(\"{}\", e)),"},
{"lineNum":"  170","line":"            _ => {}"},
{"lineNum":"  171","line":"        }"},
{"lineNum":"  172","line":"    }"},
{"lineNum":"  173","line":"}"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"/// Creates a new module from the given cache `Artifact` for the specified compiler backend"},
{"lineNum":"  176","line":"pub unsafe fn load_cache_with("},
{"lineNum":"  177","line":"    cache: Artifact,"},
{"lineNum":"  178","line":"    compiler: &dyn backend::Compiler,"},
{"lineNum":"  179","line":") -> std::result::Result<module::Module, CacheError> {"},
{"lineNum":"  180","line":"    let token = backend::Token::generate();"},
{"lineNum":"  181","line":"    compiler"},
{"lineNum":"  182","line":"        .from_cache(cache, token)"},
{"lineNum":"  183","line":"        .map(|inner| module::Module::new(Arc::new(inner)))"},
{"lineNum":"  184","line":"}"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"/// The current version of this crate"},
{"lineNum":"  187","line":"pub const VERSION: &str = env!(\"CARGO_PKG_VERSION\");"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "compile_debug", "date" : "2019-11-28 11:37:30", "instrumented" : 11, "covered" : 10,};
var merged_data = [];
