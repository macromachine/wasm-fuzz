var data = {lines:[
{"lineNum":"    1","line":"#![deny(","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"    2","line":"    dead_code,"},
{"lineNum":"    3","line":"    missing_docs,"},
{"lineNum":"    4","line":"    nonstandard_style,"},
{"lineNum":"    5","line":"    unused_imports,"},
{"lineNum":"    6","line":"    unused_mut,"},
{"lineNum":"    7","line":"    unused_variables,"},
{"lineNum":"    8","line":"    unused_unsafe,"},
{"lineNum":"    9","line":"    unreachable_patterns"},
{"lineNum":"   10","line":")]"},
{"lineNum":"   11","line":"#![doc(html_favicon_url = \"https://wasmer.io/static/icons/favicon.ico\")]"},
{"lineNum":"   12","line":"#![doc(html_logo_url = \"https://avatars3.githubusercontent.com/u/44205449?s=200&v=4\")]"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"//! Wasmer-runtime is a library that makes embedding WebAssembly"},
{"lineNum":"   15","line":"//! in your application easy, efficient, and safe."},
{"lineNum":"   16","line":"//!"},
{"lineNum":"   17","line":"//! # How to use Wasmer-Runtime"},
{"lineNum":"   18","line":"//!"},
{"lineNum":"   19","line":"//! The easiest way is to use the [`instantiate`] function to create an [`Instance`]."},
{"lineNum":"   20","line":"//! Then you can use [`call`] or [`func`] and then [`call`][func.call] to call an exported function safely."},
{"lineNum":"   21","line":"//!"},
{"lineNum":"   22","line":"//! [`instantiate`]: fn.instantiate.html"},
{"lineNum":"   23","line":"//! [`Instance`]: struct.Instance.html"},
{"lineNum":"   24","line":"//! [`call`]: struct.Instance.html#method.call"},
{"lineNum":"   25","line":"//! [`func`]: struct.Instance.html#method.func"},
{"lineNum":"   26","line":"//! [func.call]: struct.Function.html#method.call"},
{"lineNum":"   27","line":"//!"},
{"lineNum":"   28","line":"//! ## Here\'s an example:"},
{"lineNum":"   29","line":"//!"},
{"lineNum":"   30","line":"//! Given this WebAssembly:"},
{"lineNum":"   31","line":"//!"},
{"lineNum":"   32","line":"//! ```wat"},
{"lineNum":"   33","line":"//! (module"},
{"lineNum":"   34","line":"//!   (type $t0 (func (param i32) (result i32)))"},
{"lineNum":"   35","line":"//!   (func $add_one (export \"add_one\") (type $t0) (param $p0 i32) (result i32)"},
{"lineNum":"   36","line":"//!     get_local $p0"},
{"lineNum":"   37","line":"//!     i32.const 1"},
{"lineNum":"   38","line":"//!     i32.add))"},
{"lineNum":"   39","line":"//! ```"},
{"lineNum":"   40","line":"//!"},
{"lineNum":"   41","line":"//! compiled into wasm bytecode, we can call the exported \"add_one\" function:"},
{"lineNum":"   42","line":"//!"},
{"lineNum":"   43","line":"//! ```"},
{"lineNum":"   44","line":"//! static WASM: &\'static [u8] = &["},
{"lineNum":"   45","line":"//!     // The module above compiled to bytecode goes here."},
{"lineNum":"   46","line":"//!     // ..."},
{"lineNum":"   47","line":"//! #   0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x06, 0x01, 0x60,"},
{"lineNum":"   48","line":"//! #   0x01, 0x7f, 0x01, 0x7f, 0x03, 0x02, 0x01, 0x00, 0x07, 0x0b, 0x01, 0x07,"},
{"lineNum":"   49","line":"//! #   0x61, 0x64, 0x64, 0x5f, 0x6f, 0x6e, 0x65, 0x00, 0x00, 0x0a, 0x09, 0x01,"},
{"lineNum":"   50","line":"//! #   0x07, 0x00, 0x20, 0x00, 0x41, 0x01, 0x6a, 0x0b, 0x00, 0x1a, 0x04, 0x6e,"},
{"lineNum":"   51","line":"//! #   0x61, 0x6d, 0x65, 0x01, 0x0a, 0x01, 0x00, 0x07, 0x61, 0x64, 0x64, 0x5f,"},
{"lineNum":"   52","line":"//! #   0x6f, 0x6e, 0x65, 0x02, 0x07, 0x01, 0x00, 0x01, 0x00, 0x02, 0x70, 0x30,"},
{"lineNum":"   53","line":"//! ];"},
{"lineNum":"   54","line":"//!"},
{"lineNum":"   55","line":"//! use wasmer_runtime::{"},
{"lineNum":"   56","line":"//!     instantiate,"},
{"lineNum":"   57","line":"//!     Value,"},
{"lineNum":"   58","line":"//!     imports,"},
{"lineNum":"   59","line":"//!     error,"},
{"lineNum":"   60","line":"//!     Func,"},
{"lineNum":"   61","line":"//! };"},
{"lineNum":"   62","line":"//!"},
{"lineNum":"   63","line":"//! fn main() -> error::Result<()> {"},
{"lineNum":"   64","line":"//!     // We\'re not importing anything, so make an empty import object."},
{"lineNum":"   65","line":"//!     let import_object = imports! {};"},
{"lineNum":"   66","line":"//!"},
{"lineNum":"   67","line":"//!     let mut instance = instantiate(WASM, &import_object)?;"},
{"lineNum":"   68","line":"//!"},
{"lineNum":"   69","line":"//!     let add_one: Func<i32, i32> = instance.func(\"add_one\")?;"},
{"lineNum":"   70","line":"//!"},
{"lineNum":"   71","line":"//!     let value = add_one.call(42)?;"},
{"lineNum":"   72","line":"//!"},
{"lineNum":"   73","line":"//!     assert_eq!(value, 43);"},
{"lineNum":"   74","line":"//!"},
{"lineNum":"   75","line":"//!     Ok(())"},
{"lineNum":"   76","line":"//! }"},
{"lineNum":"   77","line":"//! ```"},
{"lineNum":"   78","line":"//!"},
{"lineNum":"   79","line":"//! # Additional Notes:"},
{"lineNum":"   80","line":"//!"},
{"lineNum":"   81","line":"//! The `wasmer-runtime` is build to support compiler multiple backends."},
{"lineNum":"   82","line":"//! Currently, we support the [Cranelift] compiler with the [`wasmer-clif-backend`] crate."},
{"lineNum":"   83","line":"//!"},
{"lineNum":"   84","line":"//! You can specify the compiler you wish to use with the [`compile_with`] function."},
{"lineNum":"   85","line":"//!"},
{"lineNum":"   86","line":"//! [Cranelift]: https://github.com/CraneStation/cranelift"},
{"lineNum":"   87","line":"//! [`wasmer-clif-backend`]: https://crates.io/crates/wasmer-clif-backend"},
{"lineNum":"   88","line":"//! [`compile_with`]: fn.compile_with.html"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"pub use wasmer_runtime_core::backend::{Backend, Features};"},
{"lineNum":"   91","line":"pub use wasmer_runtime_core::codegen::{MiddlewareChain, StreamingCompiler};"},
{"lineNum":"   92","line":"pub use wasmer_runtime_core::export::Export;"},
{"lineNum":"   93","line":"pub use wasmer_runtime_core::global::Global;"},
{"lineNum":"   94","line":"pub use wasmer_runtime_core::import::{ImportObject, LikeNamespace};"},
{"lineNum":"   95","line":"pub use wasmer_runtime_core::instance::{DynFunc, Instance};"},
{"lineNum":"   96","line":"pub use wasmer_runtime_core::memory::ptr::{Array, Item, WasmPtr};"},
{"lineNum":"   97","line":"pub use wasmer_runtime_core::memory::Memory;"},
{"lineNum":"   98","line":"pub use wasmer_runtime_core::module::Module;"},
{"lineNum":"   99","line":"pub use wasmer_runtime_core::table::Table;"},
{"lineNum":"  100","line":"pub use wasmer_runtime_core::types::Value;"},
{"lineNum":"  101","line":"pub use wasmer_runtime_core::vm::Ctx;"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"pub use wasmer_runtime_core::Func;"},
{"lineNum":"  104","line":"pub use wasmer_runtime_core::{compile_with, validate};"},
{"lineNum":"  105","line":"pub use wasmer_runtime_core::{func, imports};"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"pub mod memory {"},
{"lineNum":"  108","line":"    //! The memory module contains the implementation data structures and helper functions used to"},
{"lineNum":"  109","line":"    //! manipulate and access wasm memory."},
{"lineNum":"  110","line":"    pub use wasmer_runtime_core::memory::{Atomically, Memory, MemoryView};"},
{"lineNum":"  111","line":"}"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"pub mod wasm {"},
{"lineNum":"  114","line":"    //! Various types exposed by the Wasmer Runtime."},
{"lineNum":"  115","line":"    pub use wasmer_runtime_core::global::Global;"},
{"lineNum":"  116","line":"    pub use wasmer_runtime_core::table::Table;"},
{"lineNum":"  117","line":"    pub use wasmer_runtime_core::types::{"},
{"lineNum":"  118","line":"        FuncSig, GlobalDescriptor, MemoryDescriptor, TableDescriptor, Type, Value,"},
{"lineNum":"  119","line":"    };"},
{"lineNum":"  120","line":"}"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"pub mod error {"},
{"lineNum":"  123","line":"    //! The error module contains the data structures and helper functions used to implement errors that"},
{"lineNum":"  124","line":"    //! are produced and returned from the wasmer runtime."},
{"lineNum":"  125","line":"    pub use wasmer_runtime_core::cache::Error as CacheError;"},
{"lineNum":"  126","line":"    pub use wasmer_runtime_core::error::*;"},
{"lineNum":"  127","line":"}"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"pub mod units {"},
{"lineNum":"  130","line":"    //! Various unit types."},
{"lineNum":"  131","line":"    pub use wasmer_runtime_core::units::{Bytes, Pages};"},
{"lineNum":"  132","line":"}"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"pub mod types {"},
{"lineNum":"  135","line":"    //! Various types."},
{"lineNum":"  136","line":"    pub use wasmer_runtime_core::types::*;"},
{"lineNum":"  137","line":"}"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"pub mod cache;"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"pub use wasmer_runtime_core::backend::{Compiler, CompilerConfig};"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"/// Compile WebAssembly binary code into a [`Module`]."},
{"lineNum":"  144","line":"/// This function is useful if it is necessary to"},
{"lineNum":"  145","line":"/// compile a module before it can be instantiated"},
{"lineNum":"  146","line":"/// (otherwise, the [`instantiate`] function should be used)."},
{"lineNum":"  147","line":"///"},
{"lineNum":"  148","line":"/// [`Module`]: struct.Module.html"},
{"lineNum":"  149","line":"/// [`instantiate`]: fn.instantiate.html"},
{"lineNum":"  150","line":"///"},
{"lineNum":"  151","line":"/// # Params:"},
{"lineNum":"  152","line":"/// * `wasm`: A `&[u8]` containing the"},
{"lineNum":"  153","line":"///   binary code of the wasm module you want to compile."},
{"lineNum":"  154","line":"/// # Errors:"},
{"lineNum":"  155","line":"/// If the operation fails, the function returns `Err(error::CompileError::...)`."},
{"lineNum":"  156","line":"pub fn compile(wasm: &[u8]) -> error::CompileResult<Module> {"},
{"lineNum":"  157","line":"    wasmer_runtime_core::compile_with(&wasm[..], &default_compiler())"},
{"lineNum":"  158","line":"}"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"/// The same as `compile` but takes a `CompilerConfig` for the purpose of"},
{"lineNum":"  161","line":"/// changing the compiler\'s behavior"},
{"lineNum":"  162","line":"pub fn compile_with_config("},
{"lineNum":"  163","line":"    wasm: &[u8],"},
{"lineNum":"  164","line":"    compiler_config: CompilerConfig,"},
{"lineNum":"  165","line":") -> error::CompileResult<Module> {"},
{"lineNum":"  166","line":"    wasmer_runtime_core::compile_with_config(&wasm[..], &default_compiler(), compiler_config)"},
{"lineNum":"  167","line":"}"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"/// The same as `compile_with_config` but takes a `Compiler` for the purpose of"},
{"lineNum":"  170","line":"/// changing the backend."},
{"lineNum":"  171","line":"pub fn compile_with_config_with("},
{"lineNum":"  172","line":"    wasm: &[u8],"},
{"lineNum":"  173","line":"    compiler_config: CompilerConfig,"},
{"lineNum":"  174","line":"    compiler: &dyn Compiler,"},
{"lineNum":"  175","line":") -> error::CompileResult<Module> {"},
{"lineNum":"  176","line":"    wasmer_runtime_core::compile_with_config(&wasm[..], compiler, compiler_config)"},
{"lineNum":"  177","line":"}"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"/// Compile and instantiate WebAssembly code without"},
{"lineNum":"  180","line":"/// creating a [`Module`]."},
{"lineNum":"  181","line":"///"},
{"lineNum":"  182","line":"/// [`Module`]: struct.Module.html"},
{"lineNum":"  183","line":"///"},
{"lineNum":"  184","line":"/// # Params:"},
{"lineNum":"  185","line":"/// * `wasm`: A `&[u8]` containing the"},
{"lineNum":"  186","line":"///   binary code of the wasm module you want to compile."},
{"lineNum":"  187","line":"/// * `import_object`: An object containing the values to be imported"},
{"lineNum":"  188","line":"///   into the newly-created Instance, such as functions or"},
{"lineNum":"  189","line":"///   Memory objects. There must be one matching property"},
{"lineNum":"  190","line":"///   for each declared import of the compiled module or else a"},
{"lineNum":"  191","line":"///   LinkError is thrown."},
{"lineNum":"  192","line":"/// # Errors:"},
{"lineNum":"  193","line":"/// If the operation fails, the function returns a"},
{"lineNum":"  194","line":"/// `error::CompileError`, `error::LinkError`, or"},
{"lineNum":"  195","line":"/// `error::RuntimeError` (all combined into an `error::Error`),"},
{"lineNum":"  196","line":"/// depending on the cause of the failure."},
{"lineNum":"  197","line":"pub fn instantiate(wasm: &[u8], import_object: &ImportObject) -> error::Result<Instance> {"},
{"lineNum":"  198","line":"    let module = compile(wasm)?;"},
{"lineNum":"  199","line":"    module.instantiate(import_object)"},
{"lineNum":"  200","line":"}"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"/// Get a single instance of the default compiler to use."},
{"lineNum":"  203","line":"///"},
{"lineNum":"  204","line":"/// The output of this function can be controlled by the mutually"},
{"lineNum":"  205","line":"/// exclusive `default-backend-llvm`, `default-backend-singlepass`,"},
{"lineNum":"  206","line":"/// and `default-backend-cranelift` feature flags."},
{"lineNum":"  207","line":"pub fn default_compiler() -> impl Compiler {"},
{"lineNum":"  208","line":"    #[cfg(any("},
{"lineNum":"  209","line":"        all("},
{"lineNum":"  210","line":"            feature = \"default-backend-llvm\","},
{"lineNum":"  211","line":"            not(feature = \"docs\"),"},
{"lineNum":"  212","line":"            any("},
{"lineNum":"  213","line":"                feature = \"default-backend-cranelift\","},
{"lineNum":"  214","line":"                feature = \"default-backend-singlepass\""},
{"lineNum":"  215","line":"            )"},
{"lineNum":"  216","line":"        ),"},
{"lineNum":"  217","line":"        all("},
{"lineNum":"  218","line":"            not(feature = \"docs\"),"},
{"lineNum":"  219","line":"            feature = \"default-backend-cranelift\","},
{"lineNum":"  220","line":"            feature = \"default-backend-singlepass\""},
{"lineNum":"  221","line":"        )"},
{"lineNum":"  222","line":"    ))]"},
{"lineNum":"  223","line":"    compile_error!("},
{"lineNum":"  224","line":"        \"The `default-backend-X` features are mutually exclusive.  Please choose just one\""},
{"lineNum":"  225","line":"    );"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    #[cfg(all(feature = \"default-backend-llvm\", not(feature = \"docs\")))]"},
{"lineNum":"  228","line":"    use wasmer_llvm_backend::LLVMCompiler as DefaultCompiler;"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"    #[cfg(all(feature = \"default-backend-singlepass\", not(feature = \"docs\")))]"},
{"lineNum":"  231","line":"    use wasmer_singlepass_backend::SinglePassCompiler as DefaultCompiler;"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    #[cfg(any(feature = \"default-backend-cranelift\", feature = \"docs\"))]"},
{"lineNum":"  234","line":"    use wasmer_clif_backend::CraneliftCompiler as DefaultCompiler;"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"    DefaultCompiler::new()"},
{"lineNum":"  237","line":"}"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"/// Get the `Compiler` as a trait object for the given `Backend`."},
{"lineNum":"  240","line":"/// Returns `Option` because support for the requested `Compiler` may"},
{"lineNum":"  241","line":"/// not be enabled by feature flags."},
{"lineNum":"  242","line":"///"},
{"lineNum":"  243","line":"/// To get a list of the enabled backends as strings, call `Backend::variants()`."},
{"lineNum":"  244","line":"pub fn compiler_for_backend(backend: Backend) -> Option<Box<dyn Compiler>> {"},
{"lineNum":"  245","line":"    match backend {"},
{"lineNum":"  246","line":"        #[cfg(feature = \"cranelift\")]"},
{"lineNum":"  247","line":"        Backend::Cranelift => Some(Box::new(wasmer_clif_backend::CraneliftCompiler::new())),"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"        #[cfg(feature = \"singlepass\")]"},
{"lineNum":"  250","line":"        Backend::Singlepass => Some(Box::new("},
{"lineNum":"  251","line":"            wasmer_singlepass_backend::SinglePassCompiler::new(),"},
{"lineNum":"  252","line":"        )),"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"        #[cfg(feature = \"llvm\")]"},
{"lineNum":"  255","line":"        Backend::LLVM => Some(Box::new(wasmer_llvm_backend::LLVMCompiler::new())),"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"        _ => None,"},
{"lineNum":"  258","line":"    }"},
{"lineNum":"  259","line":"}"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"/// The current version of this crate."},
{"lineNum":"  262","line":"pub const VERSION: &str = env!(\"CARGO_PKG_VERSION\");"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "compile_debug", "date" : "2019-11-28 11:37:30", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
