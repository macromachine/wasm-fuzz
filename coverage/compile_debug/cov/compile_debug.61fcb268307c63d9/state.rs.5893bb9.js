var data = {lines:[
{"lineNum":"    1","line":"//! The state module is used to track state of a running web assembly instances so that"},
{"lineNum":"    2","line":"//! state could read or updated at runtime. Use cases include generating stack traces, switching"},
{"lineNum":"    3","line":"//! generated code from one tier to another, or serializing state of a running instace."},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"use crate::backend::Backend;"},
{"lineNum":"    6","line":"use std::collections::BTreeMap;"},
{"lineNum":"    7","line":"use std::ops::Bound::{Included, Unbounded};"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"/// An index to a register"},
{"lineNum":"   10","line":"#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   11","line":"pub struct RegisterIndex(pub usize);"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/// A kind of wasm or constant value"},
{"lineNum":"   14","line":"#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   15","line":"pub enum WasmAbstractValue {"},
{"lineNum":"   16","line":"    /// A wasm runtime value"},
{"lineNum":"   17","line":"    Runtime,"},
{"lineNum":"   18","line":"    /// A wasm constant value"},
{"lineNum":"   19","line":"    Const(u64),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   20","line":"}"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"/// A container for the state of a running wasm instance."},
{"lineNum":"   23","line":"#[derive(Clone, Debug)]","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   24","line":"pub struct MachineState {"},
{"lineNum":"   25","line":"    /// Stack values."},
{"lineNum":"   26","line":"    pub stack_values: Vec<MachineValue>,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   27","line":"    /// Register values."},
{"lineNum":"   28","line":"    pub register_values: Vec<MachineValue>,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   29","line":"    /// Previous frame."},
{"lineNum":"   30","line":"    pub prev_frame: BTreeMap<usize, MachineValue>,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   31","line":"    /// Wasm stack."},
{"lineNum":"   32","line":"    pub wasm_stack: Vec<WasmAbstractValue>,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   33","line":"    /// Private depth of the wasm stack."},
{"lineNum":"   34","line":"    pub wasm_stack_private_depth: usize,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   35","line":"    /// Wasm instruction offset."},
{"lineNum":"   36","line":"    pub wasm_inst_offset: usize,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   37","line":"}"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"/// A diff of two `MachineState`s."},
{"lineNum":"   40","line":"#[derive(Clone, Debug, Default)]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   41","line":"pub struct MachineStateDiff {"},
{"lineNum":"   42","line":"    /// Last."},
{"lineNum":"   43","line":"    pub last: Option<usize>,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   44","line":"    /// Stack push."},
{"lineNum":"   45","line":"    pub stack_push: Vec<MachineValue>,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   46","line":"    /// Stack pop."},
{"lineNum":"   47","line":"    pub stack_pop: usize,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    /// Register diff."},
{"lineNum":"   50","line":"    pub reg_diff: Vec<(RegisterIndex, MachineValue)>,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    /// Previous frame diff."},
{"lineNum":"   53","line":"    pub prev_frame_diff: BTreeMap<usize, Option<MachineValue>>, // None for removal","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"    /// Wasm stack push."},
{"lineNum":"   56","line":"    pub wasm_stack_push: Vec<WasmAbstractValue>,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   57","line":"    /// Wasm stack pop."},
{"lineNum":"   58","line":"    pub wasm_stack_pop: usize,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   59","line":"    /// Private depth of the wasm stack."},
{"lineNum":"   60","line":"    pub wasm_stack_private_depth: usize, // absolute value; not a diff.","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   61","line":"    /// Wasm instruction offset."},
{"lineNum":"   62","line":"    pub wasm_inst_offset: usize, // absolute value; not a diff.","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   63","line":"}"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"/// A kind of machine value."},
{"lineNum":"   66","line":"#[derive(Clone, Debug, Eq, PartialEq, Hash)]","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"   67","line":"pub enum MachineValue {"},
{"lineNum":"   68","line":"    /// Undefined."},
{"lineNum":"   69","line":"    Undefined,"},
{"lineNum":"   70","line":"    /// Vmctx."},
{"lineNum":"   71","line":"    Vmctx,"},
{"lineNum":"   72","line":"    /// Vmctx Deref."},
{"lineNum":"   73","line":"    VmctxDeref(Vec<usize>),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   74","line":"    /// Preserve Register."},
{"lineNum":"   75","line":"    PreserveRegister(RegisterIndex),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   76","line":"    /// Copy Stack BP Relative."},
{"lineNum":"   77","line":"    CopyStackBPRelative(i32), // relative to Base Pointer, in byte offset","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   78","line":"    /// Explicit Shadow."},
{"lineNum":"   79","line":"    ExplicitShadow, // indicates that all values above this are above the shadow region"},
{"lineNum":"   80","line":"    /// Wasm Stack."},
{"lineNum":"   81","line":"    WasmStack(usize),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   82","line":"    /// Wasm Local."},
{"lineNum":"   83","line":"    WasmLocal(usize),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   84","line":"    /// Two Halves."},
{"lineNum":"   85","line":"    TwoHalves(Box<(MachineValue, MachineValue)>), // 32-bit values. TODO: optimize: add another type for inner \"half\" value to avoid boxing?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   86","line":"}"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"/// A map of function states."},
{"lineNum":"   89","line":"#[derive(Clone, Debug)]","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   90","line":"pub struct FunctionStateMap {"},
{"lineNum":"   91","line":"    /// Initial."},
{"lineNum":"   92","line":"    pub initial: MachineState,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   93","line":"    /// Local Function Id."},
{"lineNum":"   94","line":"    pub local_function_id: usize,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   95","line":"    /// Locals."},
{"lineNum":"   96","line":"    pub locals: Vec<WasmAbstractValue>,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   97","line":"    /// Shadow size."},
{"lineNum":"   98","line":"    pub shadow_size: usize, // for single-pass backend, 32 bytes on x86-64","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   99","line":"    /// Diffs."},
{"lineNum":"  100","line":"    pub diffs: Vec<MachineStateDiff>,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  101","line":"    /// Wasm Function Header target offset."},
{"lineNum":"  102","line":"    pub wasm_function_header_target_offset: Option<SuspendOffset>,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  103","line":"    /// Wasm offset to target offset"},
{"lineNum":"  104","line":"    pub wasm_offset_to_target_offset: BTreeMap<usize, SuspendOffset>,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  105","line":"    /// Loop offsets."},
{"lineNum":"  106","line":"    pub loop_offsets: BTreeMap<usize, OffsetInfo>, /* suspend_offset -> info */","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  107","line":"    /// Call offsets."},
{"lineNum":"  108","line":"    pub call_offsets: BTreeMap<usize, OffsetInfo>, /* suspend_offset -> info */","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  109","line":"    /// Trappable offsets."},
{"lineNum":"  110","line":"    pub trappable_offsets: BTreeMap<usize, OffsetInfo>, /* suspend_offset -> info */","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  111","line":"}"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"/// A kind of suspend offset."},
{"lineNum":"  114","line":"#[derive(Clone, Copy, Debug)]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  115","line":"pub enum SuspendOffset {"},
{"lineNum":"  116","line":"    /// A loop."},
{"lineNum":"  117","line":"    Loop(usize),"},
{"lineNum":"  118","line":"    /// A call."},
{"lineNum":"  119","line":"    Call(usize),"},
{"lineNum":"  120","line":"    /// A trappable."},
{"lineNum":"  121","line":"    Trappable(usize),"},
{"lineNum":"  122","line":"}"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"/// Info for an offset."},
{"lineNum":"  125","line":"#[derive(Clone, Debug)]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  126","line":"pub struct OffsetInfo {"},
{"lineNum":"  127","line":"    /// End offset."},
{"lineNum":"  128","line":"    pub end_offset: usize, // excluded bound","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  129","line":"    /// Diff Id."},
{"lineNum":"  130","line":"    pub diff_id: usize,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  131","line":"    /// Activate offset."},
{"lineNum":"  132","line":"    pub activate_offset: usize,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  133","line":"}"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"/// A map of module state."},
{"lineNum":"  136","line":"#[derive(Clone, Debug)]","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  137","line":"pub struct ModuleStateMap {"},
{"lineNum":"  138","line":"    /// Local functions."},
{"lineNum":"  139","line":"    pub local_functions: BTreeMap<usize, FunctionStateMap>,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  140","line":"    /// Total size."},
{"lineNum":"  141","line":"    pub total_size: usize,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  142","line":"}"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"/// State dump of a wasm function."},
{"lineNum":"  145","line":"#[derive(Clone, Debug, Serialize, Deserialize)]"},
{"lineNum":"  146","line":"pub struct WasmFunctionStateDump {"},
{"lineNum":"  147","line":"    /// Local function id."},
{"lineNum":"  148","line":"    pub local_function_id: usize,"},
{"lineNum":"  149","line":"    /// Wasm instruction offset."},
{"lineNum":"  150","line":"    pub wasm_inst_offset: usize,"},
{"lineNum":"  151","line":"    /// Stack."},
{"lineNum":"  152","line":"    pub stack: Vec<Option<u64>>,"},
{"lineNum":"  153","line":"    /// Locals."},
{"lineNum":"  154","line":"    pub locals: Vec<Option<u64>>,"},
{"lineNum":"  155","line":"}"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"/// An image of the execution state."},
{"lineNum":"  158","line":"#[derive(Clone, Debug, Serialize, Deserialize)]"},
{"lineNum":"  159","line":"pub struct ExecutionStateImage {"},
{"lineNum":"  160","line":"    /// Frames."},
{"lineNum":"  161","line":"    pub frames: Vec<WasmFunctionStateDump>,"},
{"lineNum":"  162","line":"}"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"/// Represents an image of an `Instance` including its memory, globals, and execution state."},
{"lineNum":"  165","line":"#[derive(Debug, Clone, Serialize, Deserialize)]"},
{"lineNum":"  166","line":"pub struct InstanceImage {"},
{"lineNum":"  167","line":"    /// Memory for this `InstanceImage`"},
{"lineNum":"  168","line":"    pub memory: Option<Vec<u8>>,"},
{"lineNum":"  169","line":"    /// Stored globals for this `InstanceImage`"},
{"lineNum":"  170","line":"    pub globals: Vec<u128>,"},
{"lineNum":"  171","line":"    /// `ExecutionStateImage` for this `InstanceImage`"},
{"lineNum":"  172","line":"    pub execution_state: ExecutionStateImage,"},
{"lineNum":"  173","line":"}"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"/// A `CodeVersion` is a container for a unit of generated code for a module."},
{"lineNum":"  176","line":"#[derive(Debug, Clone)]"},
{"lineNum":"  177","line":"pub struct CodeVersion {"},
{"lineNum":"  178","line":"    /// Indicates if this code version is the baseline version."},
{"lineNum":"  179","line":"    pub baseline: bool,"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    /// `ModuleStateMap` for this code version."},
{"lineNum":"  182","line":"    pub msm: ModuleStateMap,"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"    /// A pointer to the machine code for this module."},
{"lineNum":"  185","line":"    pub base: usize,"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    /// The backend used to compile this module."},
{"lineNum":"  188","line":"    pub backend: Backend,"},
{"lineNum":"  189","line":"}"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"impl ModuleStateMap {"},
{"lineNum":"  192","line":"    /// Looks up an ip from self using the given ip, base, and offset table provider."},
{"lineNum":"  193","line":"    pub fn lookup_ip<F: FnOnce(&FunctionStateMap) -> &BTreeMap<usize, OffsetInfo>>("},
{"lineNum":"  194","line":"        &self,"},
{"lineNum":"  195","line":"        ip: usize,"},
{"lineNum":"  196","line":"        base: usize,"},
{"lineNum":"  197","line":"        offset_table_provider: F,"},
{"lineNum":"  198","line":"    ) -> Option<(&FunctionStateMap, MachineState)> {"},
{"lineNum":"  199","line":"        if ip < base || ip - base >= self.total_size {"},
{"lineNum":"  200","line":"            None"},
{"lineNum":"  201","line":"        } else {"},
{"lineNum":"  202","line":"            let (_, fsm) = self"},
{"lineNum":"  203","line":"                .local_functions"},
{"lineNum":"  204","line":"                .range((Unbounded, Included(&(ip - base))))"},
{"lineNum":"  205","line":"                .last()"},
{"lineNum":"  206","line":"                .unwrap();"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"            match offset_table_provider(fsm)"},
{"lineNum":"  209","line":"                .range((Unbounded, Included(&(ip - base))))"},
{"lineNum":"  210","line":"                .last()"},
{"lineNum":"  211","line":"            {"},
{"lineNum":"  212","line":"                Some((_, x)) => {"},
{"lineNum":"  213","line":"                    if ip - base >= x.end_offset {"},
{"lineNum":"  214","line":"                        None"},
{"lineNum":"  215","line":"                    } else if x.diff_id < fsm.diffs.len() {"},
{"lineNum":"  216","line":"                        Some((fsm, fsm.diffs[x.diff_id].build_state(fsm)))"},
{"lineNum":"  217","line":"                    } else {"},
{"lineNum":"  218","line":"                        None"},
{"lineNum":"  219","line":"                    }"},
{"lineNum":"  220","line":"                }"},
{"lineNum":"  221","line":"                None => None,"},
{"lineNum":"  222","line":"            }"},
{"lineNum":"  223","line":"        }"},
{"lineNum":"  224","line":"    }"},
{"lineNum":"  225","line":"    /// Looks up a call ip from self using the given ip and base values."},
{"lineNum":"  226","line":"    pub fn lookup_call_ip("},
{"lineNum":"  227","line":"        &self,"},
{"lineNum":"  228","line":"        ip: usize,"},
{"lineNum":"  229","line":"        base: usize,"},
{"lineNum":"  230","line":"    ) -> Option<(&FunctionStateMap, MachineState)> {"},
{"lineNum":"  231","line":"        self.lookup_ip(ip, base, |fsm| &fsm.call_offsets)"},
{"lineNum":"  232","line":"    }"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"    /// Looks up a trappable ip from self using the given ip and base values."},
{"lineNum":"  235","line":"    pub fn lookup_trappable_ip("},
{"lineNum":"  236","line":"        &self,"},
{"lineNum":"  237","line":"        ip: usize,"},
{"lineNum":"  238","line":"        base: usize,"},
{"lineNum":"  239","line":"    ) -> Option<(&FunctionStateMap, MachineState)> {"},
{"lineNum":"  240","line":"        self.lookup_ip(ip, base, |fsm| &fsm.trappable_offsets)"},
{"lineNum":"  241","line":"    }"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"    /// Looks up a loop ip from self using the given ip and base values."},
{"lineNum":"  244","line":"    pub fn lookup_loop_ip("},
{"lineNum":"  245","line":"        &self,"},
{"lineNum":"  246","line":"        ip: usize,"},
{"lineNum":"  247","line":"        base: usize,"},
{"lineNum":"  248","line":"    ) -> Option<(&FunctionStateMap, MachineState)> {"},
{"lineNum":"  249","line":"        self.lookup_ip(ip, base, |fsm| &fsm.loop_offsets)"},
{"lineNum":"  250","line":"    }"},
{"lineNum":"  251","line":"}"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"impl FunctionStateMap {"},
{"lineNum":"  254","line":"    /// Creates a new `FunctionStateMap` with the given parameters."},
{"lineNum":"  255","line":"    pub fn new(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  256","line":"        initial: MachineState,"},
{"lineNum":"  257","line":"        local_function_id: usize,"},
{"lineNum":"  258","line":"        shadow_size: usize,"},
{"lineNum":"  259","line":"        locals: Vec<WasmAbstractValue>,"},
{"lineNum":"  260","line":"    ) -> FunctionStateMap {"},
{"lineNum":"  261","line":"        FunctionStateMap {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":"            initial,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  263","line":"            local_function_id,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":"            shadow_size,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":"            locals,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  266","line":"            diffs: vec![],","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  267","line":"            wasm_function_header_target_offset: None,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  268","line":"            wasm_offset_to_target_offset: BTreeMap::new(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":"            loop_offsets: BTreeMap::new(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  270","line":"            call_offsets: BTreeMap::new(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  271","line":"            trappable_offsets: BTreeMap::new(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  272","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  273","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  274","line":"}"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"impl MachineState {"},
{"lineNum":"  277","line":"    /// Creates a `MachineStateDiff` from self and the given `&MachineState`."},
{"lineNum":"  278","line":"    pub fn diff(&self, old: &MachineState) -> MachineStateDiff {"},
{"lineNum":"  279","line":"        let first_diff_stack_depth: usize = self"},
{"lineNum":"  280","line":"            .stack_values"},
{"lineNum":"  281","line":"            .iter()"},
{"lineNum":"  282","line":"            .zip(old.stack_values.iter())"},
{"lineNum":"  283","line":"            .enumerate()"},
{"lineNum":"  284","line":"            .find(|&(_, (a, b))| a != b)"},
{"lineNum":"  285","line":"            .map(|x| x.0)"},
{"lineNum":"  286","line":"            .unwrap_or(old.stack_values.len().min(self.stack_values.len()));"},
{"lineNum":"  287","line":"        assert_eq!(self.register_values.len(), old.register_values.len());"},
{"lineNum":"  288","line":"        let reg_diff: Vec<_> = self"},
{"lineNum":"  289","line":"            .register_values"},
{"lineNum":"  290","line":"            .iter()"},
{"lineNum":"  291","line":"            .zip(old.register_values.iter())"},
{"lineNum":"  292","line":"            .enumerate()"},
{"lineNum":"  293","line":"            .filter(|&(_, (a, b))| a != b)"},
{"lineNum":"  294","line":"            .map(|(i, (a, _))| (RegisterIndex(i), a.clone()))"},
{"lineNum":"  295","line":"            .collect();"},
{"lineNum":"  296","line":"        let prev_frame_diff: BTreeMap<usize, Option<MachineValue>> = self"},
{"lineNum":"  297","line":"            .prev_frame"},
{"lineNum":"  298","line":"            .iter()"},
{"lineNum":"  299","line":"            .filter(|(k, v)| {"},
{"lineNum":"  300","line":"                if let Some(ref old_v) = old.prev_frame.get(k) {"},
{"lineNum":"  301","line":"                    v != old_v"},
{"lineNum":"  302","line":"                } else {"},
{"lineNum":"  303","line":"                    true"},
{"lineNum":"  304","line":"                }"},
{"lineNum":"  305","line":"            })"},
{"lineNum":"  306","line":"            .map(|(&k, v)| (k, Some(v.clone())))"},
{"lineNum":"  307","line":"            .chain("},
{"lineNum":"  308","line":"                old.prev_frame"},
{"lineNum":"  309","line":"                    .iter()"},
{"lineNum":"  310","line":"                    .filter(|(k, _)| self.prev_frame.get(k).is_none())"},
{"lineNum":"  311","line":"                    .map(|(&k, _)| (k, None)),"},
{"lineNum":"  312","line":"            )"},
{"lineNum":"  313","line":"            .collect();"},
{"lineNum":"  314","line":"        let first_diff_wasm_stack_depth: usize = self"},
{"lineNum":"  315","line":"            .wasm_stack"},
{"lineNum":"  316","line":"            .iter()"},
{"lineNum":"  317","line":"            .zip(old.wasm_stack.iter())"},
{"lineNum":"  318","line":"            .enumerate()"},
{"lineNum":"  319","line":"            .find(|&(_, (a, b))| a != b)"},
{"lineNum":"  320","line":"            .map(|x| x.0)"},
{"lineNum":"  321","line":"            .unwrap_or(old.wasm_stack.len().min(self.wasm_stack.len()));"},
{"lineNum":"  322","line":"        MachineStateDiff {"},
{"lineNum":"  323","line":"            last: None,"},
{"lineNum":"  324","line":"            stack_push: self.stack_values[first_diff_stack_depth..].to_vec(),"},
{"lineNum":"  325","line":"            stack_pop: old.stack_values.len() - first_diff_stack_depth,"},
{"lineNum":"  326","line":"            reg_diff,"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"            prev_frame_diff,"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"            wasm_stack_push: self.wasm_stack[first_diff_wasm_stack_depth..].to_vec(),"},
{"lineNum":"  331","line":"            wasm_stack_pop: old.wasm_stack.len() - first_diff_wasm_stack_depth,"},
{"lineNum":"  332","line":"            wasm_stack_private_depth: self.wasm_stack_private_depth,"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"            wasm_inst_offset: self.wasm_inst_offset,"},
{"lineNum":"  335","line":"        }"},
{"lineNum":"  336","line":"    }"},
{"lineNum":"  337","line":"}"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"impl MachineStateDiff {"},
{"lineNum":"  340","line":"    /// Creates a `MachineState` from the given `&FunctionStateMap`."},
{"lineNum":"  341","line":"    pub fn build_state(&self, m: &FunctionStateMap) -> MachineState {"},
{"lineNum":"  342","line":"        let mut chain: Vec<&MachineStateDiff> = vec![];"},
{"lineNum":"  343","line":"        chain.push(self);"},
{"lineNum":"  344","line":"        let mut current = self.last;"},
{"lineNum":"  345","line":"        while let Some(x) = current {"},
{"lineNum":"  346","line":"            let that = &m.diffs[x];"},
{"lineNum":"  347","line":"            current = that.last;"},
{"lineNum":"  348","line":"            chain.push(that);"},
{"lineNum":"  349","line":"        }"},
{"lineNum":"  350","line":"        chain.reverse();"},
{"lineNum":"  351","line":"        let mut state = m.initial.clone();"},
{"lineNum":"  352","line":"        for x in chain {"},
{"lineNum":"  353","line":"            for _ in 0..x.stack_pop {"},
{"lineNum":"  354","line":"                state.stack_values.pop().unwrap();"},
{"lineNum":"  355","line":"            }"},
{"lineNum":"  356","line":"            for v in &x.stack_push {"},
{"lineNum":"  357","line":"                state.stack_values.push(v.clone());"},
{"lineNum":"  358","line":"            }"},
{"lineNum":"  359","line":"            for &(index, ref v) in &x.reg_diff {"},
{"lineNum":"  360","line":"                state.register_values[index.0] = v.clone();"},
{"lineNum":"  361","line":"            }"},
{"lineNum":"  362","line":"            for (index, ref v) in &x.prev_frame_diff {"},
{"lineNum":"  363","line":"                if let Some(ref x) = v {"},
{"lineNum":"  364","line":"                    state.prev_frame.insert(*index, x.clone());"},
{"lineNum":"  365","line":"                } else {"},
{"lineNum":"  366","line":"                    state.prev_frame.remove(index).unwrap();"},
{"lineNum":"  367","line":"                }"},
{"lineNum":"  368","line":"            }"},
{"lineNum":"  369","line":"            for _ in 0..x.wasm_stack_pop {"},
{"lineNum":"  370","line":"                state.wasm_stack.pop().unwrap();"},
{"lineNum":"  371","line":"            }"},
{"lineNum":"  372","line":"            for v in &x.wasm_stack_push {"},
{"lineNum":"  373","line":"                state.wasm_stack.push(*v);"},
{"lineNum":"  374","line":"            }"},
{"lineNum":"  375","line":"        }"},
{"lineNum":"  376","line":"        state.wasm_stack_private_depth = self.wasm_stack_private_depth;"},
{"lineNum":"  377","line":"        state.wasm_inst_offset = self.wasm_inst_offset;"},
{"lineNum":"  378","line":"        state"},
{"lineNum":"  379","line":"    }"},
{"lineNum":"  380","line":"}"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"impl ExecutionStateImage {"},
{"lineNum":"  383","line":"    /// Prints a backtrace if the `WASMER_BACKTRACE` environment variable is 1."},
{"lineNum":"  384","line":"    pub fn print_backtrace_if_needed(&self) {"},
{"lineNum":"  385","line":"        use std::env;"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"        if let Ok(x) = env::var(\"WASMER_BACKTRACE\") {"},
{"lineNum":"  388","line":"            if x == \"1\" {"},
{"lineNum":"  389","line":"                eprintln!(\"{}\", self.output());"},
{"lineNum":"  390","line":"                return;"},
{"lineNum":"  391","line":"            }"},
{"lineNum":"  392","line":"        }"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"        eprintln!(\"Run with `WASMER_BACKTRACE=1` environment variable to display a backtrace.\");"},
{"lineNum":"  395","line":"    }"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"    /// Converts self into a `String`, used for display purposes."},
{"lineNum":"  398","line":"    pub fn output(&self) -> String {"},
{"lineNum":"  399","line":"        fn join_strings(x: impl Iterator<Item = String>, sep: &str) -> String {"},
{"lineNum":"  400","line":"            let mut ret = String::new();"},
{"lineNum":"  401","line":"            let mut first = true;"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"            for s in x {"},
{"lineNum":"  404","line":"                if first {"},
{"lineNum":"  405","line":"                    first = false;"},
{"lineNum":"  406","line":"                } else {"},
{"lineNum":"  407","line":"                    ret += sep;"},
{"lineNum":"  408","line":"                }"},
{"lineNum":"  409","line":"                ret += &s;"},
{"lineNum":"  410","line":"            }"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"            ret"},
{"lineNum":"  413","line":"        }"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"        fn format_optional_u64_sequence(x: &[Option<u64>]) -> String {"},
{"lineNum":"  416","line":"            if x.len() == 0 {"},
{"lineNum":"  417","line":"                \"(empty)\".into()"},
{"lineNum":"  418","line":"            } else {"},
{"lineNum":"  419","line":"                join_strings("},
{"lineNum":"  420","line":"                    x.iter().enumerate().map(|(i, x)| {"},
{"lineNum":"  421","line":"                        format!("},
{"lineNum":"  422","line":"                            \"[{}] = {}\","},
{"lineNum":"  423","line":"                            i,"},
{"lineNum":"  424","line":"                            x.map(|x| format!(\"{}\", x))"},
{"lineNum":"  425","line":"                                .unwrap_or_else(|| \"?\".to_string())"},
{"lineNum":"  426","line":"                        )"},
{"lineNum":"  427","line":"                    }),"},
{"lineNum":"  428","line":"                    \", \","},
{"lineNum":"  429","line":"                )"},
{"lineNum":"  430","line":"            }"},
{"lineNum":"  431","line":"        }"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"        let mut ret = String::new();"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"        if self.frames.len() == 0 {"},
{"lineNum":"  436","line":"            ret += &\"Unknown fault address, cannot read stack.\";"},
{"lineNum":"  437","line":"            ret += \"\\n\";"},
{"lineNum":"  438","line":"        } else {"},
{"lineNum":"  439","line":"            ret += &\"Backtrace:\";"},
{"lineNum":"  440","line":"            ret += \"\\n\";"},
{"lineNum":"  441","line":"            for (i, f) in self.frames.iter().enumerate() {"},
{"lineNum":"  442","line":"                ret += &format!(\"* Frame {} @ Local function {}\", i, f.local_function_id);"},
{"lineNum":"  443","line":"                ret += \"\\n\";"},
{"lineNum":"  444","line":"                ret += &format!(\"  {} {}\\n\", \"Offset:\", format!(\"{}\", f.wasm_inst_offset),);"},
{"lineNum":"  445","line":"                ret += &format!("},
{"lineNum":"  446","line":"                    \"  {} {}\\n\","},
{"lineNum":"  447","line":"                    \"Locals:\","},
{"lineNum":"  448","line":"                    format_optional_u64_sequence(&f.locals)"},
{"lineNum":"  449","line":"                );"},
{"lineNum":"  450","line":"                ret += &format!("},
{"lineNum":"  451","line":"                    \"  {} {}\\n\\n\","},
{"lineNum":"  452","line":"                    \"Stack:\","},
{"lineNum":"  453","line":"                    format_optional_u64_sequence(&f.stack)"},
{"lineNum":"  454","line":"                );"},
{"lineNum":"  455","line":"            }"},
{"lineNum":"  456","line":"        }"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"        ret"},
{"lineNum":"  459","line":"    }"},
{"lineNum":"  460","line":"}"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"impl InstanceImage {"},
{"lineNum":"  463","line":"    /// Converts a slice of bytes into an `Option<InstanceImage>`"},
{"lineNum":"  464","line":"    pub fn from_bytes(input: &[u8]) -> Option<InstanceImage> {"},
{"lineNum":"  465","line":"        use bincode::deserialize;"},
{"lineNum":"  466","line":"        match deserialize(input) {"},
{"lineNum":"  467","line":"            Ok(x) => Some(x),"},
{"lineNum":"  468","line":"            Err(_) => None,"},
{"lineNum":"  469","line":"        }"},
{"lineNum":"  470","line":"    }"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"    /// Converts self into a vector of bytes."},
{"lineNum":"  473","line":"    pub fn to_bytes(&self) -> Vec<u8> {"},
{"lineNum":"  474","line":"        use bincode::serialize;"},
{"lineNum":"  475","line":"        serialize(self).unwrap()"},
{"lineNum":"  476","line":"    }"},
{"lineNum":"  477","line":"}"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"/// Declarations for x86-64 registers."},
{"lineNum":"  480","line":"#[cfg(unix)]"},
{"lineNum":"  481","line":"pub mod x64_decl {"},
{"lineNum":"  482","line":"    use super::*;"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"    /// General-purpose registers."},
{"lineNum":"  485","line":"    #[repr(u8)]"},
{"lineNum":"  486","line":"    #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  487","line":"    pub enum GPR {"},
{"lineNum":"  488","line":"        /// RAX register"},
{"lineNum":"  489","line":"        RAX,"},
{"lineNum":"  490","line":"        /// RCX register"},
{"lineNum":"  491","line":"        RCX,"},
{"lineNum":"  492","line":"        /// RDX register"},
{"lineNum":"  493","line":"        RDX,"},
{"lineNum":"  494","line":"        /// RBX register"},
{"lineNum":"  495","line":"        RBX,"},
{"lineNum":"  496","line":"        /// RSP register"},
{"lineNum":"  497","line":"        RSP,"},
{"lineNum":"  498","line":"        /// RBP register"},
{"lineNum":"  499","line":"        RBP,"},
{"lineNum":"  500","line":"        /// RSI register"},
{"lineNum":"  501","line":"        RSI,"},
{"lineNum":"  502","line":"        /// RDI register"},
{"lineNum":"  503","line":"        RDI,"},
{"lineNum":"  504","line":"        /// R8 register"},
{"lineNum":"  505","line":"        R8,"},
{"lineNum":"  506","line":"        /// R9 register"},
{"lineNum":"  507","line":"        R9,"},
{"lineNum":"  508","line":"        /// R10 register"},
{"lineNum":"  509","line":"        R10,"},
{"lineNum":"  510","line":"        /// R11 register"},
{"lineNum":"  511","line":"        R11,"},
{"lineNum":"  512","line":"        /// R12 register"},
{"lineNum":"  513","line":"        R12,"},
{"lineNum":"  514","line":"        /// R13 register"},
{"lineNum":"  515","line":"        R13,"},
{"lineNum":"  516","line":"        /// R14 register"},
{"lineNum":"  517","line":"        R14,"},
{"lineNum":"  518","line":"        /// R15 register"},
{"lineNum":"  519","line":"        R15,"},
{"lineNum":"  520","line":"    }"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"    /// XMM registers."},
{"lineNum":"  523","line":"    #[repr(u8)]"},
{"lineNum":"  524","line":"    #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  525","line":"    pub enum XMM {"},
{"lineNum":"  526","line":"        /// XMM register 0"},
{"lineNum":"  527","line":"        XMM0,"},
{"lineNum":"  528","line":"        /// XMM register 1"},
{"lineNum":"  529","line":"        XMM1,"},
{"lineNum":"  530","line":"        /// XMM register 2"},
{"lineNum":"  531","line":"        XMM2,"},
{"lineNum":"  532","line":"        /// XMM register 3"},
{"lineNum":"  533","line":"        XMM3,"},
{"lineNum":"  534","line":"        /// XMM register 4"},
{"lineNum":"  535","line":"        XMM4,"},
{"lineNum":"  536","line":"        /// XMM register 5"},
{"lineNum":"  537","line":"        XMM5,"},
{"lineNum":"  538","line":"        /// XMM register 6"},
{"lineNum":"  539","line":"        XMM6,"},
{"lineNum":"  540","line":"        /// XMM register 7"},
{"lineNum":"  541","line":"        XMM7,"},
{"lineNum":"  542","line":"        /// XMM register 8"},
{"lineNum":"  543","line":"        XMM8,"},
{"lineNum":"  544","line":"        /// XMM register 9"},
{"lineNum":"  545","line":"        XMM9,"},
{"lineNum":"  546","line":"        /// XMM register 10"},
{"lineNum":"  547","line":"        XMM10,"},
{"lineNum":"  548","line":"        /// XMM register 11"},
{"lineNum":"  549","line":"        XMM11,"},
{"lineNum":"  550","line":"        /// XMM register 12"},
{"lineNum":"  551","line":"        XMM12,"},
{"lineNum":"  552","line":"        /// XMM register 13"},
{"lineNum":"  553","line":"        XMM13,"},
{"lineNum":"  554","line":"        /// XMM register 14"},
{"lineNum":"  555","line":"        XMM14,"},
{"lineNum":"  556","line":"        /// XMM register 15"},
{"lineNum":"  557","line":"        XMM15,"},
{"lineNum":"  558","line":"    }"},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"    /// A machine register under the x86-64 architecture."},
{"lineNum":"  561","line":"    #[derive(Copy, Clone, Debug, Eq, PartialEq)]","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  562","line":"    pub enum X64Register {"},
{"lineNum":"  563","line":"        /// General-purpose registers."},
{"lineNum":"  564","line":"        GPR(GPR),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  565","line":"        /// XMM (floating point/SIMD) registers."},
{"lineNum":"  566","line":"        XMM(XMM),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  567","line":"    }"},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"    impl X64Register {"},
{"lineNum":"  570","line":"        /// Returns the index of the register."},
{"lineNum":"  571","line":"        pub fn to_index(&self) -> RegisterIndex {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  572","line":"            match *self {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  573","line":"                X64Register::GPR(x) => RegisterIndex(x as usize),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  574","line":"                X64Register::XMM(x) => RegisterIndex(x as usize + 16),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  575","line":"            }"},
{"lineNum":"  576","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"        /// Converts a DWARD regnum to X64Register."},
{"lineNum":"  579","line":"        pub fn from_dwarf_regnum(x: u16) -> Option<X64Register> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  580","line":"            Some(match x {","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":"  581","line":"                0 => X64Register::GPR(GPR::RAX),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  582","line":"                1 => X64Register::GPR(GPR::RDX),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  583","line":"                2 => X64Register::GPR(GPR::RCX),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  584","line":"                3 => X64Register::GPR(GPR::RBX),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  585","line":"                4 => X64Register::GPR(GPR::RSI),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  586","line":"                5 => X64Register::GPR(GPR::RDI),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  587","line":"                6 => X64Register::GPR(GPR::RBP),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  588","line":"                7 => X64Register::GPR(GPR::RSP),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  589","line":"                8 => X64Register::GPR(GPR::R8),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  590","line":"                9 => X64Register::GPR(GPR::R9),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  591","line":"                10 => X64Register::GPR(GPR::R10),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  592","line":"                11 => X64Register::GPR(GPR::R11),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  593","line":"                12 => X64Register::GPR(GPR::R12),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  594","line":"                13 => X64Register::GPR(GPR::R13),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  595","line":"                14 => X64Register::GPR(GPR::R14),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  596","line":"                15 => X64Register::GPR(GPR::R15),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"                17 => X64Register::XMM(XMM::XMM0),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  599","line":"                18 => X64Register::XMM(XMM::XMM1),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  600","line":"                19 => X64Register::XMM(XMM::XMM2),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  601","line":"                20 => X64Register::XMM(XMM::XMM3),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  602","line":"                21 => X64Register::XMM(XMM::XMM4),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  603","line":"                22 => X64Register::XMM(XMM::XMM5),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  604","line":"                23 => X64Register::XMM(XMM::XMM6),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  605","line":"                24 => X64Register::XMM(XMM::XMM7),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  606","line":"                _ => return None,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  607","line":"            })"},
{"lineNum":"  608","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  609","line":"    }"},
{"lineNum":"  610","line":"}"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"#[cfg(unix)]"},
{"lineNum":"  613","line":"pub mod x64 {"},
{"lineNum":"  614","line":"    //! The x64 state module contains functions to generate state and code for x64 targets."},
{"lineNum":"  615","line":"    pub use super::x64_decl::*;"},
{"lineNum":"  616","line":"    use super::*;"},
{"lineNum":"  617","line":"    use crate::codegen::BreakpointMap;"},
{"lineNum":"  618","line":"    use crate::fault::{"},
{"lineNum":"  619","line":"        catch_unsafe_unwind, get_boundary_register_preservation, run_on_alternative_stack,"},
{"lineNum":"  620","line":"    };"},
{"lineNum":"  621","line":"    use crate::structures::TypedIndex;"},
{"lineNum":"  622","line":"    use crate::types::LocalGlobalIndex;"},
{"lineNum":"  623","line":"    use crate::vm::Ctx;"},
{"lineNum":"  624","line":"    use std::any::Any;"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"    unsafe fn compute_vmctx_deref(vmctx: *const Ctx, seq: &[usize]) -> u64 {"},
{"lineNum":"  627","line":"        let mut ptr = &vmctx as *const *const Ctx as *const u8;"},
{"lineNum":"  628","line":"        for x in seq {"},
{"lineNum":"  629","line":"            ptr = (*(ptr as *const *const u8)).offset(*x as isize);"},
{"lineNum":"  630","line":"        }"},
{"lineNum":"  631","line":"        ptr as usize as u64"},
{"lineNum":"  632","line":"    }"},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"    /// Create a new `MachineState` with default values."},
{"lineNum":"  635","line":"    pub fn new_machine_state() -> MachineState {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  636","line":"        MachineState {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  637","line":"            stack_values: vec![],","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  638","line":"            register_values: vec![MachineValue::Undefined; 16 + 8],","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  639","line":"            prev_frame: BTreeMap::new(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  640","line":"            wasm_stack: vec![],","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  641","line":"            wasm_stack_private_depth: 0,"},
{"lineNum":"  642","line":"            wasm_inst_offset: ::std::usize::MAX,"},
{"lineNum":"  643","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  644","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"    /// Invokes a call return on the stack for the given module state map, code base, instance"},
{"lineNum":"  647","line":"    /// image and context."},
{"lineNum":"  648","line":"    #[warn(unused_variables)]"},
{"lineNum":"  649","line":"    pub unsafe fn invoke_call_return_on_stack("},
{"lineNum":"  650","line":"        msm: &ModuleStateMap,"},
{"lineNum":"  651","line":"        code_base: usize,"},
{"lineNum":"  652","line":"        image: InstanceImage,"},
{"lineNum":"  653","line":"        vmctx: &mut Ctx,"},
{"lineNum":"  654","line":"        breakpoints: Option<BreakpointMap>,"},
{"lineNum":"  655","line":"    ) -> Result<u64, Box<dyn Any>> {"},
{"lineNum":"  656","line":"        let mut stack: Vec<u64> = vec![0; 1048576 * 8 / 8]; // 8MB stack"},
{"lineNum":"  657","line":"        let mut stack_offset: usize = stack.len();"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"        stack_offset -= 3; // placeholder for call return"},
{"lineNum":"  660","line":""},
{"lineNum":"  661","line":"        let mut last_stack_offset: u64 = 0; // rbp"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"        let mut known_registers: [Option<u64>; 32] = [None; 32];"},
{"lineNum":"  664","line":""},
{"lineNum":"  665","line":"        let local_functions_vec: Vec<&FunctionStateMap> ="},
{"lineNum":"  666","line":"            msm.local_functions.iter().map(|(_, v)| v).collect();"},
{"lineNum":"  667","line":""},
{"lineNum":"  668","line":"        // Bottom to top"},
{"lineNum":"  669","line":"        for f in image.execution_state.frames.iter().rev() {"},
{"lineNum":"  670","line":"            let fsm = local_functions_vec[f.local_function_id];"},
{"lineNum":"  671","line":"            let suspend_offset = if f.wasm_inst_offset == ::std::usize::MAX {"},
{"lineNum":"  672","line":"                fsm.wasm_function_header_target_offset"},
{"lineNum":"  673","line":"            } else {"},
{"lineNum":"  674","line":"                fsm.wasm_offset_to_target_offset"},
{"lineNum":"  675","line":"                    .get(&f.wasm_inst_offset)"},
{"lineNum":"  676","line":"                    .map(|x| *x)"},
{"lineNum":"  677","line":"            }"},
{"lineNum":"  678","line":"            .expect(\"instruction is not a critical point\");"},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"            let (activate_offset, diff_id) = match suspend_offset {"},
{"lineNum":"  681","line":"                SuspendOffset::Loop(x) => fsm.loop_offsets.get(&x),"},
{"lineNum":"  682","line":"                SuspendOffset::Call(x) => fsm.call_offsets.get(&x),"},
{"lineNum":"  683","line":"                SuspendOffset::Trappable(x) => fsm.trappable_offsets.get(&x),"},
{"lineNum":"  684","line":"            }"},
{"lineNum":"  685","line":"            .map(|x| (x.activate_offset, x.diff_id))"},
{"lineNum":"  686","line":"            .expect(\"offset cannot be found in table\");"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"            let diff = &fsm.diffs[diff_id];"},
{"lineNum":"  689","line":"            let state = diff.build_state(fsm);"},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"            stack_offset -= 1;"},
{"lineNum":"  692","line":"            stack[stack_offset] = stack.as_ptr().offset(last_stack_offset as isize) as usize as u64; // push rbp"},
{"lineNum":"  693","line":"            last_stack_offset = stack_offset as _;"},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":"            let mut got_explicit_shadow = false;"},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"            for v in state.stack_values.iter() {"},
{"lineNum":"  698","line":"                match *v {"},
{"lineNum":"  699","line":"                    MachineValue::Undefined => stack_offset -= 1,"},
{"lineNum":"  700","line":"                    MachineValue::Vmctx => {"},
{"lineNum":"  701","line":"                        stack_offset -= 1;"},
{"lineNum":"  702","line":"                        stack[stack_offset] = vmctx as *mut Ctx as usize as u64;"},
{"lineNum":"  703","line":"                    }"},
{"lineNum":"  704","line":"                    MachineValue::VmctxDeref(ref seq) => {"},
{"lineNum":"  705","line":"                        stack_offset -= 1;"},
{"lineNum":"  706","line":"                        stack[stack_offset] = compute_vmctx_deref(vmctx as *const Ctx, seq);"},
{"lineNum":"  707","line":"                    }"},
{"lineNum":"  708","line":"                    MachineValue::PreserveRegister(index) => {"},
{"lineNum":"  709","line":"                        stack_offset -= 1;"},
{"lineNum":"  710","line":"                        stack[stack_offset] = known_registers[index.0].unwrap_or(0);"},
{"lineNum":"  711","line":"                    }"},
{"lineNum":"  712","line":"                    MachineValue::CopyStackBPRelative(byte_offset) => {"},
{"lineNum":"  713","line":"                        assert!(byte_offset % 8 == 0);"},
{"lineNum":"  714","line":"                        let target_offset = (byte_offset / 8) as isize;"},
{"lineNum":"  715","line":"                        let v = stack[(last_stack_offset as isize + target_offset) as usize];"},
{"lineNum":"  716","line":"                        stack_offset -= 1;"},
{"lineNum":"  717","line":"                        stack[stack_offset] = v;"},
{"lineNum":"  718","line":"                    }"},
{"lineNum":"  719","line":"                    MachineValue::ExplicitShadow => {"},
{"lineNum":"  720","line":"                        assert!(fsm.shadow_size % 8 == 0);"},
{"lineNum":"  721","line":"                        stack_offset -= fsm.shadow_size / 8;"},
{"lineNum":"  722","line":"                        got_explicit_shadow = true;"},
{"lineNum":"  723","line":"                    }"},
{"lineNum":"  724","line":"                    MachineValue::WasmStack(x) => {"},
{"lineNum":"  725","line":"                        stack_offset -= 1;"},
{"lineNum":"  726","line":"                        match state.wasm_stack[x] {"},
{"lineNum":"  727","line":"                            WasmAbstractValue::Const(x) => {"},
{"lineNum":"  728","line":"                                stack[stack_offset] = x;"},
{"lineNum":"  729","line":"                            }"},
{"lineNum":"  730","line":"                            WasmAbstractValue::Runtime => {"},
{"lineNum":"  731","line":"                                stack[stack_offset] = f.stack[x].unwrap();"},
{"lineNum":"  732","line":"                            }"},
{"lineNum":"  733","line":"                        }"},
{"lineNum":"  734","line":"                    }"},
{"lineNum":"  735","line":"                    MachineValue::WasmLocal(x) => {"},
{"lineNum":"  736","line":"                        stack_offset -= 1;"},
{"lineNum":"  737","line":"                        match fsm.locals[x] {"},
{"lineNum":"  738","line":"                            WasmAbstractValue::Const(x) => {"},
{"lineNum":"  739","line":"                                stack[stack_offset] = x;"},
{"lineNum":"  740","line":"                            }"},
{"lineNum":"  741","line":"                            WasmAbstractValue::Runtime => {"},
{"lineNum":"  742","line":"                                stack[stack_offset] = f.locals[x].unwrap();"},
{"lineNum":"  743","line":"                            }"},
{"lineNum":"  744","line":"                        }"},
{"lineNum":"  745","line":"                    }"},
{"lineNum":"  746","line":"                    MachineValue::TwoHalves(ref inner) => {"},
{"lineNum":"  747","line":"                        stack_offset -= 1;"},
{"lineNum":"  748","line":"                        // TODO: Cleanup"},
{"lineNum":"  749","line":"                        match inner.0 {"},
{"lineNum":"  750","line":"                            MachineValue::WasmStack(x) => match state.wasm_stack[x] {"},
{"lineNum":"  751","line":"                                WasmAbstractValue::Const(x) => {"},
{"lineNum":"  752","line":"                                    assert!(x <= std::u32::MAX as u64);"},
{"lineNum":"  753","line":"                                    stack[stack_offset] |= x;"},
{"lineNum":"  754","line":"                                }"},
{"lineNum":"  755","line":"                                WasmAbstractValue::Runtime => {"},
{"lineNum":"  756","line":"                                    let v = f.stack[x].unwrap();"},
{"lineNum":"  757","line":"                                    assert!(v <= std::u32::MAX as u64);"},
{"lineNum":"  758","line":"                                    stack[stack_offset] |= v;"},
{"lineNum":"  759","line":"                                }"},
{"lineNum":"  760","line":"                            },"},
{"lineNum":"  761","line":"                            MachineValue::WasmLocal(x) => match fsm.locals[x] {"},
{"lineNum":"  762","line":"                                WasmAbstractValue::Const(x) => {"},
{"lineNum":"  763","line":"                                    assert!(x <= std::u32::MAX as u64);"},
{"lineNum":"  764","line":"                                    stack[stack_offset] |= x;"},
{"lineNum":"  765","line":"                                }"},
{"lineNum":"  766","line":"                                WasmAbstractValue::Runtime => {"},
{"lineNum":"  767","line":"                                    let v = f.locals[x].unwrap();"},
{"lineNum":"  768","line":"                                    assert!(v <= std::u32::MAX as u64);"},
{"lineNum":"  769","line":"                                    stack[stack_offset] |= v;"},
{"lineNum":"  770","line":"                                }"},
{"lineNum":"  771","line":"                            },"},
{"lineNum":"  772","line":"                            MachineValue::VmctxDeref(ref seq) => {"},
{"lineNum":"  773","line":"                                stack[stack_offset] |="},
{"lineNum":"  774","line":"                                    compute_vmctx_deref(vmctx as *const Ctx, seq)"},
{"lineNum":"  775","line":"                                        & (std::u32::MAX as u64);"},
{"lineNum":"  776","line":"                            }"},
{"lineNum":"  777","line":"                            MachineValue::Undefined => {}"},
{"lineNum":"  778","line":"                            _ => unimplemented!(\"TwoHalves.0\"),"},
{"lineNum":"  779","line":"                        }"},
{"lineNum":"  780","line":"                        match inner.1 {"},
{"lineNum":"  781","line":"                            MachineValue::WasmStack(x) => match state.wasm_stack[x] {"},
{"lineNum":"  782","line":"                                WasmAbstractValue::Const(x) => {"},
{"lineNum":"  783","line":"                                    assert!(x <= std::u32::MAX as u64);"},
{"lineNum":"  784","line":"                                    stack[stack_offset] |= x << 32;"},
{"lineNum":"  785","line":"                                }"},
{"lineNum":"  786","line":"                                WasmAbstractValue::Runtime => {"},
{"lineNum":"  787","line":"                                    let v = f.stack[x].unwrap();"},
{"lineNum":"  788","line":"                                    assert!(v <= std::u32::MAX as u64);"},
{"lineNum":"  789","line":"                                    stack[stack_offset] |= v << 32;"},
{"lineNum":"  790","line":"                                }"},
{"lineNum":"  791","line":"                            },"},
{"lineNum":"  792","line":"                            MachineValue::WasmLocal(x) => match fsm.locals[x] {"},
{"lineNum":"  793","line":"                                WasmAbstractValue::Const(x) => {"},
{"lineNum":"  794","line":"                                    assert!(x <= std::u32::MAX as u64);"},
{"lineNum":"  795","line":"                                    stack[stack_offset] |= x << 32;"},
{"lineNum":"  796","line":"                                }"},
{"lineNum":"  797","line":"                                WasmAbstractValue::Runtime => {"},
{"lineNum":"  798","line":"                                    let v = f.locals[x].unwrap();"},
{"lineNum":"  799","line":"                                    assert!(v <= std::u32::MAX as u64);"},
{"lineNum":"  800","line":"                                    stack[stack_offset] |= v << 32;"},
{"lineNum":"  801","line":"                                }"},
{"lineNum":"  802","line":"                            },"},
{"lineNum":"  803","line":"                            MachineValue::VmctxDeref(ref seq) => {"},
{"lineNum":"  804","line":"                                stack[stack_offset] |="},
{"lineNum":"  805","line":"                                    (compute_vmctx_deref(vmctx as *const Ctx, seq)"},
{"lineNum":"  806","line":"                                        & (std::u32::MAX as u64))"},
{"lineNum":"  807","line":"                                        << 32;"},
{"lineNum":"  808","line":"                            }"},
{"lineNum":"  809","line":"                            MachineValue::Undefined => {}"},
{"lineNum":"  810","line":"                            _ => unimplemented!(\"TwoHalves.1\"),"},
{"lineNum":"  811","line":"                        }"},
{"lineNum":"  812","line":"                    }"},
{"lineNum":"  813","line":"                }"},
{"lineNum":"  814","line":"            }"},
{"lineNum":"  815","line":"            if !got_explicit_shadow {"},
{"lineNum":"  816","line":"                assert!(fsm.shadow_size % 8 == 0);"},
{"lineNum":"  817","line":"                stack_offset -= fsm.shadow_size / 8;"},
{"lineNum":"  818","line":"            }"},
{"lineNum":"  819","line":"            for (i, v) in state.register_values.iter().enumerate() {"},
{"lineNum":"  820","line":"                match *v {"},
{"lineNum":"  821","line":"                    MachineValue::Undefined => {}"},
{"lineNum":"  822","line":"                    MachineValue::Vmctx => {"},
{"lineNum":"  823","line":"                        known_registers[i] = Some(vmctx as *mut Ctx as usize as u64);"},
{"lineNum":"  824","line":"                    }"},
{"lineNum":"  825","line":"                    MachineValue::VmctxDeref(ref seq) => {"},
{"lineNum":"  826","line":"                        known_registers[i] = Some(compute_vmctx_deref(vmctx as *const Ctx, seq));"},
{"lineNum":"  827","line":"                    }"},
{"lineNum":"  828","line":"                    MachineValue::WasmStack(x) => match state.wasm_stack[x] {"},
{"lineNum":"  829","line":"                        WasmAbstractValue::Const(x) => {"},
{"lineNum":"  830","line":"                            known_registers[i] = Some(x);"},
{"lineNum":"  831","line":"                        }"},
{"lineNum":"  832","line":"                        WasmAbstractValue::Runtime => {"},
{"lineNum":"  833","line":"                            known_registers[i] = Some(f.stack[x].unwrap());"},
{"lineNum":"  834","line":"                        }"},
{"lineNum":"  835","line":"                    },"},
{"lineNum":"  836","line":"                    MachineValue::WasmLocal(x) => match fsm.locals[x] {"},
{"lineNum":"  837","line":"                        WasmAbstractValue::Const(x) => {"},
{"lineNum":"  838","line":"                            known_registers[i] = Some(x);"},
{"lineNum":"  839","line":"                        }"},
{"lineNum":"  840","line":"                        WasmAbstractValue::Runtime => {"},
{"lineNum":"  841","line":"                            known_registers[i] = Some(f.locals[x].unwrap());"},
{"lineNum":"  842","line":"                        }"},
{"lineNum":"  843","line":"                    },"},
{"lineNum":"  844","line":"                    _ => unreachable!(),"},
{"lineNum":"  845","line":"                }"},
{"lineNum":"  846","line":"            }"},
{"lineNum":"  847","line":""},
{"lineNum":"  848","line":"            // no need to check 16-byte alignment here because it\'s possible that we\'re not at a call entry."},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"            stack_offset -= 1;"},
{"lineNum":"  851","line":"            stack[stack_offset] = (code_base + activate_offset) as u64; // return address"},
{"lineNum":"  852","line":"        }"},
{"lineNum":"  853","line":""},
{"lineNum":"  854","line":"        stack_offset -= 1;"},
{"lineNum":"  855","line":"        stack[stack_offset] = known_registers[X64Register::GPR(GPR::R15).to_index().0].unwrap_or(0);"},
{"lineNum":"  856","line":""},
{"lineNum":"  857","line":"        stack_offset -= 1;"},
{"lineNum":"  858","line":"        stack[stack_offset] = known_registers[X64Register::GPR(GPR::R14).to_index().0].unwrap_or(0);"},
{"lineNum":"  859","line":""},
{"lineNum":"  860","line":"        stack_offset -= 1;"},
{"lineNum":"  861","line":"        stack[stack_offset] = known_registers[X64Register::GPR(GPR::R13).to_index().0].unwrap_or(0);"},
{"lineNum":"  862","line":""},
{"lineNum":"  863","line":"        stack_offset -= 1;"},
{"lineNum":"  864","line":"        stack[stack_offset] = known_registers[X64Register::GPR(GPR::R12).to_index().0].unwrap_or(0);"},
{"lineNum":"  865","line":""},
{"lineNum":"  866","line":"        stack_offset -= 1;"},
{"lineNum":"  867","line":"        stack[stack_offset] = known_registers[X64Register::GPR(GPR::R11).to_index().0].unwrap_or(0);"},
{"lineNum":"  868","line":""},
{"lineNum":"  869","line":"        stack_offset -= 1;"},
{"lineNum":"  870","line":"        stack[stack_offset] = known_registers[X64Register::GPR(GPR::R10).to_index().0].unwrap_or(0);"},
{"lineNum":"  871","line":""},
{"lineNum":"  872","line":"        stack_offset -= 1;"},
{"lineNum":"  873","line":"        stack[stack_offset] = known_registers[X64Register::GPR(GPR::R9).to_index().0].unwrap_or(0);"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"        stack_offset -= 1;"},
{"lineNum":"  876","line":"        stack[stack_offset] = known_registers[X64Register::GPR(GPR::R8).to_index().0].unwrap_or(0);"},
{"lineNum":"  877","line":""},
{"lineNum":"  878","line":"        stack_offset -= 1;"},
{"lineNum":"  879","line":"        stack[stack_offset] = known_registers[X64Register::GPR(GPR::RSI).to_index().0].unwrap_or(0);"},
{"lineNum":"  880","line":""},
{"lineNum":"  881","line":"        stack_offset -= 1;"},
{"lineNum":"  882","line":"        stack[stack_offset] = known_registers[X64Register::GPR(GPR::RDI).to_index().0].unwrap_or(0);"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"        stack_offset -= 1;"},
{"lineNum":"  885","line":"        stack[stack_offset] = known_registers[X64Register::GPR(GPR::RDX).to_index().0].unwrap_or(0);"},
{"lineNum":"  886","line":""},
{"lineNum":"  887","line":"        stack_offset -= 1;"},
{"lineNum":"  888","line":"        stack[stack_offset] = known_registers[X64Register::GPR(GPR::RCX).to_index().0].unwrap_or(0);"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"        stack_offset -= 1;"},
{"lineNum":"  891","line":"        stack[stack_offset] = known_registers[X64Register::GPR(GPR::RBX).to_index().0].unwrap_or(0);"},
{"lineNum":"  892","line":""},
{"lineNum":"  893","line":"        stack_offset -= 1;"},
{"lineNum":"  894","line":"        stack[stack_offset] = known_registers[X64Register::GPR(GPR::RAX).to_index().0].unwrap_or(0);"},
{"lineNum":"  895","line":""},
{"lineNum":"  896","line":"        stack_offset -= 1;"},
{"lineNum":"  897","line":"        stack[stack_offset] = stack.as_ptr().offset(last_stack_offset as isize) as usize as u64; // rbp"},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"        stack_offset -= 1;"},
{"lineNum":"  900","line":"        stack[stack_offset] ="},
{"lineNum":"  901","line":"            known_registers[X64Register::XMM(XMM::XMM15).to_index().0].unwrap_or(0);"},
{"lineNum":"  902","line":""},
{"lineNum":"  903","line":"        stack_offset -= 1;"},
{"lineNum":"  904","line":"        stack[stack_offset] ="},
{"lineNum":"  905","line":"            known_registers[X64Register::XMM(XMM::XMM14).to_index().0].unwrap_or(0);"},
{"lineNum":"  906","line":""},
{"lineNum":"  907","line":"        stack_offset -= 1;"},
{"lineNum":"  908","line":"        stack[stack_offset] ="},
{"lineNum":"  909","line":"            known_registers[X64Register::XMM(XMM::XMM13).to_index().0].unwrap_or(0);"},
{"lineNum":"  910","line":""},
{"lineNum":"  911","line":"        stack_offset -= 1;"},
{"lineNum":"  912","line":"        stack[stack_offset] ="},
{"lineNum":"  913","line":"            known_registers[X64Register::XMM(XMM::XMM12).to_index().0].unwrap_or(0);"},
{"lineNum":"  914","line":""},
{"lineNum":"  915","line":"        stack_offset -= 1;"},
{"lineNum":"  916","line":"        stack[stack_offset] ="},
{"lineNum":"  917","line":"            known_registers[X64Register::XMM(XMM::XMM11).to_index().0].unwrap_or(0);"},
{"lineNum":"  918","line":""},
{"lineNum":"  919","line":"        stack_offset -= 1;"},
{"lineNum":"  920","line":"        stack[stack_offset] ="},
{"lineNum":"  921","line":"            known_registers[X64Register::XMM(XMM::XMM10).to_index().0].unwrap_or(0);"},
{"lineNum":"  922","line":""},
{"lineNum":"  923","line":"        stack_offset -= 1;"},
{"lineNum":"  924","line":"        stack[stack_offset] ="},
{"lineNum":"  925","line":"            known_registers[X64Register::XMM(XMM::XMM9).to_index().0].unwrap_or(0);"},
{"lineNum":"  926","line":""},
{"lineNum":"  927","line":"        stack_offset -= 1;"},
{"lineNum":"  928","line":"        stack[stack_offset] ="},
{"lineNum":"  929","line":"            known_registers[X64Register::XMM(XMM::XMM8).to_index().0].unwrap_or(0);"},
{"lineNum":"  930","line":"        stack_offset -= 1;"},
{"lineNum":"  931","line":"        stack[stack_offset] ="},
{"lineNum":"  932","line":"            known_registers[X64Register::XMM(XMM::XMM7).to_index().0].unwrap_or(0);"},
{"lineNum":"  933","line":""},
{"lineNum":"  934","line":"        stack_offset -= 1;"},
{"lineNum":"  935","line":"        stack[stack_offset] ="},
{"lineNum":"  936","line":"            known_registers[X64Register::XMM(XMM::XMM6).to_index().0].unwrap_or(0);"},
{"lineNum":"  937","line":""},
{"lineNum":"  938","line":"        stack_offset -= 1;"},
{"lineNum":"  939","line":"        stack[stack_offset] ="},
{"lineNum":"  940","line":"            known_registers[X64Register::XMM(XMM::XMM5).to_index().0].unwrap_or(0);"},
{"lineNum":"  941","line":""},
{"lineNum":"  942","line":"        stack_offset -= 1;"},
{"lineNum":"  943","line":"        stack[stack_offset] ="},
{"lineNum":"  944","line":"            known_registers[X64Register::XMM(XMM::XMM4).to_index().0].unwrap_or(0);"},
{"lineNum":"  945","line":""},
{"lineNum":"  946","line":"        stack_offset -= 1;"},
{"lineNum":"  947","line":"        stack[stack_offset] ="},
{"lineNum":"  948","line":"            known_registers[X64Register::XMM(XMM::XMM3).to_index().0].unwrap_or(0);"},
{"lineNum":"  949","line":""},
{"lineNum":"  950","line":"        stack_offset -= 1;"},
{"lineNum":"  951","line":"        stack[stack_offset] ="},
{"lineNum":"  952","line":"            known_registers[X64Register::XMM(XMM::XMM2).to_index().0].unwrap_or(0);"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"        stack_offset -= 1;"},
{"lineNum":"  955","line":"        stack[stack_offset] ="},
{"lineNum":"  956","line":"            known_registers[X64Register::XMM(XMM::XMM1).to_index().0].unwrap_or(0);"},
{"lineNum":"  957","line":""},
{"lineNum":"  958","line":"        stack_offset -= 1;"},
{"lineNum":"  959","line":"        stack[stack_offset] ="},
{"lineNum":"  960","line":"            known_registers[X64Register::XMM(XMM::XMM0).to_index().0].unwrap_or(0);"},
{"lineNum":"  961","line":""},
{"lineNum":"  962","line":"        if let Some(ref memory) = image.memory {"},
{"lineNum":"  963","line":"            assert!(vmctx.internal.memory_bound <= memory.len());"},
{"lineNum":"  964","line":""},
{"lineNum":"  965","line":"            if vmctx.internal.memory_bound < memory.len() {"},
{"lineNum":"  966","line":"                let grow: unsafe extern \"C\" fn(ctx: &mut Ctx, memory_index: usize, delta: usize) ="},
{"lineNum":"  967","line":"                    ::std::mem::transmute((*vmctx.internal.intrinsics).memory_grow);"},
{"lineNum":"  968","line":"                grow("},
{"lineNum":"  969","line":"                    vmctx,"},
{"lineNum":"  970","line":"                    0,"},
{"lineNum":"  971","line":"                    (memory.len() - vmctx.internal.memory_bound) / 65536,"},
{"lineNum":"  972","line":"                );"},
{"lineNum":"  973","line":"                assert_eq!(vmctx.internal.memory_bound, memory.len());"},
{"lineNum":"  974","line":"            }"},
{"lineNum":"  975","line":""},
{"lineNum":"  976","line":"            std::slice::from_raw_parts_mut(vmctx.internal.memory_base, vmctx.internal.memory_bound)"},
{"lineNum":"  977","line":"                .copy_from_slice(memory);"},
{"lineNum":"  978","line":"        }"},
{"lineNum":"  979","line":""},
{"lineNum":"  980","line":"        let globals_len = (*vmctx.module).info.globals.len();"},
{"lineNum":"  981","line":"        for i in 0..globals_len {"},
{"lineNum":"  982","line":"            (*(*vmctx.local_backing).globals[LocalGlobalIndex::new(i)].vm_local_global()).data ="},
{"lineNum":"  983","line":"                image.globals[i];"},
{"lineNum":"  984","line":"        }"},
{"lineNum":"  985","line":""},
{"lineNum":"  986","line":"        drop(image); // free up host memory"},
{"lineNum":"  987","line":""},
{"lineNum":"  988","line":"        catch_unsafe_unwind("},
{"lineNum":"  989","line":"            || {"},
{"lineNum":"  990","line":"                run_on_alternative_stack("},
{"lineNum":"  991","line":"                    stack.as_mut_ptr().offset(stack.len() as isize),"},
{"lineNum":"  992","line":"                    stack.as_mut_ptr().offset(stack_offset as isize),"},
{"lineNum":"  993","line":"                )"},
{"lineNum":"  994","line":"            },"},
{"lineNum":"  995","line":"            breakpoints,"},
{"lineNum":"  996","line":"        )"},
{"lineNum":"  997","line":"    }"},
{"lineNum":"  998","line":""},
{"lineNum":"  999","line":"    /// Builds an `InstanceImage` for the given `Ctx` and `ExecutionStateImage`."},
{"lineNum":" 1000","line":"    pub fn build_instance_image("},
{"lineNum":" 1001","line":"        vmctx: &mut Ctx,"},
{"lineNum":" 1002","line":"        execution_state: ExecutionStateImage,"},
{"lineNum":" 1003","line":"    ) -> InstanceImage {"},
{"lineNum":" 1004","line":"        unsafe {"},
{"lineNum":" 1005","line":"            let memory = if vmctx.internal.memory_base.is_null() {"},
{"lineNum":" 1006","line":"                None"},
{"lineNum":" 1007","line":"            } else {"},
{"lineNum":" 1008","line":"                Some("},
{"lineNum":" 1009","line":"                    std::slice::from_raw_parts("},
{"lineNum":" 1010","line":"                        vmctx.internal.memory_base,"},
{"lineNum":" 1011","line":"                        vmctx.internal.memory_bound,"},
{"lineNum":" 1012","line":"                    )"},
{"lineNum":" 1013","line":"                    .to_vec(),"},
{"lineNum":" 1014","line":"                )"},
{"lineNum":" 1015","line":"            };"},
{"lineNum":" 1016","line":""},
{"lineNum":" 1017","line":"            // FIXME: Imported globals"},
{"lineNum":" 1018","line":"            let globals_len = (*vmctx.module).info.globals.len();"},
{"lineNum":" 1019","line":"            let globals: Vec<u128> = (0..globals_len)"},
{"lineNum":" 1020","line":"                .map(|i| {"},
{"lineNum":" 1021","line":"                    (*vmctx.local_backing).globals[LocalGlobalIndex::new(i)]"},
{"lineNum":" 1022","line":"                        .get()"},
{"lineNum":" 1023","line":"                        .to_u128()"},
{"lineNum":" 1024","line":"                })"},
{"lineNum":" 1025","line":"                .collect();"},
{"lineNum":" 1026","line":""},
{"lineNum":" 1027","line":"            InstanceImage {"},
{"lineNum":" 1028","line":"                memory: memory,"},
{"lineNum":" 1029","line":"                globals: globals,"},
{"lineNum":" 1030","line":"                execution_state: execution_state,"},
{"lineNum":" 1031","line":"            }"},
{"lineNum":" 1032","line":"        }"},
{"lineNum":" 1033","line":"    }"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"    /// Returns a `ExecutionStateImage` for the given versions, stack, initial registers and"},
{"lineNum":" 1036","line":"    /// initial address."},
{"lineNum":" 1037","line":"    #[warn(unused_variables)]"},
{"lineNum":" 1038","line":"    pub unsafe fn read_stack<\'a, I: Iterator<Item = &\'a CodeVersion>, F: Fn() -> I + \'a>("},
{"lineNum":" 1039","line":"        versions: F,"},
{"lineNum":" 1040","line":"        mut stack: *const u64,"},
{"lineNum":" 1041","line":"        initially_known_registers: [Option<u64>; 32],"},
{"lineNum":" 1042","line":"        mut initial_address: Option<u64>,"},
{"lineNum":" 1043","line":"        max_depth: Option<usize>,"},
{"lineNum":" 1044","line":"    ) -> ExecutionStateImage {"},
{"lineNum":" 1045","line":"        let mut known_registers: [Option<u64>; 32] = initially_known_registers;"},
{"lineNum":" 1046","line":"        let mut results: Vec<WasmFunctionStateDump> = vec![];"},
{"lineNum":" 1047","line":"        let mut was_baseline = true;"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"        for depth in 0.. {"},
{"lineNum":" 1050","line":"            if let Some(max_depth) = max_depth {"},
{"lineNum":" 1051","line":"                if depth >= max_depth {"},
{"lineNum":" 1052","line":"                    return ExecutionStateImage { frames: results };"},
{"lineNum":" 1053","line":"                }"},
{"lineNum":" 1054","line":"            }"},
{"lineNum":" 1055","line":""},
{"lineNum":" 1056","line":"            let ret_addr = initial_address.take().unwrap_or_else(|| {"},
{"lineNum":" 1057","line":"                let x = *stack;"},
{"lineNum":" 1058","line":"                stack = stack.offset(1);"},
{"lineNum":" 1059","line":"                x"},
{"lineNum":" 1060","line":"            });"},
{"lineNum":" 1061","line":""},
{"lineNum":" 1062","line":"            let mut fsm_state: Option<(&FunctionStateMap, MachineState)> = None;"},
{"lineNum":" 1063","line":"            let mut is_baseline: Option<bool> = None;"},
{"lineNum":" 1064","line":""},
{"lineNum":" 1065","line":"            for version in versions() {"},
{"lineNum":" 1066","line":"                //println!(\"Lookup IP: {:x}\", ret_addr);"},
{"lineNum":" 1067","line":"                match version"},
{"lineNum":" 1068","line":"                    .msm"},
{"lineNum":" 1069","line":"                    .lookup_call_ip(ret_addr as usize, version.base)"},
{"lineNum":" 1070","line":"                    .or_else(|| {"},
{"lineNum":" 1071","line":"                        version"},
{"lineNum":" 1072","line":"                            .msm"},
{"lineNum":" 1073","line":"                            .lookup_trappable_ip(ret_addr as usize, version.base)"},
{"lineNum":" 1074","line":"                    })"},
{"lineNum":" 1075","line":"                    .or_else(|| version.msm.lookup_loop_ip(ret_addr as usize, version.base))"},
{"lineNum":" 1076","line":"                {"},
{"lineNum":" 1077","line":"                    Some(x) => {"},
{"lineNum":" 1078","line":"                        fsm_state = Some(x);"},
{"lineNum":" 1079","line":"                        is_baseline = Some(version.baseline);"},
{"lineNum":" 1080","line":"                        break;"},
{"lineNum":" 1081","line":"                    }"},
{"lineNum":" 1082","line":"                    None => {}"},
{"lineNum":" 1083","line":"                };"},
{"lineNum":" 1084","line":"            }"},
{"lineNum":" 1085","line":""},
{"lineNum":" 1086","line":"            let (fsm, state) = if let Some(x) = fsm_state {"},
{"lineNum":" 1087","line":"                x"},
{"lineNum":" 1088","line":"            } else {"},
{"lineNum":" 1089","line":"                return ExecutionStateImage { frames: results };"},
{"lineNum":" 1090","line":"            };"},
{"lineNum":" 1091","line":""},
{"lineNum":" 1092","line":"            {"},
{"lineNum":" 1093","line":"                let is_baseline = is_baseline.unwrap();"},
{"lineNum":" 1094","line":""},
{"lineNum":" 1095","line":"                // Are we unwinding through an optimized/baseline boundary?"},
{"lineNum":" 1096","line":"                if is_baseline && !was_baseline {"},
{"lineNum":" 1097","line":"                    let callee_saved = &*get_boundary_register_preservation();"},
{"lineNum":" 1098","line":"                    known_registers[X64Register::GPR(GPR::R15).to_index().0] ="},
{"lineNum":" 1099","line":"                        Some(callee_saved.r15);"},
{"lineNum":" 1100","line":"                    known_registers[X64Register::GPR(GPR::R14).to_index().0] ="},
{"lineNum":" 1101","line":"                        Some(callee_saved.r14);"},
{"lineNum":" 1102","line":"                    known_registers[X64Register::GPR(GPR::R13).to_index().0] ="},
{"lineNum":" 1103","line":"                        Some(callee_saved.r13);"},
{"lineNum":" 1104","line":"                    known_registers[X64Register::GPR(GPR::R12).to_index().0] ="},
{"lineNum":" 1105","line":"                        Some(callee_saved.r12);"},
{"lineNum":" 1106","line":"                    known_registers[X64Register::GPR(GPR::RBX).to_index().0] ="},
{"lineNum":" 1107","line":"                        Some(callee_saved.rbx);"},
{"lineNum":" 1108","line":"                }"},
{"lineNum":" 1109","line":""},
{"lineNum":" 1110","line":"                was_baseline = is_baseline;"},
{"lineNum":" 1111","line":"            }"},
{"lineNum":" 1112","line":""},
{"lineNum":" 1113","line":"            let mut wasm_stack: Vec<Option<u64>> = state"},
{"lineNum":" 1114","line":"                .wasm_stack"},
{"lineNum":" 1115","line":"                .iter()"},
{"lineNum":" 1116","line":"                .map(|x| match *x {"},
{"lineNum":" 1117","line":"                    WasmAbstractValue::Const(x) => Some(x),"},
{"lineNum":" 1118","line":"                    WasmAbstractValue::Runtime => None,"},
{"lineNum":" 1119","line":"                })"},
{"lineNum":" 1120","line":"                .collect();"},
{"lineNum":" 1121","line":"            let mut wasm_locals: Vec<Option<u64>> = fsm"},
{"lineNum":" 1122","line":"                .locals"},
{"lineNum":" 1123","line":"                .iter()"},
{"lineNum":" 1124","line":"                .map(|x| match *x {"},
{"lineNum":" 1125","line":"                    WasmAbstractValue::Const(x) => Some(x),"},
{"lineNum":" 1126","line":"                    WasmAbstractValue::Runtime => None,"},
{"lineNum":" 1127","line":"                })"},
{"lineNum":" 1128","line":"                .collect();"},
{"lineNum":" 1129","line":""},
{"lineNum":" 1130","line":"            // This must be before the next loop because that modifies `known_registers`."},
{"lineNum":" 1131","line":"            for (i, v) in state.register_values.iter().enumerate() {"},
{"lineNum":" 1132","line":"                match *v {"},
{"lineNum":" 1133","line":"                    MachineValue::Undefined => {}"},
{"lineNum":" 1134","line":"                    MachineValue::Vmctx => {}"},
{"lineNum":" 1135","line":"                    MachineValue::VmctxDeref(_) => {}"},
{"lineNum":" 1136","line":"                    MachineValue::WasmStack(idx) => {"},
{"lineNum":" 1137","line":"                        if let Some(v) = known_registers[i] {"},
{"lineNum":" 1138","line":"                            wasm_stack[idx] = Some(v);"},
{"lineNum":" 1139","line":"                        } else {"},
{"lineNum":" 1140","line":"                            eprintln!("},
{"lineNum":" 1141","line":"                                \"BUG: Register {} for WebAssembly stack slot {} has unknown value.\","},
{"lineNum":" 1142","line":"                                i, idx"},
{"lineNum":" 1143","line":"                            );"},
{"lineNum":" 1144","line":"                        }"},
{"lineNum":" 1145","line":"                    }"},
{"lineNum":" 1146","line":"                    MachineValue::WasmLocal(idx) => {"},
{"lineNum":" 1147","line":"                        if let Some(v) = known_registers[i] {"},
{"lineNum":" 1148","line":"                            wasm_locals[idx] = Some(v);"},
{"lineNum":" 1149","line":"                        }"},
{"lineNum":" 1150","line":"                    }"},
{"lineNum":" 1151","line":"                    _ => unreachable!(),"},
{"lineNum":" 1152","line":"                }"},
{"lineNum":" 1153","line":"            }"},
{"lineNum":" 1154","line":""},
{"lineNum":" 1155","line":"            let mut found_shadow = false;"},
{"lineNum":" 1156","line":"            for v in state.stack_values.iter() {"},
{"lineNum":" 1157","line":"                match *v {"},
{"lineNum":" 1158","line":"                    MachineValue::ExplicitShadow => {"},
{"lineNum":" 1159","line":"                        found_shadow = true;"},
{"lineNum":" 1160","line":"                        break;"},
{"lineNum":" 1161","line":"                    }"},
{"lineNum":" 1162","line":"                    _ => {}"},
{"lineNum":" 1163","line":"                }"},
{"lineNum":" 1164","line":"            }"},
{"lineNum":" 1165","line":"            if !found_shadow {"},
{"lineNum":" 1166","line":"                stack = stack.offset((fsm.shadow_size / 8) as isize);"},
{"lineNum":" 1167","line":"            }"},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"            for v in state.stack_values.iter().rev() {"},
{"lineNum":" 1170","line":"                match *v {"},
{"lineNum":" 1171","line":"                    MachineValue::ExplicitShadow => {"},
{"lineNum":" 1172","line":"                        stack = stack.offset((fsm.shadow_size / 8) as isize);"},
{"lineNum":" 1173","line":"                    }"},
{"lineNum":" 1174","line":"                    MachineValue::Undefined => {"},
{"lineNum":" 1175","line":"                        stack = stack.offset(1);"},
{"lineNum":" 1176","line":"                    }"},
{"lineNum":" 1177","line":"                    MachineValue::Vmctx => {"},
{"lineNum":" 1178","line":"                        stack = stack.offset(1);"},
{"lineNum":" 1179","line":"                    }"},
{"lineNum":" 1180","line":"                    MachineValue::VmctxDeref(_) => {"},
{"lineNum":" 1181","line":"                        stack = stack.offset(1);"},
{"lineNum":" 1182","line":"                    }"},
{"lineNum":" 1183","line":"                    MachineValue::PreserveRegister(idx) => {"},
{"lineNum":" 1184","line":"                        known_registers[idx.0] = Some(*stack);"},
{"lineNum":" 1185","line":"                        stack = stack.offset(1);"},
{"lineNum":" 1186","line":"                    }"},
{"lineNum":" 1187","line":"                    MachineValue::CopyStackBPRelative(_) => {"},
{"lineNum":" 1188","line":"                        stack = stack.offset(1);"},
{"lineNum":" 1189","line":"                    }"},
{"lineNum":" 1190","line":"                    MachineValue::WasmStack(idx) => {"},
{"lineNum":" 1191","line":"                        wasm_stack[idx] = Some(*stack);"},
{"lineNum":" 1192","line":"                        stack = stack.offset(1);"},
{"lineNum":" 1193","line":"                    }"},
{"lineNum":" 1194","line":"                    MachineValue::WasmLocal(idx) => {"},
{"lineNum":" 1195","line":"                        wasm_locals[idx] = Some(*stack);"},
{"lineNum":" 1196","line":"                        stack = stack.offset(1);"},
{"lineNum":" 1197","line":"                    }"},
{"lineNum":" 1198","line":"                    MachineValue::TwoHalves(ref inner) => {"},
{"lineNum":" 1199","line":"                        let v = *stack;"},
{"lineNum":" 1200","line":"                        stack = stack.offset(1);"},
{"lineNum":" 1201","line":"                        match inner.0 {"},
{"lineNum":" 1202","line":"                            MachineValue::WasmStack(idx) => {"},
{"lineNum":" 1203","line":"                                wasm_stack[idx] = Some(v & 0xffffffffu64);"},
{"lineNum":" 1204","line":"                            }"},
{"lineNum":" 1205","line":"                            MachineValue::WasmLocal(idx) => {"},
{"lineNum":" 1206","line":"                                wasm_locals[idx] = Some(v & 0xffffffffu64);"},
{"lineNum":" 1207","line":"                            }"},
{"lineNum":" 1208","line":"                            MachineValue::VmctxDeref(_) => {}"},
{"lineNum":" 1209","line":"                            MachineValue::Undefined => {}"},
{"lineNum":" 1210","line":"                            _ => unimplemented!(\"TwoHalves.0 (read)\"),"},
{"lineNum":" 1211","line":"                        }"},
{"lineNum":" 1212","line":"                        match inner.1 {"},
{"lineNum":" 1213","line":"                            MachineValue::WasmStack(idx) => {"},
{"lineNum":" 1214","line":"                                wasm_stack[idx] = Some(v >> 32);"},
{"lineNum":" 1215","line":"                            }"},
{"lineNum":" 1216","line":"                            MachineValue::WasmLocal(idx) => {"},
{"lineNum":" 1217","line":"                                wasm_locals[idx] = Some(v >> 32);"},
{"lineNum":" 1218","line":"                            }"},
{"lineNum":" 1219","line":"                            MachineValue::VmctxDeref(_) => {}"},
{"lineNum":" 1220","line":"                            MachineValue::Undefined => {}"},
{"lineNum":" 1221","line":"                            _ => unimplemented!(\"TwoHalves.1 (read)\"),"},
{"lineNum":" 1222","line":"                        }"},
{"lineNum":" 1223","line":"                    }"},
{"lineNum":" 1224","line":"                }"},
{"lineNum":" 1225","line":"            }"},
{"lineNum":" 1226","line":""},
{"lineNum":" 1227","line":"            for (offset, v) in state.prev_frame.iter() {"},
{"lineNum":" 1228","line":"                let offset = (*offset + 2) as isize; // (saved_rbp, return_address)"},
{"lineNum":" 1229","line":"                match *v {"},
{"lineNum":" 1230","line":"                    MachineValue::WasmStack(idx) => {"},
{"lineNum":" 1231","line":"                        wasm_stack[idx] = Some(*stack.offset(offset));"},
{"lineNum":" 1232","line":"                    }"},
{"lineNum":" 1233","line":"                    MachineValue::WasmLocal(idx) => {"},
{"lineNum":" 1234","line":"                        wasm_locals[idx] = Some(*stack.offset(offset));"},
{"lineNum":" 1235","line":"                    }"},
{"lineNum":" 1236","line":"                    _ => unreachable!(\"values in prev frame can only be stack/local\"),"},
{"lineNum":" 1237","line":"                }"},
{"lineNum":" 1238","line":"            }"},
{"lineNum":" 1239","line":"            stack = stack.offset(1); // saved_rbp"},
{"lineNum":" 1240","line":""},
{"lineNum":" 1241","line":"            wasm_stack.truncate("},
{"lineNum":" 1242","line":"                wasm_stack"},
{"lineNum":" 1243","line":"                    .len()"},
{"lineNum":" 1244","line":"                    .checked_sub(state.wasm_stack_private_depth)"},
{"lineNum":" 1245","line":"                    .unwrap(),"},
{"lineNum":" 1246","line":"            );"},
{"lineNum":" 1247","line":""},
{"lineNum":" 1248","line":"            let wfs = WasmFunctionStateDump {"},
{"lineNum":" 1249","line":"                local_function_id: fsm.local_function_id,"},
{"lineNum":" 1250","line":"                wasm_inst_offset: state.wasm_inst_offset,"},
{"lineNum":" 1251","line":"                stack: wasm_stack,"},
{"lineNum":" 1252","line":"                locals: wasm_locals,"},
{"lineNum":" 1253","line":"            };"},
{"lineNum":" 1254","line":"            //println!(\"WFS = {:?}\", wfs);"},
{"lineNum":" 1255","line":"            results.push(wfs);"},
{"lineNum":" 1256","line":"        }"},
{"lineNum":" 1257","line":""},
{"lineNum":" 1258","line":"        unreachable!();"},
{"lineNum":" 1259","line":"    }"},
{"lineNum":" 1260","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "compile_debug", "date" : "2019-11-28 11:37:30", "instrumented" : 106, "covered" : 0,};
var merged_data = [];
