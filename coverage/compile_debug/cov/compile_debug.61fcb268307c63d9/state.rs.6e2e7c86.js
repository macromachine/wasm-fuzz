var data = {lines:[
{"lineNum":"    1","line":"use inkwell::{"},
{"lineNum":"    2","line":"    basic_block::BasicBlock,"},
{"lineNum":"    3","line":"    values::{BasicValue, BasicValueEnum, PhiValue},"},
{"lineNum":"    4","line":"};"},
{"lineNum":"    5","line":"use smallvec::SmallVec;"},
{"lineNum":"    6","line":"use std::cell::Cell;"},
{"lineNum":"    7","line":"use std::ops::{BitAnd, BitOr, BitOrAssign};"},
{"lineNum":"    8","line":"use wasmparser::BinaryReaderError;"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#[derive(Debug)]"},
{"lineNum":"   11","line":"pub enum ControlFrame<\'ctx> {"},
{"lineNum":"   12","line":"    Block {"},
{"lineNum":"   13","line":"        next: BasicBlock,"},
{"lineNum":"   14","line":"        phis: SmallVec<[PhiValue<\'ctx>; 1]>,"},
{"lineNum":"   15","line":"        stack_size_snapshot: usize,"},
{"lineNum":"   16","line":"    },"},
{"lineNum":"   17","line":"    Loop {"},
{"lineNum":"   18","line":"        body: BasicBlock,"},
{"lineNum":"   19","line":"        next: BasicBlock,"},
{"lineNum":"   20","line":"        phis: SmallVec<[PhiValue<\'ctx>; 1]>,"},
{"lineNum":"   21","line":"        stack_size_snapshot: usize,"},
{"lineNum":"   22","line":"    },"},
{"lineNum":"   23","line":"    IfElse {"},
{"lineNum":"   24","line":"        if_then: BasicBlock,"},
{"lineNum":"   25","line":"        if_else: BasicBlock,"},
{"lineNum":"   26","line":"        next: BasicBlock,"},
{"lineNum":"   27","line":"        phis: SmallVec<[PhiValue<\'ctx>; 1]>,"},
{"lineNum":"   28","line":"        stack_size_snapshot: usize,"},
{"lineNum":"   29","line":"        if_else_state: IfElseState,"},
{"lineNum":"   30","line":"    },"},
{"lineNum":"   31","line":"}"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"#[derive(Debug)]"},
{"lineNum":"   34","line":"pub enum IfElseState {"},
{"lineNum":"   35","line":"    If,"},
{"lineNum":"   36","line":"    Else,"},
{"lineNum":"   37","line":"}"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"impl<\'ctx> ControlFrame<\'ctx> {"},
{"lineNum":"   40","line":"    pub fn code_after(&self) -> &BasicBlock {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   41","line":"        match self {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   42","line":"            ControlFrame::Block { ref next, .. }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   43","line":"            | ControlFrame::Loop { ref next, .. }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"            | ControlFrame::IfElse { ref next, .. } => next,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   45","line":"        }"},
{"lineNum":"   46","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    pub fn br_dest(&self) -> &BasicBlock {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   49","line":"        match self {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   50","line":"            ControlFrame::Block { ref next, .. } | ControlFrame::IfElse { ref next, .. } => next,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   51","line":"            ControlFrame::Loop { ref body, .. } => body,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":"        }"},
{"lineNum":"   53","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"    pub fn phis(&self) -> &[PhiValue<\'ctx>] {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":"        match self {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   57","line":"            ControlFrame::Block { ref phis, .. }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   58","line":"            | ControlFrame::Loop { ref phis, .. }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   59","line":"            | ControlFrame::IfElse { ref phis, .. } => phis.as_slice(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   60","line":"        }"},
{"lineNum":"   61","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    pub fn is_loop(&self) -> bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   64","line":"        match self {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":"            ControlFrame::Loop { .. } => true,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   66","line":"            _ => false,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":"        }"},
{"lineNum":"   68","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   69","line":"}"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"#[derive(Debug, Default, Eq, PartialEq, Copy, Clone, Hash)]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   72","line":"pub struct ExtraInfo {"},
{"lineNum":"   73","line":"    state: u8,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"}"},
{"lineNum":"   75","line":"impl ExtraInfo {"},
{"lineNum":"   76","line":"    // This value is required to be arithmetic 32-bit NaN (or 32x4) by the WAsm"},
{"lineNum":"   77","line":"    // machine, but which might not be in the LLVM value. The conversion to"},
{"lineNum":"   78","line":"    // arithmetic NaN is pending. It is required for correctness."},
{"lineNum":"   79","line":"    //"},
{"lineNum":"   80","line":"    // When applied to a 64-bit value, this flag has no meaning and must be"},
{"lineNum":"   81","line":"    // ignored. It may be set in such cases to allow for common handling of"},
{"lineNum":"   82","line":"    // 32 and 64-bit operations."},
{"lineNum":"   83","line":"    pub const fn pending_f32_nan() -> ExtraInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"        ExtraInfo { state: 1 }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    // This value is required to be arithmetic 64-bit NaN (or 64x2) by the WAsm"},
{"lineNum":"   88","line":"    // machine, but which might not be in the LLVM value. The conversion to"},
{"lineNum":"   89","line":"    // arithmetic NaN is pending. It is required for correctness."},
{"lineNum":"   90","line":"    //"},
{"lineNum":"   91","line":"    // When applied to a 32-bit value, this flag has no meaning and must be"},
{"lineNum":"   92","line":"    // ignored. It may be set in such cases to allow for common handling of"},
{"lineNum":"   93","line":"    // 32 and 64-bit operations."},
{"lineNum":"   94","line":"    pub const fn pending_f64_nan() -> ExtraInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":"        ExtraInfo { state: 2 }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    // This value either does not contain a 32-bit NaN, or it contains an"},
{"lineNum":"   99","line":"    // arithmetic NaN. In SIMD, applies to all 4 lanes."},
{"lineNum":"  100","line":"    pub const fn arithmetic_f32() -> ExtraInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"        ExtraInfo { state: 4 }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    // This value either does not contain a 64-bit NaN, or it contains an"},
{"lineNum":"  105","line":"    // arithmetic NaN. In SIMD, applies to both lanes."},
{"lineNum":"  106","line":"    pub const fn arithmetic_f64() -> ExtraInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":"        ExtraInfo { state: 8 }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  108","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    pub const fn has_pending_f32_nan(&self) -> bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":"        self.state & ExtraInfo::pending_f32_nan().state != 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  113","line":"    pub const fn has_pending_f64_nan(&self) -> bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  114","line":"        self.state & ExtraInfo::pending_f64_nan().state != 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  116","line":"    pub const fn is_arithmetic_f32(&self) -> bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":"        self.state & ExtraInfo::arithmetic_f32().state != 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  119","line":"    pub const fn is_arithmetic_f64(&self) -> bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  120","line":"        self.state & ExtraInfo::arithmetic_f64().state != 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"    pub const fn strip_pending(&self) -> ExtraInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"        ExtraInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"            state: self.state","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  126","line":"                & !(ExtraInfo::pending_f32_nan().state | ExtraInfo::pending_f64_nan().state),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":"        }"},
{"lineNum":"  128","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  129","line":"}"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"// Union two ExtraInfos."},
{"lineNum":"  132","line":"impl BitOr for ExtraInfo {"},
{"lineNum":"  133","line":"    type Output = Self;"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"    fn bitor(self, other: Self) -> Self {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  136","line":"        debug_assert!(!(self.has_pending_f32_nan() && other.has_pending_f64_nan()));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  137","line":"        debug_assert!(!(self.has_pending_f64_nan() && other.has_pending_f32_nan()));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  138","line":"        ExtraInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  139","line":"            state: if self.is_arithmetic_f32() || other.is_arithmetic_f32() {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  140","line":"                ExtraInfo::arithmetic_f32().state","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  141","line":"            } else if self.has_pending_f32_nan() || other.has_pending_f32_nan() {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  142","line":"                ExtraInfo::pending_f32_nan().state","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"            } else {"},
{"lineNum":"  144","line":"                0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  145","line":"            } + if self.is_arithmetic_f64() || other.is_arithmetic_f64() {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  146","line":"                ExtraInfo::arithmetic_f64().state","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":"            } else if self.has_pending_f64_nan() || other.has_pending_f64_nan() {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  148","line":"                ExtraInfo::pending_f64_nan().state","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  149","line":"            } else {"},
{"lineNum":"  150","line":"                0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  151","line":"            },"},
{"lineNum":"  152","line":"        }"},
{"lineNum":"  153","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":"}"},
{"lineNum":"  155","line":"impl BitOrAssign for ExtraInfo {"},
{"lineNum":"  156","line":"    fn bitor_assign(&mut self, other: Self) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  157","line":"        *self = *self | other;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  159","line":"}"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"// Intersection for ExtraInfo."},
{"lineNum":"  162","line":"impl BitAnd for ExtraInfo {"},
{"lineNum":"  163","line":"    type Output = Self;"},
{"lineNum":"  164","line":"    fn bitand(self, other: Self) -> Self {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  165","line":"        // Pending canonicalizations are not safe to discard, or even reorder."},
{"lineNum":"  166","line":"        debug_assert!(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  167","line":"            self.has_pending_f32_nan() == other.has_pending_f32_nan()","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  168","line":"                || self.is_arithmetic_f32()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  169","line":"                || other.is_arithmetic_f32()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  170","line":"        );"},
{"lineNum":"  171","line":"        debug_assert!(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  172","line":"            self.has_pending_f64_nan() == other.has_pending_f64_nan()","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  173","line":"                || self.is_arithmetic_f64()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  174","line":"                || other.is_arithmetic_f64()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  175","line":"        );"},
{"lineNum":"  176","line":"        let info = match (","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  177","line":"            self.is_arithmetic_f32() && other.is_arithmetic_f32(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  178","line":"            self.is_arithmetic_f64() && other.is_arithmetic_f64(),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  179","line":"        ) {"},
{"lineNum":"  180","line":"            (false, false) => Default::default(),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  181","line":"            (true, false) => ExtraInfo::arithmetic_f32(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  182","line":"            (false, true) => ExtraInfo::arithmetic_f64(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"            (true, true) => ExtraInfo::arithmetic_f32() | ExtraInfo::arithmetic_f64(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  184","line":"        };"},
{"lineNum":"  185","line":"        let info = match (self.has_pending_f32_nan(), self.has_pending_f64_nan()) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  186","line":"            (false, false) => info,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  187","line":"            (true, false) => info | ExtraInfo::pending_f32_nan(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  188","line":"            (false, true) => info | ExtraInfo::pending_f64_nan(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  189","line":"            (true, true) => unreachable!(\"Can\'t form ExtraInfo with two pending canonicalizations\"),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  190","line":"        };"},
{"lineNum":"  191","line":"        info","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  193","line":"}"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"#[derive(Debug)]"},
{"lineNum":"  196","line":"pub struct State<\'ctx> {"},
{"lineNum":"  197","line":"    pub stack: Vec<(BasicValueEnum<\'ctx>, ExtraInfo)>,"},
{"lineNum":"  198","line":"    control_stack: Vec<ControlFrame<\'ctx>>,"},
{"lineNum":"  199","line":"    value_counter: Cell<usize>,"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    pub reachable: bool,"},
{"lineNum":"  202","line":"}"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"impl<\'ctx> State<\'ctx> {"},
{"lineNum":"  205","line":"    pub fn new() -> Self {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  206","line":"        Self {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  207","line":"            stack: vec![],","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  208","line":"            control_stack: vec![],","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  209","line":"            value_counter: Cell::new(0),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  210","line":"            reachable: true,"},
{"lineNum":"  211","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  212","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"    pub fn reset_stack(&mut self, frame: &ControlFrame<\'ctx>) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  215","line":"        let stack_size_snapshot = match frame {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  216","line":"            ControlFrame::Block {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  217","line":"                stack_size_snapshot,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  218","line":"                .."},
{"lineNum":"  219","line":"            }"},
{"lineNum":"  220","line":"            | ControlFrame::Loop {"},
{"lineNum":"  221","line":"                stack_size_snapshot,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  222","line":"                .."},
{"lineNum":"  223","line":"            }"},
{"lineNum":"  224","line":"            | ControlFrame::IfElse {"},
{"lineNum":"  225","line":"                stack_size_snapshot,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  226","line":"                .."},
{"lineNum":"  227","line":"            } => *stack_size_snapshot,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  228","line":"        };"},
{"lineNum":"  229","line":"        self.stack.truncate(stack_size_snapshot);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  230","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"    pub fn outermost_frame(&self) -> Result<&ControlFrame<\'ctx>, BinaryReaderError> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  233","line":"        self.control_stack.get(0).ok_or(BinaryReaderError {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  234","line":"            message: \"invalid control stack depth\","},
{"lineNum":"  235","line":"            offset: -1isize as usize,"},
{"lineNum":"  236","line":"        })"},
{"lineNum":"  237","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"    pub fn frame_at_depth(&self, depth: u32) -> Result<&ControlFrame<\'ctx>, BinaryReaderError> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  240","line":"        let index = self.control_stack.len() - 1 - (depth as usize);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  241","line":"        self.control_stack.get(index).ok_or(BinaryReaderError {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  242","line":"            message: \"invalid control stack depth\","},
{"lineNum":"  243","line":"            offset: -1isize as usize,"},
{"lineNum":"  244","line":"        })"},
{"lineNum":"  245","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"    pub fn frame_at_depth_mut(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  248","line":"        &mut self,"},
{"lineNum":"  249","line":"        depth: u32,"},
{"lineNum":"  250","line":"    ) -> Result<&mut ControlFrame<\'ctx>, BinaryReaderError> {"},
{"lineNum":"  251","line":"        let index = self.control_stack.len() - 1 - (depth as usize);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  252","line":"        self.control_stack.get_mut(index).ok_or(BinaryReaderError {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  253","line":"            message: \"invalid control stack depth\","},
{"lineNum":"  254","line":"            offset: -1isize as usize,"},
{"lineNum":"  255","line":"        })"},
{"lineNum":"  256","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    pub fn pop_frame(&mut self) -> Result<ControlFrame<\'ctx>, BinaryReaderError> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  259","line":"        self.control_stack.pop().ok_or(BinaryReaderError {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":"            message: \"cannot pop from control stack\","},
{"lineNum":"  261","line":"            offset: -1isize as usize,"},
{"lineNum":"  262","line":"        })"},
{"lineNum":"  263","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"    pub fn var_name(&self) -> String {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  266","line":"        let counter = self.value_counter.get();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  267","line":"        let s = format!(\"s{}\", counter);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  268","line":"        self.value_counter.set(counter + 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  269","line":"        s","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  270","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"    pub fn push1<T: BasicValue<\'ctx>>(&mut self, value: T) {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  273","line":"        self.push1_extra(value, Default::default());","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  274","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"    pub fn push1_extra<T: BasicValue<\'ctx>>(&mut self, value: T, info: ExtraInfo) {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  277","line":"        self.stack.push((value.as_basic_value_enum(), info));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  278","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"    pub fn pop1(&mut self) -> Result<BasicValueEnum<\'ctx>, BinaryReaderError> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  281","line":"        Ok(self.pop1_extra()?.0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  282","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"    pub fn pop1_extra(&mut self) -> Result<(BasicValueEnum<\'ctx>, ExtraInfo), BinaryReaderError> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  285","line":"        self.stack.pop().ok_or(BinaryReaderError {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  286","line":"            message: \"invalid value stack\","},
{"lineNum":"  287","line":"            offset: -1isize as usize,"},
{"lineNum":"  288","line":"        })"},
{"lineNum":"  289","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"    pub fn pop2(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  292","line":"        &mut self,"},
{"lineNum":"  293","line":"    ) -> Result<(BasicValueEnum<\'ctx>, BasicValueEnum<\'ctx>), BinaryReaderError> {"},
{"lineNum":"  294","line":"        let v2 = self.pop1()?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  295","line":"        let v1 = self.pop1()?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  296","line":"        Ok((v1, v2))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  297","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"    pub fn pop2_extra(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  300","line":"        &mut self,"},
{"lineNum":"  301","line":"    ) -> Result<"},
{"lineNum":"  302","line":"        ("},
{"lineNum":"  303","line":"            (BasicValueEnum<\'ctx>, ExtraInfo),"},
{"lineNum":"  304","line":"            (BasicValueEnum<\'ctx>, ExtraInfo),"},
{"lineNum":"  305","line":"        ),"},
{"lineNum":"  306","line":"        BinaryReaderError,"},
{"lineNum":"  307","line":"    > {"},
{"lineNum":"  308","line":"        let v2 = self.pop1_extra()?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  309","line":"        let v1 = self.pop1_extra()?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  310","line":"        Ok((v1, v2))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  311","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"    pub fn pop3_extra(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  314","line":"        &mut self,"},
{"lineNum":"  315","line":"    ) -> Result<"},
{"lineNum":"  316","line":"        ("},
{"lineNum":"  317","line":"            (BasicValueEnum<\'ctx>, ExtraInfo),"},
{"lineNum":"  318","line":"            (BasicValueEnum<\'ctx>, ExtraInfo),"},
{"lineNum":"  319","line":"            (BasicValueEnum<\'ctx>, ExtraInfo),"},
{"lineNum":"  320","line":"        ),"},
{"lineNum":"  321","line":"        BinaryReaderError,"},
{"lineNum":"  322","line":"    > {"},
{"lineNum":"  323","line":"        let v3 = self.pop1_extra()?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  324","line":"        let v2 = self.pop1_extra()?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  325","line":"        let v1 = self.pop1_extra()?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  326","line":"        Ok((v1, v2, v3))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  327","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"    pub fn peek1_extra(&self) -> Result<(BasicValueEnum<\'ctx>, ExtraInfo), BinaryReaderError> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  330","line":"        self.stack","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  331","line":"            .get(self.stack.len() - 1)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  332","line":"            .ok_or(BinaryReaderError {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  333","line":"                message: \"invalid value stack\","},
{"lineNum":"  334","line":"                offset: -1isize as usize,"},
{"lineNum":"  335","line":"            })"},
{"lineNum":"  336","line":"            .map(|v| *v)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  337","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"    pub fn peekn(&self, n: usize) -> Result<Vec<BasicValueEnum<\'ctx>>, BinaryReaderError> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  340","line":"        Ok(self.peekn_extra(n)?.iter().map(|x| x.0).collect())","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  341","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"    pub fn peekn_extra(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  344","line":"        &self,"},
{"lineNum":"  345","line":"        n: usize,"},
{"lineNum":"  346","line":"    ) -> Result<&[(BasicValueEnum<\'ctx>, ExtraInfo)], BinaryReaderError> {"},
{"lineNum":"  347","line":"        let new_len = self.stack.len().checked_sub(n).ok_or(BinaryReaderError {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  348","line":"            message: \"invalid value stack\","},
{"lineNum":"  349","line":"            offset: -1isize as usize,"},
{"lineNum":"  350","line":"        })?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"        Ok(&self.stack[new_len..])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  353","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"    pub fn popn_save_extra(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  356","line":"        &mut self,"},
{"lineNum":"  357","line":"        n: usize,"},
{"lineNum":"  358","line":"    ) -> Result<Vec<(BasicValueEnum<\'ctx>, ExtraInfo)>, BinaryReaderError> {"},
{"lineNum":"  359","line":"        let v = self.peekn_extra(n)?.to_vec();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  360","line":"        self.popn(n)?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  361","line":"        Ok(v)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  362","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"    pub fn popn(&mut self, n: usize) -> Result<(), BinaryReaderError> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  365","line":"        if self.stack.len() < n {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  366","line":"            return Err(BinaryReaderError {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  367","line":"                message: \"invalid value stack\","},
{"lineNum":"  368","line":"                offset: -1isize as usize,"},
{"lineNum":"  369","line":"            });"},
{"lineNum":"  370","line":"        }"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"        let new_len = self.stack.len() - n;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  373","line":"        self.stack.truncate(new_len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  374","line":"        Ok(())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  375","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"    pub fn push_block(&mut self, next: BasicBlock, phis: SmallVec<[PhiValue<\'ctx>; 1]>) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  378","line":"        self.control_stack.push(ControlFrame::Block {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  379","line":"            next,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  380","line":"            phis,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  381","line":"            stack_size_snapshot: self.stack.len(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  382","line":"        });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  383","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"    pub fn push_loop(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  386","line":"        &mut self,"},
{"lineNum":"  387","line":"        body: BasicBlock,"},
{"lineNum":"  388","line":"        next: BasicBlock,"},
{"lineNum":"  389","line":"        phis: SmallVec<[PhiValue<\'ctx>; 1]>,"},
{"lineNum":"  390","line":"    ) {"},
{"lineNum":"  391","line":"        self.control_stack.push(ControlFrame::Loop {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  392","line":"            body,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  393","line":"            next,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  394","line":"            phis,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  395","line":"            stack_size_snapshot: self.stack.len(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  396","line":"        });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  397","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"    pub fn push_if(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  400","line":"        &mut self,"},
{"lineNum":"  401","line":"        if_then: BasicBlock,"},
{"lineNum":"  402","line":"        if_else: BasicBlock,"},
{"lineNum":"  403","line":"        next: BasicBlock,"},
{"lineNum":"  404","line":"        phis: SmallVec<[PhiValue<\'ctx>; 1]>,"},
{"lineNum":"  405","line":"    ) {"},
{"lineNum":"  406","line":"        self.control_stack.push(ControlFrame::IfElse {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  407","line":"            if_then,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  408","line":"            if_else,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  409","line":"            next,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  410","line":"            phis,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  411","line":"            stack_size_snapshot: self.stack.len(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  412","line":"            if_else_state: IfElseState::If,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  413","line":"        });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  414","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  415","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "compile_debug", "date" : "2019-11-28 11:37:30", "instrumented" : 209, "covered" : 0,};
var merged_data = [];
