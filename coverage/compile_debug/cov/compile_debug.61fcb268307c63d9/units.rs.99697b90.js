var data = {lines:[
{"lineNum":"    1","line":"//! The units module provides common WebAssembly units like `Pages` and conversion functions into"},
{"lineNum":"    2","line":"//! other units."},
{"lineNum":"    3","line":"use crate::error::PageError;"},
{"lineNum":"    4","line":"use std::{"},
{"lineNum":"    5","line":"    fmt,"},
{"lineNum":"    6","line":"    ops::{Add, Sub},"},
{"lineNum":"    7","line":"};"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"/// The page size in bytes of a wasm page."},
{"lineNum":"   10","line":"pub const WASM_PAGE_SIZE: usize = 65_536;"},
{"lineNum":"   11","line":"/// Tbe max number of wasm pages allowed."},
{"lineNum":"   12","line":"pub const WASM_MAX_PAGES: usize = 65_536;"},
{"lineNum":"   13","line":"// From emscripten resize_heap implementation"},
{"lineNum":"   14","line":"/// The minimum number of wasm pages allowed."},
{"lineNum":"   15","line":"pub const WASM_MIN_PAGES: usize = 256;"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"/// Units of WebAssembly pages (as specified to be 65,536 bytes)."},
{"lineNum":"   18","line":"#[derive(Serialize, Deserialize, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   19","line":"pub struct Pages(pub u32);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"impl Pages {"},
{"lineNum":"   22","line":"    /// Checked add of Pages to Pages."},
{"lineNum":"   23","line":"    pub fn checked_add(self, rhs: Pages) -> Result<Pages, PageError> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   24","line":"        let added = (self.0 as usize) + (rhs.0 as usize);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   25","line":"        if added <= WASM_MAX_PAGES {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   26","line":"            Ok(Pages(added as u32))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   27","line":"        } else {"},
{"lineNum":"   28","line":"            Err(PageError::ExceededMaxPages(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":"                self.0 as usize,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   30","line":"                rhs.0 as usize,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   31","line":"                added,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   32","line":"            ))"},
{"lineNum":"   33","line":"        }"},
{"lineNum":"   34","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    /// Calculate number of bytes from pages."},
{"lineNum":"   37","line":"    pub fn bytes(self) -> Bytes {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   38","line":"        self.into()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   39","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   40","line":"}"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"impl fmt::Debug for Pages {"},
{"lineNum":"   43","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"        write!(f, \"{} pages\", self.0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   45","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   46","line":"}"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"/// Units of WebAssembly memory in terms of 8-bit bytes."},
{"lineNum":"   49","line":"#[derive(Serialize, Deserialize, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]"},
{"lineNum":"   50","line":"pub struct Bytes(pub usize);"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"impl fmt::Debug for Bytes {"},
{"lineNum":"   53","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"   54","line":"        write!(f, \"{} bytes\", self.0)"},
{"lineNum":"   55","line":"    }"},
{"lineNum":"   56","line":"}"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"impl From<Pages> for Bytes {"},
{"lineNum":"   59","line":"    fn from(pages: Pages) -> Bytes {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":"        Bytes((pages.0 as usize) * WASM_PAGE_SIZE)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   61","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   62","line":"}"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"impl<T> Sub<T> for Pages"},
{"lineNum":"   65","line":"where"},
{"lineNum":"   66","line":"    T: Into<Pages>,"},
{"lineNum":"   67","line":"{"},
{"lineNum":"   68","line":"    type Output = Pages;"},
{"lineNum":"   69","line":"    fn sub(self, rhs: T) -> Pages {"},
{"lineNum":"   70","line":"        Pages(self.0 - rhs.into().0)"},
{"lineNum":"   71","line":"    }"},
{"lineNum":"   72","line":"}"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"impl<T> Add<T> for Pages"},
{"lineNum":"   75","line":"where"},
{"lineNum":"   76","line":"    T: Into<Pages>,"},
{"lineNum":"   77","line":"{"},
{"lineNum":"   78","line":"    type Output = Pages;"},
{"lineNum":"   79","line":"    fn add(self, rhs: T) -> Pages {"},
{"lineNum":"   80","line":"        Pages(self.0 + rhs.into().0)"},
{"lineNum":"   81","line":"    }"},
{"lineNum":"   82","line":"}"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"impl From<Bytes> for Pages {"},
{"lineNum":"   85","line":"    fn from(bytes: Bytes) -> Pages {"},
{"lineNum":"   86","line":"        Pages((bytes.0 / WASM_PAGE_SIZE) as u32)"},
{"lineNum":"   87","line":"    }"},
{"lineNum":"   88","line":"}"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"impl<T> Sub<T> for Bytes"},
{"lineNum":"   91","line":"where"},
{"lineNum":"   92","line":"    T: Into<Bytes>,"},
{"lineNum":"   93","line":"{"},
{"lineNum":"   94","line":"    type Output = Bytes;"},
{"lineNum":"   95","line":"    fn sub(self, rhs: T) -> Bytes {"},
{"lineNum":"   96","line":"        Bytes(self.0 - rhs.into().0)"},
{"lineNum":"   97","line":"    }"},
{"lineNum":"   98","line":"}"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"impl<T> Add<T> for Bytes"},
{"lineNum":"  101","line":"where"},
{"lineNum":"  102","line":"    T: Into<Bytes>,"},
{"lineNum":"  103","line":"{"},
{"lineNum":"  104","line":"    type Output = Bytes;"},
{"lineNum":"  105","line":"    fn add(self, rhs: T) -> Bytes {"},
{"lineNum":"  106","line":"        Bytes(self.0 + rhs.into().0)"},
{"lineNum":"  107","line":"    }"},
{"lineNum":"  108","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "compile_debug", "date" : "2019-11-28 11:37:30", "instrumented" : 20, "covered" : 0,};
var merged_data = [];
