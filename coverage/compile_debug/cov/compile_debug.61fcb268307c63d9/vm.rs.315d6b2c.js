var data = {lines:[
{"lineNum":"    1","line":"//! The runtime vm module contains data structures and helper functions used during runtime to"},
{"lineNum":"    2","line":"//! execute wasm instance functions."},
{"lineNum":"    3","line":"pub use crate::backing::{ImportBacking, LocalBacking, INTERNALS_SIZE};"},
{"lineNum":"    4","line":"use crate::{"},
{"lineNum":"    5","line":"    error::CallResult,"},
{"lineNum":"    6","line":"    instance::call_func_with_index_inner,"},
{"lineNum":"    7","line":"    memory::{Memory, MemoryType},"},
{"lineNum":"    8","line":"    module::{ModuleInfo, ModuleInner},"},
{"lineNum":"    9","line":"    sig_registry::SigRegistry,"},
{"lineNum":"   10","line":"    structures::TypedIndex,"},
{"lineNum":"   11","line":"    types::{LocalOrImport, MemoryIndex, TableIndex, Value},"},
{"lineNum":"   12","line":"    vmcalls,"},
{"lineNum":"   13","line":"};"},
{"lineNum":"   14","line":"use std::{"},
{"lineNum":"   15","line":"    cell::UnsafeCell,"},
{"lineNum":"   16","line":"    ffi::c_void,"},
{"lineNum":"   17","line":"    mem,"},
{"lineNum":"   18","line":"    ptr::{self, NonNull},"},
{"lineNum":"   19","line":"    sync::atomic::{AtomicUsize, Ordering},"},
{"lineNum":"   20","line":"    sync::Once,"},
{"lineNum":"   21","line":"};"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"use std::collections::HashMap;"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/// The context of the currently running WebAssembly instance."},
{"lineNum":"   26","line":"///"},
{"lineNum":"   27","line":"/// This is implicitly passed to every WebAssembly function."},
{"lineNum":"   28","line":"/// Since this is per-instance, each field has a statically"},
{"lineNum":"   29","line":"/// (as in after compiling the wasm) known size, so no"},
{"lineNum":"   30","line":"/// runtime checks are necessary."},
{"lineNum":"   31","line":"///"},
{"lineNum":"   32","line":"/// While the runtime currently just passes this around"},
{"lineNum":"   33","line":"/// as the first, implicit parameter of every function,"},
{"lineNum":"   34","line":"/// it may someday be pinned to a register (especially"},
{"lineNum":"   35","line":"/// on arm, which has a ton of registers) to reduce"},
{"lineNum":"   36","line":"/// register shuffling."},
{"lineNum":"   37","line":"#[derive(Debug)]"},
{"lineNum":"   38","line":"#[repr(C)]"},
{"lineNum":"   39","line":"pub struct Ctx {"},
{"lineNum":"   40","line":"    // `internal` must be the first field of `Ctx`."},
{"lineNum":"   41","line":"    /// InternalCtx data field"},
{"lineNum":"   42","line":"    pub internal: InternalCtx,"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    pub(crate) local_functions: *const *const Func,"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    /// These are pointers to things that are known to be owned"},
{"lineNum":"   47","line":"    /// by the owning `Instance`."},
{"lineNum":"   48","line":"    pub local_backing: *mut LocalBacking,"},
{"lineNum":"   49","line":"    /// Mutable pointer to import data"},
{"lineNum":"   50","line":"    pub import_backing: *mut ImportBacking,"},
{"lineNum":"   51","line":"    /// Const pointer to module inner data"},
{"lineNum":"   52","line":"    pub module: *const ModuleInner,"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"    /// This is intended to be user-supplied, per-instance"},
{"lineNum":"   55","line":"    /// contextual data. There are currently some issue with it,"},
{"lineNum":"   56","line":"    /// notably that it cannot be set before running the `start`"},
{"lineNum":"   57","line":"    /// function in a WebAssembly module."},
{"lineNum":"   58","line":"    ///"},
{"lineNum":"   59","line":"    /// [#219](https://github.com/wasmerio/wasmer/pull/219) fixes that"},
{"lineNum":"   60","line":"    /// issue, as well as allowing the user to have *per-function*"},
{"lineNum":"   61","line":"    /// context, instead of just per-instance."},
{"lineNum":"   62","line":"    pub data: *mut c_void,"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    /// If there\'s a function set in this field, it gets called"},
{"lineNum":"   65","line":"    /// when the context is destructed, e.g. when an `Instance`"},
{"lineNum":"   66","line":"    /// is dropped."},
{"lineNum":"   67","line":"    pub data_finalizer: Option<fn(data: *mut c_void)>,"},
{"lineNum":"   68","line":"}"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"/// When an instance context is destructed, we\'re calling its `data_finalizer`"},
{"lineNum":"   71","line":"/// In order avoid leaking resources."},
{"lineNum":"   72","line":"///"},
{"lineNum":"   73","line":"/// Implementing the `data_finalizer` function is the responsibility of the `wasmer` end-user."},
{"lineNum":"   74","line":"///"},
{"lineNum":"   75","line":"/// See test: `test_data_finalizer` as an example"},
{"lineNum":"   76","line":"impl Drop for Ctx {"},
{"lineNum":"   77","line":"    fn drop(&mut self) {"},
{"lineNum":"   78","line":"        if let Some(ref finalizer) = self.data_finalizer {"},
{"lineNum":"   79","line":"            finalizer(self.data);"},
{"lineNum":"   80","line":"        }"},
{"lineNum":"   81","line":"    }"},
{"lineNum":"   82","line":"}"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"/// The internal context of the currently running WebAssembly instance."},
{"lineNum":"   85","line":"///"},
{"lineNum":"   86","line":"///"},
{"lineNum":"   87","line":"#[doc(hidden)]"},
{"lineNum":"   88","line":"#[derive(Debug)]"},
{"lineNum":"   89","line":"#[repr(C)]"},
{"lineNum":"   90","line":"pub struct InternalCtx {"},
{"lineNum":"   91","line":"    /// A pointer to an array of locally-defined memories, indexed by `MemoryIndex`."},
{"lineNum":"   92","line":"    pub memories: *mut *mut LocalMemory,"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    /// A pointer to an array of locally-defined tables, indexed by `TableIndex`."},
{"lineNum":"   95","line":"    pub tables: *mut *mut LocalTable,"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    /// A pointer to an array of locally-defined globals, indexed by `GlobalIndex`."},
{"lineNum":"   98","line":"    pub globals: *mut *mut LocalGlobal,"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    /// A pointer to an array of imported memories, indexed by `MemoryIndex`,"},
{"lineNum":"  101","line":"    pub imported_memories: *mut *mut LocalMemory,"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    /// A pointer to an array of imported tables, indexed by `TableIndex`."},
{"lineNum":"  104","line":"    pub imported_tables: *mut *mut LocalTable,"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    /// A pointer to an array of imported globals, indexed by `GlobalIndex`."},
{"lineNum":"  107","line":"    pub imported_globals: *mut *mut LocalGlobal,"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    /// A pointer to an array of imported functions, indexed by `FuncIndex`."},
{"lineNum":"  110","line":"    pub imported_funcs: *mut ImportedFunc,"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    /// A pointer to an array of signature ids. Conceptually, this maps"},
{"lineNum":"  113","line":"    /// from a static, module-local signature id to a runtime-global"},
{"lineNum":"  114","line":"    /// signature id. This is used to allow call-indirect to other"},
{"lineNum":"  115","line":"    /// modules safely."},
{"lineNum":"  116","line":"    pub dynamic_sigindices: *const SigId,"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    /// Const pointer to Intrinsics."},
{"lineNum":"  119","line":"    pub intrinsics: *const Intrinsics,"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"    /// Stack lower bound."},
{"lineNum":"  122","line":"    pub stack_lower_bound: *mut u8,"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"    /// Mutable pointer to memory base."},
{"lineNum":"  125","line":"    pub memory_base: *mut u8,"},
{"lineNum":"  126","line":"    /// Memory bound."},
{"lineNum":"  127","line":"    pub memory_bound: usize,"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    /// Mutable pointer to internal fields."},
{"lineNum":"  130","line":"    pub internals: *mut [u64; INTERNALS_SIZE], // TODO: Make this dynamic?"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    /// Interrupt signal mem."},
{"lineNum":"  133","line":"    pub interrupt_signal_mem: *mut u8,"},
{"lineNum":"  134","line":"}"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"static INTERNAL_FIELDS: AtomicUsize = AtomicUsize::new(0);"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"/// An internal field."},
{"lineNum":"  139","line":"pub struct InternalField {"},
{"lineNum":"  140","line":"    /// Init once field."},
{"lineNum":"  141","line":"    init: Once,"},
{"lineNum":"  142","line":"    /// Inner field."},
{"lineNum":"  143","line":"    inner: UnsafeCell<usize>,"},
{"lineNum":"  144","line":"}"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"unsafe impl Send for InternalField {}"},
{"lineNum":"  147","line":"unsafe impl Sync for InternalField {}"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"impl InternalField {"},
{"lineNum":"  150","line":"    /// Allocate and return an `InternalField`."},
{"lineNum":"  151","line":"    pub const fn allocate() -> InternalField {"},
{"lineNum":"  152","line":"        InternalField {"},
{"lineNum":"  153","line":"            init: Once::new(),"},
{"lineNum":"  154","line":"            inner: UnsafeCell::new(::std::usize::MAX),"},
{"lineNum":"  155","line":"        }"},
{"lineNum":"  156","line":"    }"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    /// Get the index of this `InternalField`."},
{"lineNum":"  159","line":"    pub fn index(&self) -> usize {"},
{"lineNum":"  160","line":"        let inner: *mut usize = self.inner.get();"},
{"lineNum":"  161","line":"        self.init.call_once(|| {"},
{"lineNum":"  162","line":"            let idx = INTERNAL_FIELDS.fetch_add(1, Ordering::SeqCst);"},
{"lineNum":"  163","line":"            if idx >= INTERNALS_SIZE {"},
{"lineNum":"  164","line":"                INTERNAL_FIELDS.fetch_sub(1, Ordering::SeqCst);"},
{"lineNum":"  165","line":"                panic!(\"at most {} internal fields are supported\", INTERNALS_SIZE);"},
{"lineNum":"  166","line":"            } else {"},
{"lineNum":"  167","line":"                unsafe {"},
{"lineNum":"  168","line":"                    *inner = idx;"},
{"lineNum":"  169","line":"                }"},
{"lineNum":"  170","line":"            }"},
{"lineNum":"  171","line":"        });"},
{"lineNum":"  172","line":"        unsafe { *inner }"},
{"lineNum":"  173","line":"    }"},
{"lineNum":"  174","line":"}"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"/// A container for VM instrinsic functions"},
{"lineNum":"  177","line":"#[repr(C)]"},
{"lineNum":"  178","line":"pub struct Intrinsics {"},
{"lineNum":"  179","line":"    /// Const pointer to memory grow `Func`."},
{"lineNum":"  180","line":"    pub memory_grow: *const Func,"},
{"lineNum":"  181","line":"    /// Const pointer to memory size `Func`."},
{"lineNum":"  182","line":"    pub memory_size: *const Func,"},
{"lineNum":"  183","line":"    /*pub memory_grow: unsafe extern \"C\" fn("},
{"lineNum":"  184","line":"        ctx: &mut Ctx,"},
{"lineNum":"  185","line":"        memory_index: usize,"},
{"lineNum":"  186","line":"        delta: Pages,"},
{"lineNum":"  187","line":"    ) -> i32,"},
{"lineNum":"  188","line":"    pub memory_size: unsafe extern \"C\" fn("},
{"lineNum":"  189","line":"        ctx: &Ctx,"},
{"lineNum":"  190","line":"        memory_index: usize,"},
{"lineNum":"  191","line":"    ) -> Pages,*/"},
{"lineNum":"  192","line":"}"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"unsafe impl Send for Intrinsics {}"},
{"lineNum":"  195","line":"unsafe impl Sync for Intrinsics {}"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"impl Intrinsics {"},
{"lineNum":"  198","line":"    /// Memory grow offset"},
{"lineNum":"  199","line":"    #[allow(clippy::erasing_op)]"},
{"lineNum":"  200","line":"    pub fn offset_memory_grow() -> u8 {"},
{"lineNum":"  201","line":"        (0 * ::std::mem::size_of::<usize>()) as u8"},
{"lineNum":"  202","line":"    }"},
{"lineNum":"  203","line":"    /// Memory size offset"},
{"lineNum":"  204","line":"    pub fn offset_memory_size() -> u8 {"},
{"lineNum":"  205","line":"        (1 * ::std::mem::size_of::<usize>()) as u8"},
{"lineNum":"  206","line":"    }"},
{"lineNum":"  207","line":"}"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"/// Local static memory intrinsics"},
{"lineNum":"  210","line":"pub static INTRINSICS_LOCAL_STATIC_MEMORY: Intrinsics = Intrinsics {"},
{"lineNum":"  211","line":"    memory_grow: vmcalls::local_static_memory_grow as _,"},
{"lineNum":"  212","line":"    memory_size: vmcalls::local_static_memory_size as _,"},
{"lineNum":"  213","line":"};"},
{"lineNum":"  214","line":"/// Local dynamic memory intrinsics"},
{"lineNum":"  215","line":"pub static INTRINSICS_LOCAL_DYNAMIC_MEMORY: Intrinsics = Intrinsics {"},
{"lineNum":"  216","line":"    memory_grow: vmcalls::local_dynamic_memory_grow as _,"},
{"lineNum":"  217","line":"    memory_size: vmcalls::local_dynamic_memory_size as _,"},
{"lineNum":"  218","line":"};"},
{"lineNum":"  219","line":"/// Imported static memory intrinsics"},
{"lineNum":"  220","line":"pub static INTRINSICS_IMPORTED_STATIC_MEMORY: Intrinsics = Intrinsics {"},
{"lineNum":"  221","line":"    memory_grow: vmcalls::imported_static_memory_grow as _,"},
{"lineNum":"  222","line":"    memory_size: vmcalls::imported_static_memory_size as _,"},
{"lineNum":"  223","line":"};"},
{"lineNum":"  224","line":"/// Imported dynamic memory intrinsics"},
{"lineNum":"  225","line":"pub static INTRINSICS_IMPORTED_DYNAMIC_MEMORY: Intrinsics = Intrinsics {"},
{"lineNum":"  226","line":"    memory_grow: vmcalls::imported_dynamic_memory_grow as _,"},
{"lineNum":"  227","line":"    memory_size: vmcalls::imported_dynamic_memory_size as _,"},
{"lineNum":"  228","line":"};"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"fn get_intrinsics_for_module(m: &ModuleInfo) -> *const Intrinsics {"},
{"lineNum":"  231","line":"    if m.memories.len() == 0 && m.imported_memories.len() == 0 {"},
{"lineNum":"  232","line":"        ::std::ptr::null()"},
{"lineNum":"  233","line":"    } else {"},
{"lineNum":"  234","line":"        match MemoryIndex::new(0).local_or_import(m) {"},
{"lineNum":"  235","line":"            LocalOrImport::Local(local_mem_index) => {"},
{"lineNum":"  236","line":"                let mem_desc = &m.memories[local_mem_index];"},
{"lineNum":"  237","line":"                match mem_desc.memory_type() {"},
{"lineNum":"  238","line":"                    MemoryType::Dynamic => &INTRINSICS_LOCAL_DYNAMIC_MEMORY,"},
{"lineNum":"  239","line":"                    MemoryType::Static => &INTRINSICS_LOCAL_STATIC_MEMORY,"},
{"lineNum":"  240","line":"                    MemoryType::SharedStatic => &INTRINSICS_LOCAL_STATIC_MEMORY,"},
{"lineNum":"  241","line":"                }"},
{"lineNum":"  242","line":"            }"},
{"lineNum":"  243","line":"            LocalOrImport::Import(import_mem_index) => {"},
{"lineNum":"  244","line":"                let mem_desc = &m.imported_memories[import_mem_index].1;"},
{"lineNum":"  245","line":"                match mem_desc.memory_type() {"},
{"lineNum":"  246","line":"                    MemoryType::Dynamic => &INTRINSICS_IMPORTED_DYNAMIC_MEMORY,"},
{"lineNum":"  247","line":"                    MemoryType::Static => &INTRINSICS_IMPORTED_STATIC_MEMORY,"},
{"lineNum":"  248","line":"                    MemoryType::SharedStatic => &INTRINSICS_IMPORTED_STATIC_MEMORY,"},
{"lineNum":"  249","line":"                }"},
{"lineNum":"  250","line":"            }"},
{"lineNum":"  251","line":"        }"},
{"lineNum":"  252","line":"    }"},
{"lineNum":"  253","line":"}"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"#[cfg(all(unix, target_arch = \"x86_64\"))]"},
{"lineNum":"  256","line":"fn get_interrupt_signal_mem() -> *mut u8 {"},
{"lineNum":"  257","line":"    unsafe { crate::fault::get_wasm_interrupt_signal_mem() }"},
{"lineNum":"  258","line":"}"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"#[cfg(not(all(unix, target_arch = \"x86_64\")))]"},
{"lineNum":"  261","line":"fn get_interrupt_signal_mem() -> *mut u8 {"},
{"lineNum":"  262","line":"    static mut REGION: u64 = 0;"},
{"lineNum":"  263","line":"    unsafe { &mut REGION as *mut u64 as *mut u8 }"},
{"lineNum":"  264","line":"}"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"impl Ctx {"},
{"lineNum":"  267","line":"    #[doc(hidden)]"},
{"lineNum":"  268","line":"    pub unsafe fn new("},
{"lineNum":"  269","line":"        local_backing: &mut LocalBacking,"},
{"lineNum":"  270","line":"        import_backing: &mut ImportBacking,"},
{"lineNum":"  271","line":"        module: &ModuleInner,"},
{"lineNum":"  272","line":"    ) -> Self {"},
{"lineNum":"  273","line":"        let (mem_base, mem_bound): (*mut u8, usize) ="},
{"lineNum":"  274","line":"            if module.info.memories.len() == 0 && module.info.imported_memories.len() == 0 {"},
{"lineNum":"  275","line":"                (::std::ptr::null_mut(), 0)"},
{"lineNum":"  276","line":"            } else {"},
{"lineNum":"  277","line":"                let mem = match MemoryIndex::new(0).local_or_import(&module.info) {"},
{"lineNum":"  278","line":"                    LocalOrImport::Local(index) => local_backing.vm_memories[index],"},
{"lineNum":"  279","line":"                    LocalOrImport::Import(index) => import_backing.vm_memories[index],"},
{"lineNum":"  280","line":"                };"},
{"lineNum":"  281","line":"                ((*mem).base, (*mem).bound)"},
{"lineNum":"  282","line":"            };"},
{"lineNum":"  283","line":"        Self {"},
{"lineNum":"  284","line":"            internal: InternalCtx {"},
{"lineNum":"  285","line":"                memories: local_backing.vm_memories.as_mut_ptr(),"},
{"lineNum":"  286","line":"                tables: local_backing.vm_tables.as_mut_ptr(),"},
{"lineNum":"  287","line":"                globals: local_backing.vm_globals.as_mut_ptr(),"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"                imported_memories: import_backing.vm_memories.as_mut_ptr(),"},
{"lineNum":"  290","line":"                imported_tables: import_backing.vm_tables.as_mut_ptr(),"},
{"lineNum":"  291","line":"                imported_globals: import_backing.vm_globals.as_mut_ptr(),"},
{"lineNum":"  292","line":"                imported_funcs: import_backing.vm_functions.as_mut_ptr(),"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"                dynamic_sigindices: local_backing.dynamic_sigindices.as_ptr(),"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"                intrinsics: get_intrinsics_for_module(&module.info),"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"                stack_lower_bound: ::std::ptr::null_mut(),"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"                memory_base: mem_base,"},
{"lineNum":"  301","line":"                memory_bound: mem_bound,"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"                internals: &mut local_backing.internals.0,"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"                interrupt_signal_mem: get_interrupt_signal_mem(),"},
{"lineNum":"  306","line":"            },"},
{"lineNum":"  307","line":"            local_functions: local_backing.local_functions.as_ptr(),"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"            local_backing,"},
{"lineNum":"  310","line":"            import_backing,"},
{"lineNum":"  311","line":"            module,"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"            data: ptr::null_mut(),"},
{"lineNum":"  314","line":"            data_finalizer: None,"},
{"lineNum":"  315","line":"        }"},
{"lineNum":"  316","line":"    }"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"    #[doc(hidden)]"},
{"lineNum":"  319","line":"    pub unsafe fn new_with_data("},
{"lineNum":"  320","line":"        local_backing: &mut LocalBacking,"},
{"lineNum":"  321","line":"        import_backing: &mut ImportBacking,"},
{"lineNum":"  322","line":"        module: &ModuleInner,"},
{"lineNum":"  323","line":"        data: *mut c_void,"},
{"lineNum":"  324","line":"        data_finalizer: fn(*mut c_void),"},
{"lineNum":"  325","line":"    ) -> Self {"},
{"lineNum":"  326","line":"        let (mem_base, mem_bound): (*mut u8, usize) ="},
{"lineNum":"  327","line":"            if module.info.memories.len() == 0 && module.info.imported_memories.len() == 0 {"},
{"lineNum":"  328","line":"                (::std::ptr::null_mut(), 0)"},
{"lineNum":"  329","line":"            } else {"},
{"lineNum":"  330","line":"                let mem = match MemoryIndex::new(0).local_or_import(&module.info) {"},
{"lineNum":"  331","line":"                    LocalOrImport::Local(index) => local_backing.vm_memories[index],"},
{"lineNum":"  332","line":"                    LocalOrImport::Import(index) => import_backing.vm_memories[index],"},
{"lineNum":"  333","line":"                };"},
{"lineNum":"  334","line":"                ((*mem).base, (*mem).bound)"},
{"lineNum":"  335","line":"            };"},
{"lineNum":"  336","line":"        Self {"},
{"lineNum":"  337","line":"            internal: InternalCtx {"},
{"lineNum":"  338","line":"                memories: local_backing.vm_memories.as_mut_ptr(),"},
{"lineNum":"  339","line":"                tables: local_backing.vm_tables.as_mut_ptr(),"},
{"lineNum":"  340","line":"                globals: local_backing.vm_globals.as_mut_ptr(),"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"                imported_memories: import_backing.vm_memories.as_mut_ptr(),"},
{"lineNum":"  343","line":"                imported_tables: import_backing.vm_tables.as_mut_ptr(),"},
{"lineNum":"  344","line":"                imported_globals: import_backing.vm_globals.as_mut_ptr(),"},
{"lineNum":"  345","line":"                imported_funcs: import_backing.vm_functions.as_mut_ptr(),"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"                dynamic_sigindices: local_backing.dynamic_sigindices.as_ptr(),"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"                intrinsics: get_intrinsics_for_module(&module.info),"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"                stack_lower_bound: ::std::ptr::null_mut(),"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"                memory_base: mem_base,"},
{"lineNum":"  354","line":"                memory_bound: mem_bound,"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"                internals: &mut local_backing.internals.0,"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"                interrupt_signal_mem: get_interrupt_signal_mem(),"},
{"lineNum":"  359","line":"            },"},
{"lineNum":"  360","line":"            local_functions: local_backing.local_functions.as_ptr(),"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"            local_backing,"},
{"lineNum":"  363","line":"            import_backing,"},
{"lineNum":"  364","line":"            module,"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"            data,"},
{"lineNum":"  367","line":"            data_finalizer: Some(data_finalizer),"},
{"lineNum":"  368","line":"        }"},
{"lineNum":"  369","line":"    }"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"    /// This exposes the specified memory of the WebAssembly instance"},
{"lineNum":"  372","line":"    /// as a immutable slice."},
{"lineNum":"  373","line":"    ///"},
{"lineNum":"  374","line":"    /// WebAssembly will soon support multiple linear memories, so this"},
{"lineNum":"  375","line":"    /// forces the user to specify."},
{"lineNum":"  376","line":"    ///"},
{"lineNum":"  377","line":"    /// # Usage:"},
{"lineNum":"  378","line":"    ///"},
{"lineNum":"  379","line":"    /// ```"},
{"lineNum":"  380","line":"    /// # use wasmer_runtime_core::{"},
{"lineNum":"  381","line":"    /// #     vm::Ctx,"},
{"lineNum":"  382","line":"    /// # };"},
{"lineNum":"  383","line":"    /// fn read_memory(ctx: &Ctx) -> u8 {"},
{"lineNum":"  384","line":"    ///     let first_memory = ctx.memory(0);"},
{"lineNum":"  385","line":"    ///     // Read the first byte of that linear memory."},
{"lineNum":"  386","line":"    ///     first_memory.view()[0].get()"},
{"lineNum":"  387","line":"    /// }"},
{"lineNum":"  388","line":"    /// ```"},
{"lineNum":"  389","line":"    pub fn memory(&self, mem_index: u32) -> &Memory {"},
{"lineNum":"  390","line":"        let module = unsafe { &*self.module };"},
{"lineNum":"  391","line":"        let mem_index = MemoryIndex::new(mem_index as usize);"},
{"lineNum":"  392","line":"        match mem_index.local_or_import(&module.info) {"},
{"lineNum":"  393","line":"            LocalOrImport::Local(local_mem_index) => unsafe {"},
{"lineNum":"  394","line":"                let local_backing = &*self.local_backing;"},
{"lineNum":"  395","line":"                &local_backing.memories[local_mem_index]"},
{"lineNum":"  396","line":"            },"},
{"lineNum":"  397","line":"            LocalOrImport::Import(import_mem_index) => unsafe {"},
{"lineNum":"  398","line":"                let import_backing = &*self.import_backing;"},
{"lineNum":"  399","line":"                &import_backing.memories[import_mem_index]"},
{"lineNum":"  400","line":"            },"},
{"lineNum":"  401","line":"        }"},
{"lineNum":"  402","line":"    }"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"    /// Gives access to the emscripten symbol map, used for debugging"},
{"lineNum":"  405","line":"    pub unsafe fn borrow_symbol_map(&self) -> &Option<HashMap<u32, String>> {"},
{"lineNum":"  406","line":"        &(*self.module).info.em_symbol_map"},
{"lineNum":"  407","line":"    }"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"    /// Returns the number of dynamic sigindices."},
{"lineNum":"  410","line":"    pub fn dynamic_sigindice_count(&self) -> usize {"},
{"lineNum":"  411","line":"        unsafe { (*self.local_backing).dynamic_sigindices.len() }"},
{"lineNum":"  412","line":"    }"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"    /// Returns the value of the specified internal field."},
{"lineNum":"  415","line":"    pub fn get_internal(&self, field: &InternalField) -> u64 {"},
{"lineNum":"  416","line":"        unsafe { (*self.internal.internals)[field.index()] }"},
{"lineNum":"  417","line":"    }"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"    /// Writes the value to the specified internal field."},
{"lineNum":"  420","line":"    pub fn set_internal(&mut self, field: &InternalField, value: u64) {"},
{"lineNum":"  421","line":"        unsafe {"},
{"lineNum":"  422","line":"            (*self.internal.internals)[field.index()] = value;"},
{"lineNum":"  423","line":"        }"},
{"lineNum":"  424","line":"    }"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"    /// Calls a host or Wasm function at the given table index"},
{"lineNum":"  427","line":"    pub fn call_with_table_index("},
{"lineNum":"  428","line":"        &mut self,"},
{"lineNum":"  429","line":"        index: TableIndex,"},
{"lineNum":"  430","line":"        args: &[Value],"},
{"lineNum":"  431","line":"    ) -> CallResult<Vec<Value>> {"},
{"lineNum":"  432","line":"        let anyfunc_table ="},
{"lineNum":"  433","line":"            unsafe { &*((**self.internal.tables).table as *mut crate::table::AnyfuncTable) };"},
{"lineNum":"  434","line":"        let Anyfunc { func, ctx, sig_id } = anyfunc_table.backing[index.index()];"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"        let signature = SigRegistry.lookup_signature(unsafe { std::mem::transmute(sig_id.0) });"},
{"lineNum":"  437","line":"        let mut rets = vec![];"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"        let wasm = {"},
{"lineNum":"  440","line":"            let module = unsafe { &*self.module };"},
{"lineNum":"  441","line":"            let runnable = &module.runnable_module;"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"            let sig_index = SigRegistry.lookup_sig_index(signature.clone());"},
{"lineNum":"  444","line":"            runnable"},
{"lineNum":"  445","line":"                .get_trampoline(&module.info, sig_index)"},
{"lineNum":"  446","line":"                .expect(\"wasm trampoline\")"},
{"lineNum":"  447","line":"        };"},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"        call_func_with_index_inner("},
{"lineNum":"  450","line":"            ctx,"},
{"lineNum":"  451","line":"            NonNull::new(func as *mut _).unwrap(),"},
{"lineNum":"  452","line":"            &signature,"},
{"lineNum":"  453","line":"            wasm,"},
{"lineNum":"  454","line":"            args,"},
{"lineNum":"  455","line":"            &mut rets,"},
{"lineNum":"  456","line":"        )?;"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"        Ok(rets)"},
{"lineNum":"  459","line":"    }"},
{"lineNum":"  460","line":"}"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"#[doc(hidden)]"},
{"lineNum":"  463","line":"impl Ctx {"},
{"lineNum":"  464","line":"    #[allow(clippy::erasing_op)] // TODO"},
{"lineNum":"  465","line":"    pub fn offset_memories() -> u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  466","line":"        0 * (mem::size_of::<usize>() as u8)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  467","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"    pub fn offset_tables() -> u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  470","line":"        1 * (mem::size_of::<usize>() as u8)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  471","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"    pub fn offset_globals() -> u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  474","line":"        2 * (mem::size_of::<usize>() as u8)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  475","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"    pub fn offset_imported_memories() -> u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  478","line":"        3 * (mem::size_of::<usize>() as u8)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  479","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"    pub fn offset_imported_tables() -> u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  482","line":"        4 * (mem::size_of::<usize>() as u8)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  483","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"    pub fn offset_imported_globals() -> u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  486","line":"        5 * (mem::size_of::<usize>() as u8)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  487","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"    pub fn offset_imported_funcs() -> u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  490","line":"        6 * (mem::size_of::<usize>() as u8)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  491","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"    pub fn offset_signatures() -> u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  494","line":"        7 * (mem::size_of::<usize>() as u8)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  495","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"    pub fn offset_intrinsics() -> u8 {"},
{"lineNum":"  498","line":"        8 * (mem::size_of::<usize>() as u8)"},
{"lineNum":"  499","line":"    }"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"    pub fn offset_stack_lower_bound() -> u8 {"},
{"lineNum":"  502","line":"        9 * (mem::size_of::<usize>() as u8)"},
{"lineNum":"  503","line":"    }"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"    pub fn offset_memory_base() -> u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  506","line":"        10 * (mem::size_of::<usize>() as u8)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  507","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"    pub fn offset_memory_bound() -> u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  510","line":"        11 * (mem::size_of::<usize>() as u8)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  511","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"    pub fn offset_internals() -> u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  514","line":"        12 * (mem::size_of::<usize>() as u8)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  515","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"    pub fn offset_interrupt_signal_mem() -> u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  518","line":"        13 * (mem::size_of::<usize>() as u8)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  519","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"    pub fn offset_local_functions() -> u8 {"},
{"lineNum":"  522","line":"        14 * (mem::size_of::<usize>() as u8)"},
{"lineNum":"  523","line":"    }"},
{"lineNum":"  524","line":"}"},
{"lineNum":"  525","line":""},
{"lineNum":"  526","line":"/// Represents a function pointer. It is mostly used in the"},
{"lineNum":"  527","line":"/// `typed_func` module within the `wrap` functions, to wrap imported"},
{"lineNum":"  528","line":"/// functions."},
{"lineNum":"  529","line":"#[repr(transparent)]"},
{"lineNum":"  530","line":"pub struct Func(pub(self) *mut c_void);"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"/// Represents a function environment pointer, like a captured"},
{"lineNum":"  533","line":"/// environment of a closure. It is mostly used in the `typed_func`"},
{"lineNum":"  534","line":"/// module within the `wrap` functions, to wrap imported functions."},
{"lineNum":"  535","line":"#[repr(transparent)]"},
{"lineNum":"  536","line":"pub struct FuncEnv(pub(self) *mut c_void);"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"/// Represents a function context. It is used by imported functions"},
{"lineNum":"  539","line":"/// only."},
{"lineNum":"  540","line":"#[derive(Debug)]"},
{"lineNum":"  541","line":"#[repr(C)]"},
{"lineNum":"  542","line":"pub struct FuncCtx {"},
{"lineNum":"  543","line":"    /// The `Ctx` pointer."},
{"lineNum":"  544","line":"    pub(crate) vmctx: NonNull<Ctx>,"},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"    /// A pointer to the function environment. It is used by imported"},
{"lineNum":"  547","line":"    /// functions only to store the pointer to the real host function,"},
{"lineNum":"  548","line":"    /// whether it is a regular function, or a closure with or without"},
{"lineNum":"  549","line":"    /// a captured environment."},
{"lineNum":"  550","line":"    pub(crate) func_env: Option<NonNull<FuncEnv>>,"},
{"lineNum":"  551","line":"}"},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"impl FuncCtx {"},
{"lineNum":"  554","line":"    /// Offset to `vmctx`."},
{"lineNum":"  555","line":"    pub fn offset_vmctx() -> u8 {"},
{"lineNum":"  556","line":"        0 * (mem::size_of::<usize>() as u8)"},
{"lineNum":"  557","line":"    }"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"    /// Offset to `func_env`."},
{"lineNum":"  560","line":"    pub fn offset_func_env() -> u8 {"},
{"lineNum":"  561","line":"        1 * (mem::size_of::<usize>() as u8)"},
{"lineNum":"  562","line":"    }"},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"    /// Size of a `FuncCtx`."},
{"lineNum":"  565","line":"    pub fn size() -> u8 {"},
{"lineNum":"  566","line":"        mem::size_of::<Self>() as u8"},
{"lineNum":"  567","line":"    }"},
{"lineNum":"  568","line":"}"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"/// An imported function is a function pointer associated to a"},
{"lineNum":"  571","line":"/// function context."},
{"lineNum":"  572","line":"#[derive(Debug, Clone)]"},
{"lineNum":"  573","line":"#[repr(C)]"},
{"lineNum":"  574","line":"pub struct ImportedFunc {"},
{"lineNum":"  575","line":"    /// Const pointer to `Func`."},
{"lineNum":"  576","line":"    pub(crate) func: *const Func,"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"    /// Mutable non-null pointer to `FuncCtx`."},
{"lineNum":"  579","line":"    pub(crate) func_ctx: NonNull<FuncCtx>,"},
{"lineNum":"  580","line":"}"},
{"lineNum":"  581","line":""},
{"lineNum":"  582","line":"// Manually implemented because ImportedFunc contains raw pointers"},
{"lineNum":"  583","line":"// directly; `Func` is marked Send (But `Ctx` actually isn\'t! (TODO:"},
{"lineNum":"  584","line":"// review this, shouldn\'t `Ctx` be Send?))"},
{"lineNum":"  585","line":"unsafe impl Send for ImportedFunc {}"},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"impl ImportedFunc {"},
{"lineNum":"  588","line":"    /// Offset to func."},
{"lineNum":"  589","line":"    #[allow(clippy::erasing_op)] // TODO"},
{"lineNum":"  590","line":"    pub fn offset_func() -> u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  591","line":"        0 * (mem::size_of::<usize>() as u8)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  592","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  593","line":""},
{"lineNum":"  594","line":"    /// Offset to func_ctx."},
{"lineNum":"  595","line":"    pub fn offset_func_ctx() -> u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  596","line":"        1 * (mem::size_of::<usize>() as u8)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  597","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  598","line":""},
{"lineNum":"  599","line":"    /// Size of an `ImportedFunc`."},
{"lineNum":"  600","line":"    pub fn size() -> u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  601","line":"        mem::size_of::<Self>() as u8","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  602","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  603","line":"}"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"/// Definition of a table used by the VM. (obviously)"},
{"lineNum":"  606","line":"#[derive(Debug, Clone, Copy)]"},
{"lineNum":"  607","line":"#[repr(C)]"},
{"lineNum":"  608","line":"pub struct LocalTable {"},
{"lineNum":"  609","line":"    /// pointer to the elements in the table."},
{"lineNum":"  610","line":"    pub base: *mut u8,"},
{"lineNum":"  611","line":"    /// Number of elements in the table (NOT necessarily the size of the table in bytes!)."},
{"lineNum":"  612","line":"    pub count: usize,"},
{"lineNum":"  613","line":"    /// The table that this represents. At the moment, this can only be `*mut AnyfuncTable`."},
{"lineNum":"  614","line":"    pub table: *mut (),"},
{"lineNum":"  615","line":"}"},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"// manually implemented because LocalTable contains raw pointers directly"},
{"lineNum":"  618","line":"unsafe impl Send for LocalTable {}"},
{"lineNum":"  619","line":""},
{"lineNum":"  620","line":"impl LocalTable {"},
{"lineNum":"  621","line":"    /// Offset to base."},
{"lineNum":"  622","line":"    #[allow(clippy::erasing_op)] // TODO"},
{"lineNum":"  623","line":"    pub fn offset_base() -> u8 {"},
{"lineNum":"  624","line":"        0 * (mem::size_of::<usize>() as u8)"},
{"lineNum":"  625","line":"    }"},
{"lineNum":"  626","line":""},
{"lineNum":"  627","line":"    /// Offset count."},
{"lineNum":"  628","line":"    pub fn offset_count() -> u8 {"},
{"lineNum":"  629","line":"        1 * (mem::size_of::<usize>() as u8)"},
{"lineNum":"  630","line":"    }"},
{"lineNum":"  631","line":""},
{"lineNum":"  632","line":"    /// Size of a `LocalTable`."},
{"lineNum":"  633","line":"    pub fn size() -> u8 {"},
{"lineNum":"  634","line":"        mem::size_of::<Self>() as u8"},
{"lineNum":"  635","line":"    }"},
{"lineNum":"  636","line":"}"},
{"lineNum":"  637","line":""},
{"lineNum":"  638","line":"/// Definition of a memory used by the VM."},
{"lineNum":"  639","line":"#[derive(Debug, Clone, Copy)]"},
{"lineNum":"  640","line":"#[repr(C)]"},
{"lineNum":"  641","line":"pub struct LocalMemory {"},
{"lineNum":"  642","line":"    /// Pointer to the bottom of this linear memory."},
{"lineNum":"  643","line":"    pub base: *mut u8,"},
{"lineNum":"  644","line":"    /// Current size of this linear memory in bytes."},
{"lineNum":"  645","line":"    pub bound: usize,"},
{"lineNum":"  646","line":"    /// The actual memory that this represents."},
{"lineNum":"  647","line":"    /// This is either `*mut DynamicMemory`, `*mut StaticMemory`,"},
{"lineNum":"  648","line":"    /// or `*mut SharedStaticMemory`."},
{"lineNum":"  649","line":"    pub memory: *mut (),"},
{"lineNum":"  650","line":"}"},
{"lineNum":"  651","line":""},
{"lineNum":"  652","line":"// manually implemented because LocalMemory contains raw pointers"},
{"lineNum":"  653","line":"unsafe impl Send for LocalMemory {}"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"impl LocalMemory {"},
{"lineNum":"  656","line":"    /// Offset base."},
{"lineNum":"  657","line":"    #[allow(clippy::erasing_op)] // TODO"},
{"lineNum":"  658","line":"    pub fn offset_base() -> u8 {"},
{"lineNum":"  659","line":"        0 * (mem::size_of::<usize>() as u8)"},
{"lineNum":"  660","line":"    }"},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"    /// Offset bound."},
{"lineNum":"  663","line":"    pub fn offset_bound() -> u8 {"},
{"lineNum":"  664","line":"        1 * (mem::size_of::<usize>() as u8)"},
{"lineNum":"  665","line":"    }"},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"    /// Size of a `LocalMemory`."},
{"lineNum":"  668","line":"    pub fn size() -> u8 {"},
{"lineNum":"  669","line":"        mem::size_of::<Self>() as u8"},
{"lineNum":"  670","line":"    }"},
{"lineNum":"  671","line":"}"},
{"lineNum":"  672","line":""},
{"lineNum":"  673","line":"/// Definition of a global used by the VM."},
{"lineNum":"  674","line":"#[derive(Debug, Clone, Copy)]"},
{"lineNum":"  675","line":"#[repr(C)]"},
{"lineNum":"  676","line":"pub struct LocalGlobal {"},
{"lineNum":"  677","line":"    /// Data."},
{"lineNum":"  678","line":"    pub data: u128,"},
{"lineNum":"  679","line":"}"},
{"lineNum":"  680","line":""},
{"lineNum":"  681","line":"impl LocalGlobal {"},
{"lineNum":"  682","line":"    /// Offset data."},
{"lineNum":"  683","line":"    #[allow(clippy::erasing_op)] // TODO"},
{"lineNum":"  684","line":"    pub fn offset_data() -> u8 {"},
{"lineNum":"  685","line":"        0 * (mem::size_of::<usize>() as u8)"},
{"lineNum":"  686","line":"    }"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"    /// A null `LocalGlobal`."},
{"lineNum":"  689","line":"    pub fn null() -> Self {"},
{"lineNum":"  690","line":"        Self { data: 0 }"},
{"lineNum":"  691","line":"    }"},
{"lineNum":"  692","line":""},
{"lineNum":"  693","line":"    /// Size of a `LocalGlobal`."},
{"lineNum":"  694","line":"    pub fn size() -> u8 {"},
{"lineNum":"  695","line":"        mem::size_of::<Self>() as u8"},
{"lineNum":"  696","line":"    }"},
{"lineNum":"  697","line":"}"},
{"lineNum":"  698","line":""},
{"lineNum":"  699","line":"/// Identifier for a function signature."},
{"lineNum":"  700","line":"#[derive(Debug, Clone, Copy)]"},
{"lineNum":"  701","line":"#[repr(transparent)]"},
{"lineNum":"  702","line":"pub struct SigId(pub u32);"},
{"lineNum":"  703","line":""},
{"lineNum":"  704","line":"/// Caller-checked anyfunc"},
{"lineNum":"  705","line":"#[derive(Debug, Clone, Copy)]"},
{"lineNum":"  706","line":"#[repr(C)]"},
{"lineNum":"  707","line":"pub struct Anyfunc {"},
{"lineNum":"  708","line":"    /// Const pointer to `Func`."},
{"lineNum":"  709","line":"    pub func: *const Func,"},
{"lineNum":"  710","line":"    /// Mutable pointer to `Ctx`."},
{"lineNum":"  711","line":"    pub ctx: *mut Ctx,"},
{"lineNum":"  712","line":"    /// Sig id of this function"},
{"lineNum":"  713","line":"    pub sig_id: SigId,"},
{"lineNum":"  714","line":"}"},
{"lineNum":"  715","line":""},
{"lineNum":"  716","line":"// manually implemented because Anyfunc contains raw pointers directly"},
{"lineNum":"  717","line":"unsafe impl Send for Anyfunc {}"},
{"lineNum":"  718","line":""},
{"lineNum":"  719","line":"impl Anyfunc {"},
{"lineNum":"  720","line":"    /// A null `Anyfunc` value."},
{"lineNum":"  721","line":"    pub fn null() -> Self {"},
{"lineNum":"  722","line":"        Self {"},
{"lineNum":"  723","line":"            func: ptr::null(),"},
{"lineNum":"  724","line":"            ctx: ptr::null_mut(),"},
{"lineNum":"  725","line":"            sig_id: SigId(u32::max_value()),"},
{"lineNum":"  726","line":"        }"},
{"lineNum":"  727","line":"    }"},
{"lineNum":"  728","line":""},
{"lineNum":"  729","line":"    /// The offset for this func."},
{"lineNum":"  730","line":"    #[allow(clippy::erasing_op)] // TODO"},
{"lineNum":"  731","line":"    pub fn offset_func() -> u8 {"},
{"lineNum":"  732","line":"        0 * (mem::size_of::<usize>() as u8)"},
{"lineNum":"  733","line":"    }"},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"    /// The offset of the vmctx."},
{"lineNum":"  736","line":"    pub fn offset_vmctx() -> u8 {"},
{"lineNum":"  737","line":"        1 * (mem::size_of::<usize>() as u8)"},
{"lineNum":"  738","line":"    }"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"    /// The offset of the sig id."},
{"lineNum":"  741","line":"    pub fn offset_sig_id() -> u8 {"},
{"lineNum":"  742","line":"        2 * (mem::size_of::<usize>() as u8)"},
{"lineNum":"  743","line":"    }"},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"    /// The size of `Anyfunc`."},
{"lineNum":"  746","line":"    pub fn size() -> u8 {"},
{"lineNum":"  747","line":"        mem::size_of::<Self>() as u8"},
{"lineNum":"  748","line":"    }"},
{"lineNum":"  749","line":"}"},
{"lineNum":"  750","line":""},
{"lineNum":"  751","line":"#[cfg(test)]"},
{"lineNum":"  752","line":"mod vm_offset_tests {"},
{"lineNum":"  753","line":"    use super::{"},
{"lineNum":"  754","line":"        Anyfunc, Ctx, FuncCtx, ImportedFunc, InternalCtx, LocalGlobal, LocalMemory, LocalTable,"},
{"lineNum":"  755","line":"    };"},
{"lineNum":"  756","line":""},
{"lineNum":"  757","line":"    // Inspired by https://internals.rust-lang.org/t/discussion-on-offset-of/7440/2."},
{"lineNum":"  758","line":"    macro_rules! offset_of {"},
{"lineNum":"  759","line":"        ($struct:path, $field:ident) => {{"},
{"lineNum":"  760","line":"            fn offset() -> usize {"},
{"lineNum":"  761","line":"                use std::mem;"},
{"lineNum":"  762","line":""},
{"lineNum":"  763","line":"                let structure = mem::MaybeUninit::<$struct>::uninit();"},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"                let &$struct {"},
{"lineNum":"  766","line":"                    $field: ref field, .."},
{"lineNum":"  767","line":"                } = unsafe { &*structure.as_ptr() };"},
{"lineNum":"  768","line":""},
{"lineNum":"  769","line":"                let offset ="},
{"lineNum":"  770","line":"                    (field as *const _ as usize).wrapping_sub(&structure as *const _ as usize);"},
{"lineNum":"  771","line":""},
{"lineNum":"  772","line":"                assert!((0..=mem::size_of_val(&structure)).contains(&offset));"},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":"                offset"},
{"lineNum":"  775","line":"            }"},
{"lineNum":"  776","line":""},
{"lineNum":"  777","line":"            offset()"},
{"lineNum":"  778","line":"        }};"},
{"lineNum":"  779","line":"    }"},
{"lineNum":"  780","line":""},
{"lineNum":"  781","line":"    #[test]"},
{"lineNum":"  782","line":"    fn offset_of() {"},
{"lineNum":"  783","line":"        use std::{mem, ptr::NonNull};"},
{"lineNum":"  784","line":""},
{"lineNum":"  785","line":"        struct S0;"},
{"lineNum":"  786","line":""},
{"lineNum":"  787","line":"        #[repr(C)]"},
{"lineNum":"  788","line":"        struct S1 {"},
{"lineNum":"  789","line":"            f1: u8,"},
{"lineNum":"  790","line":"            f2: u16,"},
{"lineNum":"  791","line":"            f3: u32,"},
{"lineNum":"  792","line":"            f4: u64,"},
{"lineNum":"  793","line":"            f5: u128,"},
{"lineNum":"  794","line":"            f6: f32,"},
{"lineNum":"  795","line":"            f7: f64,"},
{"lineNum":"  796","line":"            f8: NonNull<S0>,"},
{"lineNum":"  797","line":"            f9: Option<NonNull<S0>>,"},
{"lineNum":"  798","line":"            f10: *mut S0,"},
{"lineNum":"  799","line":"            z: u8,"},
{"lineNum":"  800","line":"        }"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"        assert_eq!(offset_of!(S1, f1), 0);"},
{"lineNum":"  803","line":"        assert_eq!(offset_of!(S1, f2), 2);"},
{"lineNum":"  804","line":"        assert_eq!(offset_of!(S1, f3), 4);"},
{"lineNum":"  805","line":"        assert_eq!(offset_of!(S1, f4), 8);"},
{"lineNum":"  806","line":"        assert_eq!(offset_of!(S1, f5), 16);"},
{"lineNum":"  807","line":"        assert_eq!(offset_of!(S1, f6), 32);"},
{"lineNum":"  808","line":"        assert_eq!(offset_of!(S1, f7), 40);"},
{"lineNum":"  809","line":"        assert_eq!(offset_of!(S1, f8), 40 + mem::size_of::<usize>());"},
{"lineNum":"  810","line":"        assert_eq!(offset_of!(S1, f9), 48 + mem::size_of::<usize>());"},
{"lineNum":"  811","line":"        assert_eq!(offset_of!(S1, f10), 56 + mem::size_of::<usize>());"},
{"lineNum":"  812","line":"        assert_eq!(offset_of!(S1, z), 64 + mem::size_of::<usize>());"},
{"lineNum":"  813","line":"    }"},
{"lineNum":"  814","line":""},
{"lineNum":"  815","line":"    #[test]"},
{"lineNum":"  816","line":"    fn vmctx() {"},
{"lineNum":"  817","line":"        assert_eq!(0usize, offset_of!(Ctx, internal));"},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"        assert_eq!("},
{"lineNum":"  820","line":"            Ctx::offset_memories() as usize,"},
{"lineNum":"  821","line":"            offset_of!(InternalCtx, memories),"},
{"lineNum":"  822","line":"        );"},
{"lineNum":"  823","line":""},
{"lineNum":"  824","line":"        assert_eq!("},
{"lineNum":"  825","line":"            Ctx::offset_tables() as usize,"},
{"lineNum":"  826","line":"            offset_of!(InternalCtx, tables),"},
{"lineNum":"  827","line":"        );"},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"        assert_eq!("},
{"lineNum":"  830","line":"            Ctx::offset_globals() as usize,"},
{"lineNum":"  831","line":"            offset_of!(InternalCtx, globals),"},
{"lineNum":"  832","line":"        );"},
{"lineNum":"  833","line":""},
{"lineNum":"  834","line":"        assert_eq!("},
{"lineNum":"  835","line":"            Ctx::offset_imported_memories() as usize,"},
{"lineNum":"  836","line":"            offset_of!(InternalCtx, imported_memories),"},
{"lineNum":"  837","line":"        );"},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"        assert_eq!("},
{"lineNum":"  840","line":"            Ctx::offset_imported_tables() as usize,"},
{"lineNum":"  841","line":"            offset_of!(InternalCtx, imported_tables),"},
{"lineNum":"  842","line":"        );"},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"        assert_eq!("},
{"lineNum":"  845","line":"            Ctx::offset_imported_globals() as usize,"},
{"lineNum":"  846","line":"            offset_of!(InternalCtx, imported_globals),"},
{"lineNum":"  847","line":"        );"},
{"lineNum":"  848","line":""},
{"lineNum":"  849","line":"        assert_eq!("},
{"lineNum":"  850","line":"            Ctx::offset_imported_funcs() as usize,"},
{"lineNum":"  851","line":"            offset_of!(InternalCtx, imported_funcs),"},
{"lineNum":"  852","line":"        );"},
{"lineNum":"  853","line":""},
{"lineNum":"  854","line":"        assert_eq!("},
{"lineNum":"  855","line":"            Ctx::offset_intrinsics() as usize,"},
{"lineNum":"  856","line":"            offset_of!(InternalCtx, intrinsics),"},
{"lineNum":"  857","line":"        );"},
{"lineNum":"  858","line":""},
{"lineNum":"  859","line":"        assert_eq!("},
{"lineNum":"  860","line":"            Ctx::offset_stack_lower_bound() as usize,"},
{"lineNum":"  861","line":"            offset_of!(InternalCtx, stack_lower_bound),"},
{"lineNum":"  862","line":"        );"},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":"        assert_eq!("},
{"lineNum":"  865","line":"            Ctx::offset_memory_base() as usize,"},
{"lineNum":"  866","line":"            offset_of!(InternalCtx, memory_base),"},
{"lineNum":"  867","line":"        );"},
{"lineNum":"  868","line":""},
{"lineNum":"  869","line":"        assert_eq!("},
{"lineNum":"  870","line":"            Ctx::offset_memory_bound() as usize,"},
{"lineNum":"  871","line":"            offset_of!(InternalCtx, memory_bound),"},
{"lineNum":"  872","line":"        );"},
{"lineNum":"  873","line":""},
{"lineNum":"  874","line":"        assert_eq!("},
{"lineNum":"  875","line":"            Ctx::offset_internals() as usize,"},
{"lineNum":"  876","line":"            offset_of!(InternalCtx, internals),"},
{"lineNum":"  877","line":"        );"},
{"lineNum":"  878","line":""},
{"lineNum":"  879","line":"        assert_eq!("},
{"lineNum":"  880","line":"            Ctx::offset_interrupt_signal_mem() as usize,"},
{"lineNum":"  881","line":"            offset_of!(InternalCtx, interrupt_signal_mem),"},
{"lineNum":"  882","line":"        );"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"        assert_eq!("},
{"lineNum":"  885","line":"            Ctx::offset_local_functions() as usize,"},
{"lineNum":"  886","line":"            offset_of!(Ctx, local_functions),"},
{"lineNum":"  887","line":"        );"},
{"lineNum":"  888","line":"    }"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"    #[test]"},
{"lineNum":"  891","line":"    fn func_ctx() {"},
{"lineNum":"  892","line":"        assert_eq!(FuncCtx::offset_vmctx() as usize, 0,);"},
{"lineNum":"  893","line":""},
{"lineNum":"  894","line":"        assert_eq!(FuncCtx::offset_func_env() as usize, 8,);"},
{"lineNum":"  895","line":"    }"},
{"lineNum":"  896","line":""},
{"lineNum":"  897","line":"    #[test]"},
{"lineNum":"  898","line":"    fn imported_func() {"},
{"lineNum":"  899","line":"        assert_eq!("},
{"lineNum":"  900","line":"            ImportedFunc::offset_func() as usize,"},
{"lineNum":"  901","line":"            offset_of!(ImportedFunc, func),"},
{"lineNum":"  902","line":"        );"},
{"lineNum":"  903","line":""},
{"lineNum":"  904","line":"        assert_eq!("},
{"lineNum":"  905","line":"            ImportedFunc::offset_func_ctx() as usize,"},
{"lineNum":"  906","line":"            offset_of!(ImportedFunc, func_ctx),"},
{"lineNum":"  907","line":"        );"},
{"lineNum":"  908","line":"    }"},
{"lineNum":"  909","line":""},
{"lineNum":"  910","line":"    #[test]"},
{"lineNum":"  911","line":"    fn local_table() {"},
{"lineNum":"  912","line":"        assert_eq!("},
{"lineNum":"  913","line":"            LocalTable::offset_base() as usize,"},
{"lineNum":"  914","line":"            offset_of!(LocalTable, base),"},
{"lineNum":"  915","line":"        );"},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"        assert_eq!("},
{"lineNum":"  918","line":"            LocalTable::offset_count() as usize,"},
{"lineNum":"  919","line":"            offset_of!(LocalTable, count),"},
{"lineNum":"  920","line":"        );"},
{"lineNum":"  921","line":"    }"},
{"lineNum":"  922","line":""},
{"lineNum":"  923","line":"    #[test]"},
{"lineNum":"  924","line":"    fn local_memory() {"},
{"lineNum":"  925","line":"        assert_eq!("},
{"lineNum":"  926","line":"            LocalMemory::offset_base() as usize,"},
{"lineNum":"  927","line":"            offset_of!(LocalMemory, base),"},
{"lineNum":"  928","line":"        );"},
{"lineNum":"  929","line":""},
{"lineNum":"  930","line":"        assert_eq!("},
{"lineNum":"  931","line":"            LocalMemory::offset_bound() as usize,"},
{"lineNum":"  932","line":"            offset_of!(LocalMemory, bound),"},
{"lineNum":"  933","line":"        );"},
{"lineNum":"  934","line":"    }"},
{"lineNum":"  935","line":""},
{"lineNum":"  936","line":"    #[test]"},
{"lineNum":"  937","line":"    fn local_global() {"},
{"lineNum":"  938","line":"        assert_eq!("},
{"lineNum":"  939","line":"            LocalGlobal::offset_data() as usize,"},
{"lineNum":"  940","line":"            offset_of!(LocalGlobal, data),"},
{"lineNum":"  941","line":"        );"},
{"lineNum":"  942","line":"    }"},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"    #[test]"},
{"lineNum":"  945","line":"    fn cc_anyfunc() {"},
{"lineNum":"  946","line":"        assert_eq!(Anyfunc::offset_func() as usize, offset_of!(Anyfunc, func),);"},
{"lineNum":"  947","line":""},
{"lineNum":"  948","line":"        assert_eq!(Anyfunc::offset_vmctx() as usize, offset_of!(Anyfunc, ctx),);"},
{"lineNum":"  949","line":""},
{"lineNum":"  950","line":"        assert_eq!("},
{"lineNum":"  951","line":"            Anyfunc::offset_sig_id() as usize,"},
{"lineNum":"  952","line":"            offset_of!(Anyfunc, sig_id),"},
{"lineNum":"  953","line":"        );"},
{"lineNum":"  954","line":"    }"},
{"lineNum":"  955","line":"}"},
{"lineNum":"  956","line":""},
{"lineNum":"  957","line":"#[cfg(test)]"},
{"lineNum":"  958","line":"mod vm_ctx_tests {"},
{"lineNum":"  959","line":"    use super::{Ctx, ImportBacking, LocalBacking};"},
{"lineNum":"  960","line":"    use crate::module::{ModuleInfo, ModuleInner, StringTable};"},
{"lineNum":"  961","line":"    use crate::structures::Map;"},
{"lineNum":"  962","line":"    use std::ffi::c_void;"},
{"lineNum":"  963","line":""},
{"lineNum":"  964","line":"    struct TestData {"},
{"lineNum":"  965","line":"        x: u32,"},
{"lineNum":"  966","line":"        y: bool,"},
{"lineNum":"  967","line":"        str: String,"},
{"lineNum":"  968","line":"        finalizer: Box<dyn FnMut()>,"},
{"lineNum":"  969","line":"    }"},
{"lineNum":"  970","line":""},
{"lineNum":"  971","line":"    impl Drop for TestData {"},
{"lineNum":"  972","line":"        fn drop(&mut self) {"},
{"lineNum":"  973","line":"            (*self.finalizer)();"},
{"lineNum":"  974","line":"        }"},
{"lineNum":"  975","line":"    }"},
{"lineNum":"  976","line":""},
{"lineNum":"  977","line":"    fn test_data_finalizer(data: *mut c_void) {"},
{"lineNum":"  978","line":"        let test_data: &mut TestData = unsafe { &mut *(data as *mut TestData) };"},
{"lineNum":"  979","line":""},
{"lineNum":"  980","line":"        assert_eq!(10, test_data.x);"},
{"lineNum":"  981","line":"        assert_eq!(true, test_data.y);"},
{"lineNum":"  982","line":"        assert_eq!(\"Test\".to_string(), test_data.str,);"},
{"lineNum":"  983","line":""},
{"lineNum":"  984","line":"        println!(\"hello from finalizer\");"},
{"lineNum":"  985","line":""},
{"lineNum":"  986","line":"        drop(test_data);"},
{"lineNum":"  987","line":"    }"},
{"lineNum":"  988","line":""},
{"lineNum":"  989","line":"    #[test]"},
{"lineNum":"  990","line":"    fn test_callback_on_drop() {"},
{"lineNum":"  991","line":"        let mut data = TestData {"},
{"lineNum":"  992","line":"            x: 10,"},
{"lineNum":"  993","line":"            y: true,"},
{"lineNum":"  994","line":"            str: \"Test\".to_string(),"},
{"lineNum":"  995","line":"            finalizer: Box::new(move || {}),"},
{"lineNum":"  996","line":"        };"},
{"lineNum":"  997","line":""},
{"lineNum":"  998","line":"        let mut local_backing = LocalBacking {"},
{"lineNum":"  999","line":"            memories: Map::new().into_boxed_map(),"},
{"lineNum":" 1000","line":"            tables: Map::new().into_boxed_map(),"},
{"lineNum":" 1001","line":"            globals: Map::new().into_boxed_map(),"},
{"lineNum":" 1002","line":""},
{"lineNum":" 1003","line":"            vm_memories: Map::new().into_boxed_map(),"},
{"lineNum":" 1004","line":"            vm_tables: Map::new().into_boxed_map(),"},
{"lineNum":" 1005","line":"            vm_globals: Map::new().into_boxed_map(),"},
{"lineNum":" 1006","line":""},
{"lineNum":" 1007","line":"            dynamic_sigindices: Map::new().into_boxed_map(),"},
{"lineNum":" 1008","line":"            local_functions: Map::new().into_boxed_map(),"},
{"lineNum":" 1009","line":""},
{"lineNum":" 1010","line":"            internals: crate::backing::Internals([0; crate::backing::INTERNALS_SIZE]),"},
{"lineNum":" 1011","line":"        };"},
{"lineNum":" 1012","line":""},
{"lineNum":" 1013","line":"        let mut import_backing = ImportBacking {"},
{"lineNum":" 1014","line":"            memories: Map::new().into_boxed_map(),"},
{"lineNum":" 1015","line":"            tables: Map::new().into_boxed_map(),"},
{"lineNum":" 1016","line":"            globals: Map::new().into_boxed_map(),"},
{"lineNum":" 1017","line":""},
{"lineNum":" 1018","line":"            vm_functions: Map::new().into_boxed_map(),"},
{"lineNum":" 1019","line":"            vm_memories: Map::new().into_boxed_map(),"},
{"lineNum":" 1020","line":"            vm_tables: Map::new().into_boxed_map(),"},
{"lineNum":" 1021","line":"            vm_globals: Map::new().into_boxed_map(),"},
{"lineNum":" 1022","line":"        };"},
{"lineNum":" 1023","line":""},
{"lineNum":" 1024","line":"        let module = generate_module();"},
{"lineNum":" 1025","line":"        let data_ptr = &mut data as *mut _ as *mut c_void;"},
{"lineNum":" 1026","line":"        let ctx = unsafe {"},
{"lineNum":" 1027","line":"            Ctx::new_with_data("},
{"lineNum":" 1028","line":"                &mut local_backing,"},
{"lineNum":" 1029","line":"                &mut import_backing,"},
{"lineNum":" 1030","line":"                &module,"},
{"lineNum":" 1031","line":"                data_ptr,"},
{"lineNum":" 1032","line":"                test_data_finalizer,"},
{"lineNum":" 1033","line":"            )"},
{"lineNum":" 1034","line":"        };"},
{"lineNum":" 1035","line":""},
{"lineNum":" 1036","line":"        let ctx_test_data = cast_test_data(ctx.data);"},
{"lineNum":" 1037","line":"        assert_eq!(10, ctx_test_data.x);"},
{"lineNum":" 1038","line":"        assert_eq!(true, ctx_test_data.y);"},
{"lineNum":" 1039","line":"        assert_eq!(\"Test\".to_string(), ctx_test_data.str);"},
{"lineNum":" 1040","line":""},
{"lineNum":" 1041","line":"        drop(ctx);"},
{"lineNum":" 1042","line":"    }"},
{"lineNum":" 1043","line":""},
{"lineNum":" 1044","line":"    fn cast_test_data(data: *mut c_void) -> &\'static mut TestData {"},
{"lineNum":" 1045","line":"        let test_data: &mut TestData = unsafe { &mut *(data as *mut TestData) };"},
{"lineNum":" 1046","line":"        test_data"},
{"lineNum":" 1047","line":"    }"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"    fn generate_module() -> ModuleInner {"},
{"lineNum":" 1050","line":"        use super::Func;"},
{"lineNum":" 1051","line":"        use crate::backend::{sys::Memory, Backend, CacheGen, RunnableModule};"},
{"lineNum":" 1052","line":"        use crate::cache::Error as CacheError;"},
{"lineNum":" 1053","line":"        use crate::typed_func::Wasm;"},
{"lineNum":" 1054","line":"        use crate::types::{LocalFuncIndex, SigIndex};"},
{"lineNum":" 1055","line":"        use indexmap::IndexMap;"},
{"lineNum":" 1056","line":"        use std::any::Any;"},
{"lineNum":" 1057","line":"        use std::collections::HashMap;"},
{"lineNum":" 1058","line":"        use std::ptr::NonNull;"},
{"lineNum":" 1059","line":"        struct Placeholder;"},
{"lineNum":" 1060","line":"        impl RunnableModule for Placeholder {"},
{"lineNum":" 1061","line":"            fn get_func("},
{"lineNum":" 1062","line":"                &self,"},
{"lineNum":" 1063","line":"                _module: &ModuleInfo,"},
{"lineNum":" 1064","line":"                _local_func_index: LocalFuncIndex,"},
{"lineNum":" 1065","line":"            ) -> Option<NonNull<Func>> {"},
{"lineNum":" 1066","line":"                None"},
{"lineNum":" 1067","line":"            }"},
{"lineNum":" 1068","line":""},
{"lineNum":" 1069","line":"            fn get_trampoline(&self, _module: &ModuleInfo, _sig_index: SigIndex) -> Option<Wasm> {"},
{"lineNum":" 1070","line":"                unimplemented!(\"generate_module::get_trampoline\")"},
{"lineNum":" 1071","line":"            }"},
{"lineNum":" 1072","line":"            unsafe fn do_early_trap(&self, _: Box<dyn Any>) -> ! {"},
{"lineNum":" 1073","line":"                unimplemented!(\"generate_module::do_early_trap\")"},
{"lineNum":" 1074","line":"            }"},
{"lineNum":" 1075","line":"        }"},
{"lineNum":" 1076","line":"        impl CacheGen for Placeholder {"},
{"lineNum":" 1077","line":"            fn generate_cache(&self) -> Result<(Box<[u8]>, Memory), CacheError> {"},
{"lineNum":" 1078","line":"                unimplemented!(\"generate_module::generate_cache\")"},
{"lineNum":" 1079","line":"            }"},
{"lineNum":" 1080","line":"        }"},
{"lineNum":" 1081","line":""},
{"lineNum":" 1082","line":"        ModuleInner {"},
{"lineNum":" 1083","line":"            runnable_module: Box::new(Placeholder),"},
{"lineNum":" 1084","line":"            cache_gen: Box::new(Placeholder),"},
{"lineNum":" 1085","line":"            info: ModuleInfo {"},
{"lineNum":" 1086","line":"                memories: Map::new(),"},
{"lineNum":" 1087","line":"                globals: Map::new(),"},
{"lineNum":" 1088","line":"                tables: Map::new(),"},
{"lineNum":" 1089","line":""},
{"lineNum":" 1090","line":"                // These are strictly imported and the typesystem ensures that."},
{"lineNum":" 1091","line":"                imported_functions: Map::new(),"},
{"lineNum":" 1092","line":"                imported_memories: Map::new(),"},
{"lineNum":" 1093","line":"                imported_tables: Map::new(),"},
{"lineNum":" 1094","line":"                imported_globals: Map::new(),"},
{"lineNum":" 1095","line":""},
{"lineNum":" 1096","line":"                exports: IndexMap::new(),"},
{"lineNum":" 1097","line":""},
{"lineNum":" 1098","line":"                data_initializers: Vec::new(),"},
{"lineNum":" 1099","line":"                elem_initializers: Vec::new(),"},
{"lineNum":" 1100","line":""},
{"lineNum":" 1101","line":"                start_func: None,"},
{"lineNum":" 1102","line":""},
{"lineNum":" 1103","line":"                func_assoc: Map::new(),"},
{"lineNum":" 1104","line":"                signatures: Map::new(),"},
{"lineNum":" 1105","line":"                backend: Backend::Cranelift,"},
{"lineNum":" 1106","line":""},
{"lineNum":" 1107","line":"                namespace_table: StringTable::new(),"},
{"lineNum":" 1108","line":"                name_table: StringTable::new(),"},
{"lineNum":" 1109","line":""},
{"lineNum":" 1110","line":"                em_symbol_map: None,"},
{"lineNum":" 1111","line":""},
{"lineNum":" 1112","line":"                custom_sections: HashMap::new(),"},
{"lineNum":" 1113","line":"            },"},
{"lineNum":" 1114","line":"        }"},
{"lineNum":" 1115","line":"    }"},
{"lineNum":" 1116","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "compile_debug", "date" : "2019-11-28 11:37:30", "instrumented" : 45, "covered" : 0,};
var merged_data = [];
