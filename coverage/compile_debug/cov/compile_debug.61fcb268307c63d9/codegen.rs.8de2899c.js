var data = {lines:[
{"lineNum":"    1","line":"//! The codegen module provides common functions and data structures used by multiple backends"},
{"lineNum":"    2","line":"//! during the code generation process."},
{"lineNum":"    3","line":"#[cfg(unix)]"},
{"lineNum":"    4","line":"use crate::fault::FaultInfo;"},
{"lineNum":"    5","line":"use crate::{"},
{"lineNum":"    6","line":"    backend::RunnableModule,"},
{"lineNum":"    7","line":"    backend::{Backend, CacheGen, Compiler, CompilerConfig, Features, Token},"},
{"lineNum":"    8","line":"    cache::{Artifact, Error as CacheError},"},
{"lineNum":"    9","line":"    error::{CompileError, CompileResult},"},
{"lineNum":"   10","line":"    module::{ModuleInfo, ModuleInner},"},
{"lineNum":"   11","line":"    structures::Map,"},
{"lineNum":"   12","line":"    types::{FuncIndex, FuncSig, SigIndex},"},
{"lineNum":"   13","line":"};"},
{"lineNum":"   14","line":"use smallvec::SmallVec;"},
{"lineNum":"   15","line":"use std::any::Any;"},
{"lineNum":"   16","line":"use std::collections::HashMap;"},
{"lineNum":"   17","line":"use std::fmt;"},
{"lineNum":"   18","line":"use std::fmt::Debug;"},
{"lineNum":"   19","line":"use std::marker::PhantomData;"},
{"lineNum":"   20","line":"use std::sync::{Arc, RwLock};"},
{"lineNum":"   21","line":"use wasmparser::{self, WasmDecoder};"},
{"lineNum":"   22","line":"use wasmparser::{Operator, Type as WpType};"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"/// A type that defines a function pointer, which is called when breakpoints occur."},
{"lineNum":"   25","line":"pub type BreakpointHandler ="},
{"lineNum":"   26","line":"    Box<dyn Fn(BreakpointInfo) -> Result<(), Box<dyn Any>> + Send + Sync + \'static>;"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"/// Maps instruction pointers to their breakpoint handlers."},
{"lineNum":"   29","line":"pub type BreakpointMap = Arc<HashMap<usize, BreakpointHandler>>;"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"/// An event generated during parsing of a wasm binary"},
{"lineNum":"   32","line":"#[derive(Debug)]"},
{"lineNum":"   33","line":"pub enum Event<\'a, \'b> {"},
{"lineNum":"   34","line":"    /// An internal event created by the parser used to provide hooks during code generation."},
{"lineNum":"   35","line":"    Internal(InternalEvent),"},
{"lineNum":"   36","line":"    /// An event generated by parsing a wasm operator"},
{"lineNum":"   37","line":"    Wasm(&\'b Operator<\'a>),"},
{"lineNum":"   38","line":"    /// An event generated by parsing a wasm operator that contains an owned `Operator`"},
{"lineNum":"   39","line":"    WasmOwned(Operator<\'a>),"},
{"lineNum":"   40","line":"}"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"/// Kinds of `InternalEvent`s created during parsing."},
{"lineNum":"   43","line":"pub enum InternalEvent {"},
{"lineNum":"   44","line":"    /// A function parse is about to begin."},
{"lineNum":"   45","line":"    FunctionBegin(u32),"},
{"lineNum":"   46","line":"    /// A function parsing has just completed."},
{"lineNum":"   47","line":"    FunctionEnd,"},
{"lineNum":"   48","line":"    /// A breakpoint emitted during parsing."},
{"lineNum":"   49","line":"    Breakpoint(BreakpointHandler),"},
{"lineNum":"   50","line":"    /// Indicates setting an internal field."},
{"lineNum":"   51","line":"    SetInternal(u32),"},
{"lineNum":"   52","line":"    /// Indicates getting an internal field."},
{"lineNum":"   53","line":"    GetInternal(u32),"},
{"lineNum":"   54","line":"}"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"impl fmt::Debug for InternalEvent {"},
{"lineNum":"   57","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"   58","line":"        match self {"},
{"lineNum":"   59","line":"            InternalEvent::FunctionBegin(_) => write!(f, \"FunctionBegin\"),"},
{"lineNum":"   60","line":"            InternalEvent::FunctionEnd => write!(f, \"FunctionEnd\"),"},
{"lineNum":"   61","line":"            InternalEvent::Breakpoint(_) => write!(f, \"Breakpoint\"),"},
{"lineNum":"   62","line":"            InternalEvent::SetInternal(_) => write!(f, \"SetInternal\"),"},
{"lineNum":"   63","line":"            InternalEvent::GetInternal(_) => write!(f, \"GetInternal\"),"},
{"lineNum":"   64","line":"        }"},
{"lineNum":"   65","line":"    }"},
{"lineNum":"   66","line":"}"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"/// Information for a breakpoint"},
{"lineNum":"   69","line":"#[cfg(unix)]"},
{"lineNum":"   70","line":"pub struct BreakpointInfo<\'a> {"},
{"lineNum":"   71","line":"    /// Fault."},
{"lineNum":"   72","line":"    pub fault: Option<&\'a FaultInfo>,"},
{"lineNum":"   73","line":"}"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"/// Information for a breakpoint"},
{"lineNum":"   76","line":"#[cfg(not(unix))]"},
{"lineNum":"   77","line":"pub struct BreakpointInfo {"},
{"lineNum":"   78","line":"    /// Fault placeholder."},
{"lineNum":"   79","line":"    pub fault: Option<()>,"},
{"lineNum":"   80","line":"}"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"/// A trait that represents the functions needed to be implemented to generate code for a module."},
{"lineNum":"   83","line":"pub trait ModuleCodeGenerator<FCG: FunctionCodeGenerator<E>, RM: RunnableModule, E: Debug> {"},
{"lineNum":"   84","line":"    /// Creates a new module code generator."},
{"lineNum":"   85","line":"    fn new() -> Self;"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    /// Creates a new module code generator for specified target."},
{"lineNum":"   88","line":"    fn new_with_target("},
{"lineNum":"   89","line":"        triple: Option<String>,"},
{"lineNum":"   90","line":"        cpu_name: Option<String>,"},
{"lineNum":"   91","line":"        cpu_features: Option<String>,"},
{"lineNum":"   92","line":"    ) -> Self;"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    /// Returns the backend id associated with this MCG."},
{"lineNum":"   95","line":"    fn backend_id() -> Backend;"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    /// Feeds the compiler config."},
{"lineNum":"   98","line":"    fn feed_compiler_config(&mut self, _config: &CompilerConfig) -> Result<(), E> {"},
{"lineNum":"   99","line":"        Ok(())"},
{"lineNum":"  100","line":"    }"},
{"lineNum":"  101","line":"    /// Adds an import function."},
{"lineNum":"  102","line":"    fn feed_import_function(&mut self) -> Result<(), E>;"},
{"lineNum":"  103","line":"    /// Sets the signatures."},
{"lineNum":"  104","line":"    fn feed_signatures(&mut self, signatures: Map<SigIndex, FuncSig>) -> Result<(), E>;"},
{"lineNum":"  105","line":"    /// Sets function signatures."},
{"lineNum":"  106","line":"    fn feed_function_signatures(&mut self, assoc: Map<FuncIndex, SigIndex>) -> Result<(), E>;"},
{"lineNum":"  107","line":"    /// Checks the precondition for a module."},
{"lineNum":"  108","line":"    fn check_precondition(&mut self, module_info: &ModuleInfo) -> Result<(), E>;"},
{"lineNum":"  109","line":"    /// Creates a new function and returns the function-scope code generator for it."},
{"lineNum":"  110","line":"    fn next_function(&mut self, module_info: Arc<RwLock<ModuleInfo>>) -> Result<&mut FCG, E>;"},
{"lineNum":"  111","line":"    /// Finalizes this module."},
{"lineNum":"  112","line":"    fn finalize(self, module_info: &ModuleInfo) -> Result<(RM, Box<dyn CacheGen>), E>;"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    /// Creates a module from cache."},
{"lineNum":"  115","line":"    unsafe fn from_cache(cache: Artifact, _: Token) -> Result<ModuleInner, CacheError>;"},
{"lineNum":"  116","line":"}"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"/// A streaming compiler which is designed to generated code for a module based on a stream"},
{"lineNum":"  119","line":"/// of wasm parser events."},
{"lineNum":"  120","line":"pub struct StreamingCompiler<"},
{"lineNum":"  121","line":"    MCG: ModuleCodeGenerator<FCG, RM, E>,"},
{"lineNum":"  122","line":"    FCG: FunctionCodeGenerator<E>,"},
{"lineNum":"  123","line":"    RM: RunnableModule + \'static,"},
{"lineNum":"  124","line":"    E: Debug,"},
{"lineNum":"  125","line":"    CGEN: Fn() -> MiddlewareChain,"},
{"lineNum":"  126","line":"> {"},
{"lineNum":"  127","line":"    middleware_chain_generator: CGEN,"},
{"lineNum":"  128","line":"    _phantom_mcg: PhantomData<MCG>,"},
{"lineNum":"  129","line":"    _phantom_fcg: PhantomData<FCG>,"},
{"lineNum":"  130","line":"    _phantom_rm: PhantomData<RM>,"},
{"lineNum":"  131","line":"    _phantom_e: PhantomData<E>,"},
{"lineNum":"  132","line":"}"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"/// A simple generator for a `StreamingCompiler`."},
{"lineNum":"  135","line":"pub struct SimpleStreamingCompilerGen<"},
{"lineNum":"  136","line":"    MCG: ModuleCodeGenerator<FCG, RM, E>,"},
{"lineNum":"  137","line":"    FCG: FunctionCodeGenerator<E>,"},
{"lineNum":"  138","line":"    RM: RunnableModule + \'static,"},
{"lineNum":"  139","line":"    E: Debug,"},
{"lineNum":"  140","line":"> {"},
{"lineNum":"  141","line":"    _phantom_mcg: PhantomData<MCG>,"},
{"lineNum":"  142","line":"    _phantom_fcg: PhantomData<FCG>,"},
{"lineNum":"  143","line":"    _phantom_rm: PhantomData<RM>,"},
{"lineNum":"  144","line":"    _phantom_e: PhantomData<E>,"},
{"lineNum":"  145","line":"}"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"impl<"},
{"lineNum":"  148","line":"        MCG: ModuleCodeGenerator<FCG, RM, E>,"},
{"lineNum":"  149","line":"        FCG: FunctionCodeGenerator<E>,"},
{"lineNum":"  150","line":"        RM: RunnableModule + \'static,"},
{"lineNum":"  151","line":"        E: Debug,"},
{"lineNum":"  152","line":"    > SimpleStreamingCompilerGen<MCG, FCG, RM, E>"},
{"lineNum":"  153","line":"{"},
{"lineNum":"  154","line":"    /// Create a new `StreamingCompiler`."},
{"lineNum":"  155","line":"    pub fn new() -> StreamingCompiler<MCG, FCG, RM, E, impl Fn() -> MiddlewareChain> {","class":"lineCov","hits":"1","order":"19","possible_hits":"1",},
{"lineNum":"  156","line":"        StreamingCompiler::new(|| MiddlewareChain::new())","class":"lineCov","hits":"3","order":"20","possible_hits":"3",},
{"lineNum":"  157","line":"    }","class":"linePartCov","hits":"1","order":"22","possible_hits":"2",},
{"lineNum":"  158","line":"}"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"impl<"},
{"lineNum":"  161","line":"        MCG: ModuleCodeGenerator<FCG, RM, E>,"},
{"lineNum":"  162","line":"        FCG: FunctionCodeGenerator<E>,"},
{"lineNum":"  163","line":"        RM: RunnableModule + \'static,"},
{"lineNum":"  164","line":"        E: Debug,"},
{"lineNum":"  165","line":"        CGEN: Fn() -> MiddlewareChain,"},
{"lineNum":"  166","line":"    > StreamingCompiler<MCG, FCG, RM, E, CGEN>"},
{"lineNum":"  167","line":"{"},
{"lineNum":"  168","line":"    /// Create a new `StreamingCompiler` with the given `MiddlewareChain`."},
{"lineNum":"  169","line":"    pub fn new(chain_gen: CGEN) -> Self {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  170","line":"        Self {"},
{"lineNum":"  171","line":"            middleware_chain_generator: chain_gen,"},
{"lineNum":"  172","line":"            _phantom_mcg: PhantomData,"},
{"lineNum":"  173","line":"            _phantom_fcg: PhantomData,"},
{"lineNum":"  174","line":"            _phantom_rm: PhantomData,"},
{"lineNum":"  175","line":"            _phantom_e: PhantomData,"},
{"lineNum":"  176","line":"        }"},
{"lineNum":"  177","line":"    }","class":"linePartCov","hits":"1","order":"21","possible_hits":"2",},
{"lineNum":"  178","line":"}"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"/// Create a new `ValidatingParserConfig` with the given features."},
{"lineNum":"  181","line":"pub fn validating_parser_config(features: &Features) -> wasmparser::ValidatingParserConfig {","class":"lineCov","hits":"1","order":"57","possible_hits":"1",},
{"lineNum":"  182","line":"    wasmparser::ValidatingParserConfig {","class":"lineCov","hits":"1","order":"61","possible_hits":"1",},
{"lineNum":"  183","line":"        operator_config: wasmparser::OperatorValidatorConfig {","class":"lineCov","hits":"1","order":"60","possible_hits":"1",},
{"lineNum":"  184","line":"            enable_threads: features.threads,","class":"lineCov","hits":"2","order":"58","possible_hits":"2",},
{"lineNum":"  185","line":"            enable_reference_types: false,"},
{"lineNum":"  186","line":"            enable_simd: features.simd,","class":"lineCov","hits":"1","order":"59","possible_hits":"1",},
{"lineNum":"  187","line":"            enable_bulk_memory: false,"},
{"lineNum":"  188","line":"            enable_multi_value: false,"},
{"lineNum":"  189","line":"        },"},
{"lineNum":"  190","line":"    }"},
{"lineNum":"  191","line":"}","class":"linePartCov","hits":"1","order":"62","possible_hits":"2",},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"fn validate_with_features(bytes: &[u8], features: &Features) -> CompileResult<()> {","class":"linePartCov","hits":"1","order":"55","possible_hits":"2",},
{"lineNum":"  194","line":"    let mut parser ="},
{"lineNum":"  195","line":"        wasmparser::ValidatingParser::new(bytes, Some(validating_parser_config(features)));","class":"lineCov","hits":"2","order":"56","possible_hits":"2",},
{"lineNum":"  196","line":"    loop {","class":"lineCov","hits":"2","order":"63","possible_hits":"2",},
{"lineNum":"  197","line":"        let state = parser.read();","class":"lineCov","hits":"2","order":"64","possible_hits":"2",},
{"lineNum":"  198","line":"        match *state {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"            wasmparser::ParserState::EndWasm => break Ok(()),","class":"lineCov","hits":"1","order":"65","possible_hits":"1",},
{"lineNum":"  200","line":"            wasmparser::ParserState::Error(err) => Err(CompileError::ValidationError {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  201","line":"                msg: err.message.to_string(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  202","line":"            })?,","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  203","line":"            _ => {}"},
{"lineNum":"  204","line":"        }"},
{"lineNum":"  205","line":"    }"},
{"lineNum":"  206","line":"}","class":"linePartCov","hits":"3","order":"66","possible_hits":"5",},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"impl<"},
{"lineNum":"  209","line":"        MCG: ModuleCodeGenerator<FCG, RM, E>,"},
{"lineNum":"  210","line":"        FCG: FunctionCodeGenerator<E>,"},
{"lineNum":"  211","line":"        RM: RunnableModule + \'static,"},
{"lineNum":"  212","line":"        E: Debug,"},
{"lineNum":"  213","line":"        CGEN: Fn() -> MiddlewareChain,"},
{"lineNum":"  214","line":"    > Compiler for StreamingCompiler<MCG, FCG, RM, E, CGEN>"},
{"lineNum":"  215","line":"{"},
{"lineNum":"  216","line":"    fn compile(","class":"linePartCov","hits":"1","order":"44","possible_hits":"2",},
{"lineNum":"  217","line":"        &self,"},
{"lineNum":"  218","line":"        wasm: &[u8],"},
{"lineNum":"  219","line":"        compiler_config: CompilerConfig,"},
{"lineNum":"  220","line":"        _: Token,"},
{"lineNum":"  221","line":"    ) -> CompileResult<ModuleInner> {"},
{"lineNum":"  222","line":"        if requires_pre_validation(MCG::backend_id()) {","class":"lineCov","hits":"4","order":"45","possible_hits":"4",},
{"lineNum":"  223","line":"            validate_with_features(wasm, &compiler_config.features)?;","class":"linePartCov","hits":"2","order":"54","possible_hits":"4",},
{"lineNum":"  224","line":"        }"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"        let mut mcg = match MCG::backend_id() {","class":"lineCov","hits":"1","order":"67","possible_hits":"1",},
{"lineNum":"  227","line":"            Backend::LLVM => MCG::new_with_target(","class":"lineCov","hits":"2","order":"68","possible_hits":"2",},
{"lineNum":"  228","line":"                compiler_config.triple.clone(),","class":"lineCov","hits":"1","order":"69","possible_hits":"1",},
{"lineNum":"  229","line":"                compiler_config.cpu_name.clone(),","class":"lineCov","hits":"1","order":"70","possible_hits":"1",},
{"lineNum":"  230","line":"                compiler_config.cpu_features.clone(),","class":"lineCov","hits":"1","order":"71","possible_hits":"1",},
{"lineNum":"  231","line":"            ),","class":"linePartCov","hits":"1","order":"392","possible_hits":"2",},
{"lineNum":"  232","line":"            _ => MCG::new(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  233","line":"        };"},
{"lineNum":"  234","line":"        let mut chain = (self.middleware_chain_generator)();","class":"lineCov","hits":"1","order":"393","possible_hits":"1",},
{"lineNum":"  235","line":"        let info = crate::parse::read_module(","class":"linePartCov","hits":"3","order":"399","possible_hits":"4",},
{"lineNum":"  236","line":"            wasm,","class":"lineCov","hits":"1","order":"397","possible_hits":"1",},
{"lineNum":"  237","line":"            MCG::backend_id(),","class":"lineCov","hits":"1","order":"398","possible_hits":"1",},
{"lineNum":"  238","line":"            &mut mcg,"},
{"lineNum":"  239","line":"            &mut chain,"},
{"lineNum":"  240","line":"            &compiler_config,"},
{"lineNum":"  241","line":"        )?;","class":"linePartCov","hits":"1","order":"511","possible_hits":"7",},
{"lineNum":"  242","line":"        let (exec_context, cache_gen) =","class":"lineCov","hits":"1","order":"739","possible_hits":"1",},
{"lineNum":"  243","line":"            mcg.finalize(&info.read().unwrap())","class":"linePartCov","hits":"3","order":"512","possible_hits":"6",},
{"lineNum":"  244","line":"                .map_err(|x| CompileError::InternalError {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  245","line":"                    msg: format!(\"{:?}\", x),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  246","line":"                })?;","class":"linePartCov","hits":"3","order":"738","possible_hits":"9",},
{"lineNum":"  247","line":"        Ok(ModuleInner {","class":"lineCov","hits":"1","order":"743","possible_hits":"1",},
{"lineNum":"  248","line":"            cache_gen,","class":"lineCov","hits":"1","order":"740","possible_hits":"1",},
{"lineNum":"  249","line":"            runnable_module: Box::new(exec_context),","class":"lineCov","hits":"2","order":"741","possible_hits":"2",},
{"lineNum":"  250","line":"            info: Arc::try_unwrap(info).unwrap().into_inner().unwrap(),","class":"lineCov","hits":"2","order":"742","possible_hits":"2",},
{"lineNum":"  251","line":"        })","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  252","line":"    }","class":"linePartCov","hits":"2","order":"744","possible_hits":"14",},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"    unsafe fn from_cache(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  255","line":"        &self,"},
{"lineNum":"  256","line":"        artifact: Artifact,"},
{"lineNum":"  257","line":"        token: Token,"},
{"lineNum":"  258","line":"    ) -> Result<ModuleInner, CacheError> {"},
{"lineNum":"  259","line":"        MCG::from_cache(artifact, token)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  261","line":"}"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"fn requires_pre_validation(backend: Backend) -> bool {","class":"lineCov","hits":"1","order":"49","possible_hits":"1",},
{"lineNum":"  264","line":"    match backend {","class":"linePartCov","hits":"1","order":"52","possible_hits":"3",},
{"lineNum":"  265","line":"        Backend::Cranelift => true,","class":"linePartCov","hits":"1","order":"50","possible_hits":"2",},
{"lineNum":"  266","line":"        Backend::LLVM => true,","class":"lineCov","hits":"1","order":"51","possible_hits":"1",},
{"lineNum":"  267","line":"        Backend::Singlepass => false,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  268","line":"        Backend::Auto => false,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":"    }"},
{"lineNum":"  270","line":"}","class":"linePartCov","hits":"1","order":"53","possible_hits":"2",},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"/// A sink for parse events."},
{"lineNum":"  273","line":"pub struct EventSink<\'a, \'b> {"},
{"lineNum":"  274","line":"    buffer: SmallVec<[Event<\'a, \'b>; 2]>,"},
{"lineNum":"  275","line":"}"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"impl<\'a, \'b> EventSink<\'a, \'b> {"},
{"lineNum":"  278","line":"    /// Push a new `Event` to this sink."},
{"lineNum":"  279","line":"    pub fn push(&mut self, ev: Event<\'a, \'b>) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  280","line":"        self.buffer.push(ev);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  281","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  282","line":"}"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"/// A container for a chain of middlewares."},
{"lineNum":"  285","line":"pub struct MiddlewareChain {"},
{"lineNum":"  286","line":"    chain: Vec<Box<dyn GenericFunctionMiddleware>>,"},
{"lineNum":"  287","line":"}"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"impl MiddlewareChain {"},
{"lineNum":"  290","line":"    /// Create a new empty `MiddlewareChain`."},
{"lineNum":"  291","line":"    pub fn new() -> MiddlewareChain {","class":"lineCov","hits":"1","order":"394","possible_hits":"1",},
{"lineNum":"  292","line":"        MiddlewareChain { chain: vec![] }","class":"lineCov","hits":"1","order":"395","possible_hits":"1",},
{"lineNum":"  293","line":"    }","class":"linePartCov","hits":"1","order":"396","possible_hits":"2",},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"    /// Push a new `FunctionMiddleware` to this `MiddlewareChain`."},
{"lineNum":"  296","line":"    pub fn push<M: FunctionMiddleware + \'static>(&mut self, m: M) {"},
{"lineNum":"  297","line":"        self.chain.push(Box::new(m));"},
{"lineNum":"  298","line":"    }"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"    /// Run this chain with the provided function code generator, event and module info."},
{"lineNum":"  301","line":"    pub(crate) fn run<E: Debug, FCG: FunctionCodeGenerator<E>>(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  302","line":"        &mut self,"},
{"lineNum":"  303","line":"        fcg: Option<&mut FCG>,"},
{"lineNum":"  304","line":"        ev: Event,"},
{"lineNum":"  305","line":"        module_info: &ModuleInfo,"},
{"lineNum":"  306","line":"    ) -> Result<(), String> {"},
{"lineNum":"  307","line":"        let mut sink = EventSink {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  308","line":"            buffer: SmallVec::new(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  309","line":"        };"},
{"lineNum":"  310","line":"        sink.push(ev);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  311","line":"        for m in &mut self.chain {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  312","line":"            let prev: SmallVec<[Event; 2]> = sink.buffer.drain().collect();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  313","line":"            for ev in prev {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  314","line":"                m.feed_event(ev, module_info, &mut sink)?;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  315","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  316","line":"        }"},
{"lineNum":"  317","line":"        if let Some(fcg) = fcg {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  318","line":"            for ev in sink.buffer {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  319","line":"                fcg.feed_event(ev, module_info)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  320","line":"                    .map_err(|x| format!(\"{:?}\", x))?;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  321","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  322","line":"        }"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"        Ok(())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  325","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  326","line":"}"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"/// A trait that represents the signature required to implement middleware for a function."},
{"lineNum":"  329","line":"pub trait FunctionMiddleware {"},
{"lineNum":"  330","line":"    /// The error type for this middleware\'s functions."},
{"lineNum":"  331","line":"    type Error: Debug;"},
{"lineNum":"  332","line":"    /// Processes the given event, module info and sink."},
{"lineNum":"  333","line":"    fn feed_event<\'a, \'b: \'a>("},
{"lineNum":"  334","line":"        &mut self,"},
{"lineNum":"  335","line":"        op: Event<\'a, \'b>,"},
{"lineNum":"  336","line":"        module_info: &ModuleInfo,"},
{"lineNum":"  337","line":"        sink: &mut EventSink<\'a, \'b>,"},
{"lineNum":"  338","line":"    ) -> Result<(), Self::Error>;"},
{"lineNum":"  339","line":"}"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"pub(crate) trait GenericFunctionMiddleware {"},
{"lineNum":"  342","line":"    fn feed_event<\'a, \'b: \'a>("},
{"lineNum":"  343","line":"        &mut self,"},
{"lineNum":"  344","line":"        op: Event<\'a, \'b>,"},
{"lineNum":"  345","line":"        module_info: &ModuleInfo,"},
{"lineNum":"  346","line":"        sink: &mut EventSink<\'a, \'b>,"},
{"lineNum":"  347","line":"    ) -> Result<(), String>;"},
{"lineNum":"  348","line":"}"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"impl<E: Debug, T: FunctionMiddleware<Error = E>> GenericFunctionMiddleware for T {"},
{"lineNum":"  351","line":"    fn feed_event<\'a, \'b: \'a>("},
{"lineNum":"  352","line":"        &mut self,"},
{"lineNum":"  353","line":"        op: Event<\'a, \'b>,"},
{"lineNum":"  354","line":"        module_info: &ModuleInfo,"},
{"lineNum":"  355","line":"        sink: &mut EventSink<\'a, \'b>,"},
{"lineNum":"  356","line":"    ) -> Result<(), String> {"},
{"lineNum":"  357","line":"        <Self as FunctionMiddleware>::feed_event(self, op, module_info, sink)"},
{"lineNum":"  358","line":"            .map_err(|x| format!(\"{:?}\", x))"},
{"lineNum":"  359","line":"    }"},
{"lineNum":"  360","line":"}"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"/// The function-scope code generator trait."},
{"lineNum":"  363","line":"pub trait FunctionCodeGenerator<E: Debug> {"},
{"lineNum":"  364","line":"    /// Sets the return type."},
{"lineNum":"  365","line":"    fn feed_return(&mut self, ty: WpType) -> Result<(), E>;"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"    /// Adds a parameter to the function."},
{"lineNum":"  368","line":"    fn feed_param(&mut self, ty: WpType) -> Result<(), E>;"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"    /// Adds `n` locals to the function."},
{"lineNum":"  371","line":"    fn feed_local(&mut self, ty: WpType, n: usize) -> Result<(), E>;"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"    /// Called before the first call to `feed_opcode`."},
{"lineNum":"  374","line":"    fn begin_body(&mut self, module_info: &ModuleInfo) -> Result<(), E>;"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"    /// Called for each operator."},
{"lineNum":"  377","line":"    fn feed_event(&mut self, op: Event, module_info: &ModuleInfo) -> Result<(), E>;"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"    /// Finalizes the function."},
{"lineNum":"  380","line":"    fn finalize(&mut self) -> Result<(), E>;"},
{"lineNum":"  381","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "compile_debug", "date" : "2019-11-28 11:37:30", "instrumented" : 79, "covered" : 46,};
var merged_data = [];
