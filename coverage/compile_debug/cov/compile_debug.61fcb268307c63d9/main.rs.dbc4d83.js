var data = {lines:[
{"lineNum":"    1","line":"use std::env;","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":"    2","line":"use std::fs::{File};"},
{"lineNum":"    3","line":"use std::io;"},
{"lineNum":"    4","line":"use std::io::Read;"},
{"lineNum":"    5","line":"use std::path::PathBuf;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"extern crate wasmer_llvm_backend;"},
{"lineNum":"    9","line":"extern crate wasmer_runtime_core;"},
{"lineNum":"   10","line":"extern crate wasmer_runtime;"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"use wasmer_runtime::{"},
{"lineNum":"   13","line":"    compile_with,"},
{"lineNum":"   14","line":"};"},
{"lineNum":"   15","line":"use wasmer_runtime_core::backend::Compiler;"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"/// Read the contents of a file"},
{"lineNum":"   18","line":"fn read_contents(path: &PathBuf) -> Result<Vec<u8>, io::Error> {","class":"linePartCov","hits":"1","order":"9","possible_hits":"2",},
{"lineNum":"   19","line":"    let mut buffer: Vec<u8> = Vec::new();","class":"lineCov","hits":"1","order":"10","possible_hits":"1",},
{"lineNum":"   20","line":"    let mut file = File::open(path)?;","class":"linePartCov","hits":"1","order":"11","possible_hits":"7",},
{"lineNum":"   21","line":"    file.read_to_end(&mut buffer)?;","class":"linePartCov","hits":"2","order":"12","possible_hits":"5",},
{"lineNum":"   22","line":"    // We force to close the file"},
{"lineNum":"   23","line":"    drop(file);","class":"lineCov","hits":"1","order":"13","possible_hits":"1",},
{"lineNum":"   24","line":"    Ok(buffer)","class":"lineCov","hits":"1","order":"14","possible_hits":"1",},
{"lineNum":"   25","line":"}","class":"linePartCov","hits":"2","order":"15","possible_hits":"9",},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"fn get_llvm_compiler() -> impl Compiler {","class":"lineCov","hits":"1","order":"17","possible_hits":"1",},
{"lineNum":"   28","line":"    use wasmer_llvm_backend::LLVMCompiler;"},
{"lineNum":"   29","line":"    LLVMCompiler::new()","class":"lineCov","hits":"1","order":"18","possible_hits":"1",},
{"lineNum":"   30","line":"}","class":"linePartCov","hits":"1","order":"23","possible_hits":"2",},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"fn main() {","class":"linePartCov","hits":"1","order":"2","possible_hits":"2",},
{"lineNum":"   33","line":"    println!(\"Start compile_debug\");","class":"lineCov","hits":"2","order":"3","possible_hits":"2",},
{"lineNum":"   34","line":"\tlet args: Vec<String> = env::args().collect();","class":"lineCov","hits":"1","order":"4","possible_hits":"1",},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"\t// first argument is wasm file path"},
{"lineNum":"   37","line":"\tlet wasm_path = std::path::PathBuf::from(&args[1]);","class":"lineCov","hits":"1","order":"6","possible_hits":"1",},
{"lineNum":"   38","line":"    println!(\"File path: {:?}\", wasm_path);","class":"lineCov","hits":"2","order":"7","possible_hits":"2",},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"\tlet wasm_binary: Vec<u8> = read_contents(&wasm_path).unwrap();","class":"lineCov","hits":"1","order":"8","possible_hits":"1",},
{"lineNum":"   41","line":"    //println!(\"wasm_binary: {:?}\", wasm_binary);"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    // CALL THE API HERE"},
{"lineNum":"   44","line":"    let _res = compile_with(&wasm_binary[..], &get_llvm_compiler());","class":"lineCov","hits":"2","order":"16","possible_hits":"2",},
{"lineNum":"   45","line":"    // CALL THE API HERE"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    println!(\"OK\");","class":"lineCov","hits":"1","order":"759","possible_hits":"1",},
{"lineNum":"   48","line":"}","class":"linePartCov","hits":"1","order":"760","possible_hits":"5",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "compile_debug", "date" : "2019-11-28 11:37:30", "instrumented" : 20, "covered" : 19,};
var merged_data = [];
