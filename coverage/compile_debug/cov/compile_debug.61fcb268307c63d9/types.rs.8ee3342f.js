var data = {lines:[
{"lineNum":"    1","line":"//! The runtime types modules represent type used within the wasm runtime and helper functions to"},
{"lineNum":"    2","line":"//! convert to other represenations."},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"use crate::{memory::MemoryType, module::ModuleInfo, structures::TypedIndex, units::Pages};"},
{"lineNum":"    5","line":"use std::borrow::Cow;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"/// Represents a WebAssembly type."},
{"lineNum":"    8","line":"#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialEq, Eq, Hash)]","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"    9","line":"pub enum Type {"},
{"lineNum":"   10","line":"    /// The `i32` type."},
{"lineNum":"   11","line":"    I32,"},
{"lineNum":"   12","line":"    /// The `i64` type."},
{"lineNum":"   13","line":"    I64,"},
{"lineNum":"   14","line":"    /// The `f32` type."},
{"lineNum":"   15","line":"    F32,"},
{"lineNum":"   16","line":"    /// The `f64` type."},
{"lineNum":"   17","line":"    F64,"},
{"lineNum":"   18","line":"    /// The `v128` type."},
{"lineNum":"   19","line":"    V128,"},
{"lineNum":"   20","line":"}"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"impl std::fmt::Display for Type {"},
{"lineNum":"   23","line":"    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {"},
{"lineNum":"   24","line":"        write!(f, \"{:?}\", self)"},
{"lineNum":"   25","line":"    }"},
{"lineNum":"   26","line":"}"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"/// Represents a WebAssembly value."},
{"lineNum":"   29","line":"///"},
{"lineNum":"   30","line":"/// As the number of types in WebAssembly expand,"},
{"lineNum":"   31","line":"/// this structure will expand as well."},
{"lineNum":"   32","line":"#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   33","line":"pub enum Value {"},
{"lineNum":"   34","line":"    /// The `i32` type."},
{"lineNum":"   35","line":"    I32(i32),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   36","line":"    /// The `i64` type."},
{"lineNum":"   37","line":"    I64(i64),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   38","line":"    /// The `f32` type."},
{"lineNum":"   39","line":"    F32(f32),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   40","line":"    /// The `f64` type."},
{"lineNum":"   41","line":"    F64(f64),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   42","line":"    /// The `v128` type."},
{"lineNum":"   43","line":"    V128(u128),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   44","line":"}"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"impl Value {"},
{"lineNum":"   47","line":"    /// The `Type` of this `Value`."},
{"lineNum":"   48","line":"    pub fn ty(&self) -> Type {"},
{"lineNum":"   49","line":"        match self {"},
{"lineNum":"   50","line":"            Value::I32(_) => Type::I32,"},
{"lineNum":"   51","line":"            Value::I64(_) => Type::I64,"},
{"lineNum":"   52","line":"            Value::F32(_) => Type::F32,"},
{"lineNum":"   53","line":"            Value::F64(_) => Type::F64,"},
{"lineNum":"   54","line":"            Value::V128(_) => Type::V128,"},
{"lineNum":"   55","line":"        }"},
{"lineNum":"   56","line":"    }"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    /// Convert this `Value` to a u128 binary representation."},
{"lineNum":"   59","line":"    pub fn to_u128(&self) -> u128 {"},
{"lineNum":"   60","line":"        match *self {"},
{"lineNum":"   61","line":"            Value::I32(x) => x as u128,"},
{"lineNum":"   62","line":"            Value::I64(x) => x as u128,"},
{"lineNum":"   63","line":"            Value::F32(x) => f32::to_bits(x) as u128,"},
{"lineNum":"   64","line":"            Value::F64(x) => f64::to_bits(x) as u128,"},
{"lineNum":"   65","line":"            Value::V128(x) => x,"},
{"lineNum":"   66","line":"        }"},
{"lineNum":"   67","line":"    }"},
{"lineNum":"   68","line":"}"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"impl From<i32> for Value {"},
{"lineNum":"   71","line":"    fn from(i: i32) -> Self {"},
{"lineNum":"   72","line":"        Value::I32(i)"},
{"lineNum":"   73","line":"    }"},
{"lineNum":"   74","line":"}"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"impl From<i64> for Value {"},
{"lineNum":"   77","line":"    fn from(i: i64) -> Self {"},
{"lineNum":"   78","line":"        Value::I64(i)"},
{"lineNum":"   79","line":"    }"},
{"lineNum":"   80","line":"}"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"impl From<f32> for Value {"},
{"lineNum":"   83","line":"    fn from(f: f32) -> Self {"},
{"lineNum":"   84","line":"        Value::F32(f)"},
{"lineNum":"   85","line":"    }"},
{"lineNum":"   86","line":"}"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"impl From<f64> for Value {"},
{"lineNum":"   89","line":"    fn from(f: f64) -> Self {"},
{"lineNum":"   90","line":"        Value::F64(f)"},
{"lineNum":"   91","line":"    }"},
{"lineNum":"   92","line":"}"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"impl From<u128> for Value {"},
{"lineNum":"   95","line":"    fn from(v: u128) -> Self {"},
{"lineNum":"   96","line":"        Value::V128(v)"},
{"lineNum":"   97","line":"    }"},
{"lineNum":"   98","line":"}"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"/// Represents a native wasm type."},
{"lineNum":"  101","line":"pub unsafe trait NativeWasmType: Copy + Into<Value>"},
{"lineNum":"  102","line":"where"},
{"lineNum":"  103","line":"    Self: Sized,"},
{"lineNum":"  104","line":"{"},
{"lineNum":"  105","line":"    /// Type for this `NativeWasmType`."},
{"lineNum":"  106","line":"    const TYPE: Type;"},
{"lineNum":"  107","line":"    /// Convert from u64 bites to self."},
{"lineNum":"  108","line":"    fn from_binary(bits: u64) -> Self;"},
{"lineNum":"  109","line":"    /// Convert self to u64 binary representation."},
{"lineNum":"  110","line":"    fn to_binary(self) -> u64;"},
{"lineNum":"  111","line":"}"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"unsafe impl NativeWasmType for i32 {"},
{"lineNum":"  114","line":"    const TYPE: Type = Type::I32;"},
{"lineNum":"  115","line":"    fn from_binary(bits: u64) -> Self {"},
{"lineNum":"  116","line":"        bits as _"},
{"lineNum":"  117","line":"    }"},
{"lineNum":"  118","line":"    fn to_binary(self) -> u64 {"},
{"lineNum":"  119","line":"        self as _"},
{"lineNum":"  120","line":"    }"},
{"lineNum":"  121","line":"}"},
{"lineNum":"  122","line":"unsafe impl NativeWasmType for i64 {"},
{"lineNum":"  123","line":"    const TYPE: Type = Type::I64;"},
{"lineNum":"  124","line":"    fn from_binary(bits: u64) -> Self {"},
{"lineNum":"  125","line":"        bits as _"},
{"lineNum":"  126","line":"    }"},
{"lineNum":"  127","line":"    fn to_binary(self) -> u64 {"},
{"lineNum":"  128","line":"        self as _"},
{"lineNum":"  129","line":"    }"},
{"lineNum":"  130","line":"}"},
{"lineNum":"  131","line":"unsafe impl NativeWasmType for f32 {"},
{"lineNum":"  132","line":"    const TYPE: Type = Type::F32;"},
{"lineNum":"  133","line":"    fn from_binary(bits: u64) -> Self {"},
{"lineNum":"  134","line":"        f32::from_bits(bits as u32)"},
{"lineNum":"  135","line":"    }"},
{"lineNum":"  136","line":"    fn to_binary(self) -> u64 {"},
{"lineNum":"  137","line":"        self.to_bits() as _"},
{"lineNum":"  138","line":"    }"},
{"lineNum":"  139","line":"}"},
{"lineNum":"  140","line":"unsafe impl NativeWasmType for f64 {"},
{"lineNum":"  141","line":"    const TYPE: Type = Type::F64;"},
{"lineNum":"  142","line":"    fn from_binary(bits: u64) -> Self {"},
{"lineNum":"  143","line":"        f64::from_bits(bits)"},
{"lineNum":"  144","line":"    }"},
{"lineNum":"  145","line":"    fn to_binary(self) -> u64 {"},
{"lineNum":"  146","line":"        self.to_bits()"},
{"lineNum":"  147","line":"    }"},
{"lineNum":"  148","line":"}"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"/// A trait to represent a wasm extern type."},
{"lineNum":"  151","line":"pub unsafe trait WasmExternType: Copy"},
{"lineNum":"  152","line":"where"},
{"lineNum":"  153","line":"    Self: Sized,"},
{"lineNum":"  154","line":"{"},
{"lineNum":"  155","line":"    /// Native wasm type for this `WasmExternType`."},
{"lineNum":"  156","line":"    type Native: NativeWasmType;"},
{"lineNum":"  157","line":"    /// Convert from given `Native` type to self."},
{"lineNum":"  158","line":"    fn from_native(native: Self::Native) -> Self;"},
{"lineNum":"  159","line":"    /// Convert self to `Native` type."},
{"lineNum":"  160","line":"    fn to_native(self) -> Self::Native;"},
{"lineNum":"  161","line":"}"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"unsafe impl WasmExternType for i8 {"},
{"lineNum":"  164","line":"    type Native = i32;"},
{"lineNum":"  165","line":"    fn from_native(native: Self::Native) -> Self {"},
{"lineNum":"  166","line":"        native as _"},
{"lineNum":"  167","line":"    }"},
{"lineNum":"  168","line":"    fn to_native(self) -> Self::Native {"},
{"lineNum":"  169","line":"        self as _"},
{"lineNum":"  170","line":"    }"},
{"lineNum":"  171","line":"}"},
{"lineNum":"  172","line":"unsafe impl WasmExternType for u8 {"},
{"lineNum":"  173","line":"    type Native = i32;"},
{"lineNum":"  174","line":"    fn from_native(native: Self::Native) -> Self {"},
{"lineNum":"  175","line":"        native as _"},
{"lineNum":"  176","line":"    }"},
{"lineNum":"  177","line":"    fn to_native(self) -> Self::Native {"},
{"lineNum":"  178","line":"        self as _"},
{"lineNum":"  179","line":"    }"},
{"lineNum":"  180","line":"}"},
{"lineNum":"  181","line":"unsafe impl WasmExternType for i16 {"},
{"lineNum":"  182","line":"    type Native = i32;"},
{"lineNum":"  183","line":"    fn from_native(native: Self::Native) -> Self {"},
{"lineNum":"  184","line":"        native as _"},
{"lineNum":"  185","line":"    }"},
{"lineNum":"  186","line":"    fn to_native(self) -> Self::Native {"},
{"lineNum":"  187","line":"        self as _"},
{"lineNum":"  188","line":"    }"},
{"lineNum":"  189","line":"}"},
{"lineNum":"  190","line":"unsafe impl WasmExternType for u16 {"},
{"lineNum":"  191","line":"    type Native = i32;"},
{"lineNum":"  192","line":"    fn from_native(native: Self::Native) -> Self {"},
{"lineNum":"  193","line":"        native as _"},
{"lineNum":"  194","line":"    }"},
{"lineNum":"  195","line":"    fn to_native(self) -> Self::Native {"},
{"lineNum":"  196","line":"        self as _"},
{"lineNum":"  197","line":"    }"},
{"lineNum":"  198","line":"}"},
{"lineNum":"  199","line":"unsafe impl WasmExternType for i32 {"},
{"lineNum":"  200","line":"    type Native = i32;"},
{"lineNum":"  201","line":"    fn from_native(native: Self::Native) -> Self {"},
{"lineNum":"  202","line":"        native"},
{"lineNum":"  203","line":"    }"},
{"lineNum":"  204","line":"    fn to_native(self) -> Self::Native {"},
{"lineNum":"  205","line":"        self"},
{"lineNum":"  206","line":"    }"},
{"lineNum":"  207","line":"}"},
{"lineNum":"  208","line":"unsafe impl WasmExternType for u32 {"},
{"lineNum":"  209","line":"    type Native = i32;"},
{"lineNum":"  210","line":"    fn from_native(native: Self::Native) -> Self {"},
{"lineNum":"  211","line":"        native as _"},
{"lineNum":"  212","line":"    }"},
{"lineNum":"  213","line":"    fn to_native(self) -> Self::Native {"},
{"lineNum":"  214","line":"        self as _"},
{"lineNum":"  215","line":"    }"},
{"lineNum":"  216","line":"}"},
{"lineNum":"  217","line":"unsafe impl WasmExternType for i64 {"},
{"lineNum":"  218","line":"    type Native = i64;"},
{"lineNum":"  219","line":"    fn from_native(native: Self::Native) -> Self {"},
{"lineNum":"  220","line":"        native"},
{"lineNum":"  221","line":"    }"},
{"lineNum":"  222","line":"    fn to_native(self) -> Self::Native {"},
{"lineNum":"  223","line":"        self"},
{"lineNum":"  224","line":"    }"},
{"lineNum":"  225","line":"}"},
{"lineNum":"  226","line":"unsafe impl WasmExternType for u64 {"},
{"lineNum":"  227","line":"    type Native = i64;"},
{"lineNum":"  228","line":"    fn from_native(native: Self::Native) -> Self {"},
{"lineNum":"  229","line":"        native as _"},
{"lineNum":"  230","line":"    }"},
{"lineNum":"  231","line":"    fn to_native(self) -> Self::Native {"},
{"lineNum":"  232","line":"        self as _"},
{"lineNum":"  233","line":"    }"},
{"lineNum":"  234","line":"}"},
{"lineNum":"  235","line":"unsafe impl WasmExternType for f32 {"},
{"lineNum":"  236","line":"    type Native = f32;"},
{"lineNum":"  237","line":"    fn from_native(native: Self::Native) -> Self {"},
{"lineNum":"  238","line":"        native"},
{"lineNum":"  239","line":"    }"},
{"lineNum":"  240","line":"    fn to_native(self) -> Self::Native {"},
{"lineNum":"  241","line":"        self"},
{"lineNum":"  242","line":"    }"},
{"lineNum":"  243","line":"}"},
{"lineNum":"  244","line":"unsafe impl WasmExternType for f64 {"},
{"lineNum":"  245","line":"    type Native = f64;"},
{"lineNum":"  246","line":"    fn from_native(native: Self::Native) -> Self {"},
{"lineNum":"  247","line":"        native"},
{"lineNum":"  248","line":"    }"},
{"lineNum":"  249","line":"    fn to_native(self) -> Self::Native {"},
{"lineNum":"  250","line":"        self"},
{"lineNum":"  251","line":"    }"},
{"lineNum":"  252","line":"}"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"// pub trait IntegerAtomic"},
{"lineNum":"  255","line":"// where"},
{"lineNum":"  256","line":"//     Self: Sized"},
{"lineNum":"  257","line":"// {"},
{"lineNum":"  258","line":"//     type Primitive;"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"//     fn add(&self, other: Self::Primitive) -> Self::Primitive;"},
{"lineNum":"  261","line":"//     fn sub(&self, other: Self::Primitive) -> Self::Primitive;"},
{"lineNum":"  262","line":"//     fn and(&self, other: Self::Primitive) -> Self::Primitive;"},
{"lineNum":"  263","line":"//     fn or(&self, other: Self::Primitive) -> Self::Primitive;"},
{"lineNum":"  264","line":"//     fn xor(&self, other: Self::Primitive) -> Self::Primitive;"},
{"lineNum":"  265","line":"//     fn load(&self) -> Self::Primitive;"},
{"lineNum":"  266","line":"//     fn store(&self, other: Self::Primitive) -> Self::Primitive;"},
{"lineNum":"  267","line":"//     fn compare_exchange(&self, expected: Self::Primitive, new: Self::Primitive) -> Self::Primitive;"},
{"lineNum":"  268","line":"//     fn swap(&self, other: Self::Primitive) -> Self::Primitive;"},
{"lineNum":"  269","line":"// }"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"/// Trait for a Value type."},
{"lineNum":"  272","line":"pub unsafe trait ValueType: Copy"},
{"lineNum":"  273","line":"where"},
{"lineNum":"  274","line":"    Self: Sized,"},
{"lineNum":"  275","line":"{"},
{"lineNum":"  276","line":"}"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"macro_rules! convert_value_impl {"},
{"lineNum":"  279","line":"    ($t:ty) => {"},
{"lineNum":"  280","line":"        unsafe impl ValueType for $t {}"},
{"lineNum":"  281","line":"    };"},
{"lineNum":"  282","line":"    ( $($t:ty),* ) => {"},
{"lineNum":"  283","line":"        $("},
{"lineNum":"  284","line":"            convert_value_impl!($t);"},
{"lineNum":"  285","line":"        )*"},
{"lineNum":"  286","line":"    };"},
{"lineNum":"  287","line":"}"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"convert_value_impl!(u8, i8, u16, i16, u32, i32, u64, i64, f32, f64);"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"/// Kinds of element types."},
{"lineNum":"  292","line":"#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialEq, Eq)]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  293","line":"pub enum ElementType {"},
{"lineNum":"  294","line":"    /// Any wasm function."},
{"lineNum":"  295","line":"    Anyfunc,"},
{"lineNum":"  296","line":"}"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"/// Describes the properties of a table including the element types, minimum and optional maximum,"},
{"lineNum":"  299","line":"/// number of elements in the table."},
{"lineNum":"  300","line":"#[derive(Serialize, Deserialize, Debug, Clone, Copy)]","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  301","line":"pub struct TableDescriptor {"},
{"lineNum":"  302","line":"    /// Type of data stored in this table."},
{"lineNum":"  303","line":"    pub element: ElementType,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  304","line":"    /// The minimum number of elements that must be stored in this table."},
{"lineNum":"  305","line":"    pub minimum: u32,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  306","line":"    /// The maximum number of elements in this table."},
{"lineNum":"  307","line":"    pub maximum: Option<u32>,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  308","line":"}"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"impl TableDescriptor {"},
{"lineNum":"  311","line":"    pub(crate) fn fits_in_imported(&self, imported: TableDescriptor) -> bool {"},
{"lineNum":"  312","line":"        // TODO: We should define implementation limits."},
{"lineNum":"  313","line":"        let imported_max = imported.maximum.unwrap_or(u32::max_value());"},
{"lineNum":"  314","line":"        let self_max = self.maximum.unwrap_or(u32::max_value());"},
{"lineNum":"  315","line":"        self.element == imported.element"},
{"lineNum":"  316","line":"            && imported_max <= self_max"},
{"lineNum":"  317","line":"            && self.minimum <= imported.minimum"},
{"lineNum":"  318","line":"    }"},
{"lineNum":"  319","line":"}"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"/// A const value initializer."},
{"lineNum":"  322","line":"/// Over time, this will be able to represent more and more"},
{"lineNum":"  323","line":"/// complex expressions."},
{"lineNum":"  324","line":"#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  325","line":"pub enum Initializer {"},
{"lineNum":"  326","line":"    /// Corresponds to a `const.*` instruction."},
{"lineNum":"  327","line":"    Const(Value),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  328","line":"    /// Corresponds to a `get_global` instruction."},
{"lineNum":"  329","line":"    GetGlobal(ImportedGlobalIndex),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  330","line":"}"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"/// Describes the mutability and type of a Global"},
{"lineNum":"  333","line":"#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialEq, Eq)]","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  334","line":"pub struct GlobalDescriptor {"},
{"lineNum":"  335","line":"    /// Mutable flag."},
{"lineNum":"  336","line":"    pub mutable: bool,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  337","line":"    /// Wasm type."},
{"lineNum":"  338","line":"    pub ty: Type,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  339","line":"}"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"/// A wasm global."},
{"lineNum":"  342","line":"#[derive(Serialize, Deserialize, Debug, Clone)]","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  343","line":"pub struct GlobalInit {"},
{"lineNum":"  344","line":"    /// Global descriptor."},
{"lineNum":"  345","line":"    pub desc: GlobalDescriptor,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  346","line":"    /// Global initializer."},
{"lineNum":"  347","line":"    pub init: Initializer,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  348","line":"}"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"/// A wasm memory descriptor."},
{"lineNum":"  351","line":"#[derive(Serialize, Deserialize, Debug, Clone, Copy, PartialEq, Eq)]","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  352","line":"pub struct MemoryDescriptor {"},
{"lineNum":"  353","line":"    /// The minimum number of allowed pages."},
{"lineNum":"  354","line":"    pub minimum: Pages,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  355","line":"    /// The maximum number of allowed pages."},
{"lineNum":"  356","line":"    pub maximum: Option<Pages>,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  357","line":"    /// This memory can be shared between wasm threads."},
{"lineNum":"  358","line":"    pub shared: bool,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  359","line":"    /// The type of the memory"},
{"lineNum":"  360","line":"    pub memory_type: MemoryType,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  361","line":"}"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"impl MemoryDescriptor {"},
{"lineNum":"  364","line":"    /// Create a new memory descriptor with the given min/max pages and shared flag."},
{"lineNum":"  365","line":"    pub fn new(minimum: Pages, maximum: Option<Pages>, shared: bool) -> Result<Self, String> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  366","line":"        let memory_type = match (maximum.is_some(), shared) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  367","line":"            (true, true) => MemoryType::SharedStatic,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  368","line":"            (true, false) => MemoryType::Static,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  369","line":"            (false, false) => MemoryType::Dynamic,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  370","line":"            (false, true) => {"},
{"lineNum":"  371","line":"                return Err(\"Max number of pages is required for shared memory\".to_string());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  372","line":"            }"},
{"lineNum":"  373","line":"        };"},
{"lineNum":"  374","line":"        Ok(MemoryDescriptor {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  375","line":"            minimum,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  376","line":"            maximum,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  377","line":"            shared,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  378","line":"            memory_type,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  379","line":"        })"},
{"lineNum":"  380","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"    /// Returns the `MemoryType` for this descriptor."},
{"lineNum":"  383","line":"    pub fn memory_type(&self) -> MemoryType {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  384","line":"        self.memory_type","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  385","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"    pub(crate) fn fits_in_imported(&self, imported: MemoryDescriptor) -> bool {"},
{"lineNum":"  388","line":"        let imported_max = imported.maximum.unwrap_or(Pages(65_536));"},
{"lineNum":"  389","line":"        let self_max = self.maximum.unwrap_or(Pages(65_536));"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"        self.shared == imported.shared"},
{"lineNum":"  392","line":"            && imported_max <= self_max"},
{"lineNum":"  393","line":"            && self.minimum <= imported.minimum"},
{"lineNum":"  394","line":"    }"},
{"lineNum":"  395","line":"}"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"/// The signature of a function that is either implemented"},
{"lineNum":"  398","line":"/// in a wasm module or exposed to wasm by the host."},
{"lineNum":"  399","line":"#[derive(Serialize, Deserialize, Debug, Clone, PartialEq, Eq, Hash)]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  400","line":"pub struct FuncSig {"},
{"lineNum":"  401","line":"    params: Cow<\'static, [Type]>,","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  402","line":"    returns: Cow<\'static, [Type]>,","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  403","line":"}"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"impl FuncSig {"},
{"lineNum":"  406","line":"    /// Creates a new function signatures with the given parameter and return types."},
{"lineNum":"  407","line":"    pub fn new<Params, Returns>(params: Params, returns: Returns) -> Self","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  408","line":"    where"},
{"lineNum":"  409","line":"        Params: Into<Cow<\'static, [Type]>>,"},
{"lineNum":"  410","line":"        Returns: Into<Cow<\'static, [Type]>>,"},
{"lineNum":"  411","line":"    {"},
{"lineNum":"  412","line":"        Self {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  413","line":"            params: params.into(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  414","line":"            returns: returns.into(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  415","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  416","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"    /// Parameter types."},
{"lineNum":"  419","line":"    pub fn params(&self) -> &[Type] {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  420","line":"        &self.params","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  421","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"    /// Return types."},
{"lineNum":"  424","line":"    pub fn returns(&self) -> &[Type] {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  425","line":"        &self.returns","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  426","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"    /// Returns true if parameter types match the function signature."},
{"lineNum":"  429","line":"    pub fn check_param_value_types(&self, params: &[Value]) -> bool {"},
{"lineNum":"  430","line":"        self.params.len() == params.len()"},
{"lineNum":"  431","line":"            && self"},
{"lineNum":"  432","line":"                .params"},
{"lineNum":"  433","line":"                .iter()"},
{"lineNum":"  434","line":"                .zip(params.iter().map(|val| val.ty()))"},
{"lineNum":"  435","line":"                .all(|(t0, ref t1)| t0 == t1)"},
{"lineNum":"  436","line":"    }"},
{"lineNum":"  437","line":"}"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"impl std::fmt::Display for FuncSig {"},
{"lineNum":"  440","line":"    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {"},
{"lineNum":"  441","line":"        let params = self"},
{"lineNum":"  442","line":"            .params"},
{"lineNum":"  443","line":"            .iter()"},
{"lineNum":"  444","line":"            .map(|p| p.to_string())"},
{"lineNum":"  445","line":"            .collect::<Vec<_>>()"},
{"lineNum":"  446","line":"            .join(\", \");"},
{"lineNum":"  447","line":"        let returns = self"},
{"lineNum":"  448","line":"            .returns"},
{"lineNum":"  449","line":"            .iter()"},
{"lineNum":"  450","line":"            .map(|p| p.to_string())"},
{"lineNum":"  451","line":"            .collect::<Vec<_>>()"},
{"lineNum":"  452","line":"            .join(\", \");"},
{"lineNum":"  453","line":"        write!(f, \"[{}] -> [{}]\", params, returns)"},
{"lineNum":"  454","line":"    }"},
{"lineNum":"  455","line":"}"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"/// Trait that represents Local or Import."},
{"lineNum":"  458","line":"pub trait LocalImport {"},
{"lineNum":"  459","line":"    /// Local type."},
{"lineNum":"  460","line":"    type Local: TypedIndex;"},
{"lineNum":"  461","line":"    /// Import type."},
{"lineNum":"  462","line":"    type Import: TypedIndex;"},
{"lineNum":"  463","line":"}"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"#[rustfmt::skip]"},
{"lineNum":"  466","line":"macro_rules! define_map_index {"},
{"lineNum":"  467","line":"    ($ty:ident) => {"},
{"lineNum":"  468","line":"        /// Typed Index"},
{"lineNum":"  469","line":"        #[derive(Serialize, Deserialize)]"},
{"lineNum":"  470","line":"        #[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]","class":"lineNoCov","hits":"0","possible_hits":"50",},
{"lineNum":"  471","line":"        pub struct $ty (u32);","class":"lineNoCov","hits":"0","possible_hits":"25",},
{"lineNum":"  472","line":"        impl TypedIndex for $ty {"},
{"lineNum":"  473","line":"            #[doc(hidden)]"},
{"lineNum":"  474","line":"            fn new(index: usize) -> Self {","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  475","line":"                $ty (index as _)","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  476","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"            #[doc(hidden)]"},
{"lineNum":"  479","line":"            fn index(&self) -> usize {","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  480","line":"                self.0 as usize","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  481","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"  482","line":"        }"},
{"lineNum":"  483","line":"    };"},
{"lineNum":"  484","line":"    ($($normal_ty:ident,)* | local: $($local_ty:ident,)* | imported: $($imported_ty:ident,)*) => {"},
{"lineNum":"  485","line":"        $("},
{"lineNum":"  486","line":"            define_map_index!($normal_ty);"},
{"lineNum":"  487","line":"            define_map_index!($local_ty);"},
{"lineNum":"  488","line":"            define_map_index!($imported_ty);"},
{"lineNum":"  489","line":""},
{"lineNum":"  490","line":"            impl LocalImport for $normal_ty {"},
{"lineNum":"  491","line":"                type Local = $local_ty;"},
{"lineNum":"  492","line":"                type Import = $imported_ty;"},
{"lineNum":"  493","line":"            }"},
{"lineNum":"  494","line":"        )*"},
{"lineNum":"  495","line":"    };"},
{"lineNum":"  496","line":"}"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"#[rustfmt::skip]"},
{"lineNum":"  499","line":"define_map_index!["},
{"lineNum":"  500","line":"    FuncIndex, MemoryIndex, TableIndex, GlobalIndex,"},
{"lineNum":"  501","line":"    | local: LocalFuncIndex, LocalMemoryIndex, LocalTableIndex, LocalGlobalIndex,"},
{"lineNum":"  502","line":"    | imported: ImportedFuncIndex, ImportedMemoryIndex, ImportedTableIndex, ImportedGlobalIndex,"},
{"lineNum":"  503","line":"];"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"#[rustfmt::skip]"},
{"lineNum":"  506","line":"macro_rules! define_local_or_import {"},
{"lineNum":"  507","line":"    ($ty:ident, $local_ty:ident, $imported_ty:ident, $imports:ident) => {"},
{"lineNum":"  508","line":"        impl $ty {"},
{"lineNum":"  509","line":"            /// Converts self into `LocalOrImport`."},
{"lineNum":"  510","line":"            pub fn local_or_import(self, info: &ModuleInfo) -> LocalOrImport<$ty> {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  511","line":"                if self.index() < info.$imports.len() {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  512","line":"                    LocalOrImport::Import(<Self as LocalImport>::Import::new(self.index()))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  513","line":"                } else {"},
{"lineNum":"  514","line":"                    LocalOrImport::Local(<Self as LocalImport>::Local::new(self.index() - info.$imports.len()))","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  515","line":"                }"},
{"lineNum":"  516","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  517","line":"        }"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"        impl $local_ty {"},
{"lineNum":"  520","line":"            /// Convert up."},
{"lineNum":"  521","line":"            pub fn convert_up(self, info: &ModuleInfo) -> $ty {"},
{"lineNum":"  522","line":"                $ty ((self.index() + info.$imports.len()) as u32)"},
{"lineNum":"  523","line":"            }"},
{"lineNum":"  524","line":"        }"},
{"lineNum":"  525","line":""},
{"lineNum":"  526","line":"        impl $imported_ty {"},
{"lineNum":"  527","line":"            /// Convert up."},
{"lineNum":"  528","line":"            pub fn convert_up(self, _info: &ModuleInfo) -> $ty {"},
{"lineNum":"  529","line":"                $ty (self.index() as u32)"},
{"lineNum":"  530","line":"            }"},
{"lineNum":"  531","line":"        }"},
{"lineNum":"  532","line":"    };"},
{"lineNum":"  533","line":"    ($(($ty:ident | ($local_ty:ident, $imported_ty:ident): $imports:ident),)*) => {"},
{"lineNum":"  534","line":"        $("},
{"lineNum":"  535","line":"            define_local_or_import!($ty, $local_ty, $imported_ty, $imports);"},
{"lineNum":"  536","line":"        )*"},
{"lineNum":"  537","line":"    };"},
{"lineNum":"  538","line":"}"},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"#[rustfmt::skip]"},
{"lineNum":"  541","line":"define_local_or_import!["},
{"lineNum":"  542","line":"    (FuncIndex | (LocalFuncIndex, ImportedFuncIndex): imported_functions),"},
{"lineNum":"  543","line":"    (MemoryIndex | (LocalMemoryIndex, ImportedMemoryIndex): imported_memories),"},
{"lineNum":"  544","line":"    (TableIndex | (LocalTableIndex, ImportedTableIndex): imported_tables),"},
{"lineNum":"  545","line":"    (GlobalIndex | (LocalGlobalIndex, ImportedGlobalIndex): imported_globals),"},
{"lineNum":"  546","line":"];"},
{"lineNum":"  547","line":""},
{"lineNum":"  548","line":"/// Index for signature."},
{"lineNum":"  549","line":"#[derive(Serialize, Deserialize, Debug, Copy, Clone, PartialEq, Eq, Hash)]","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  550","line":"pub struct SigIndex(u32);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  551","line":"impl TypedIndex for SigIndex {"},
{"lineNum":"  552","line":"    #[doc(hidden)]"},
{"lineNum":"  553","line":"    fn new(index: usize) -> Self {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  554","line":"        SigIndex(index as _)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  555","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"    #[doc(hidden)]"},
{"lineNum":"  558","line":"    fn index(&self) -> usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  559","line":"        self.0 as usize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  560","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  561","line":"}"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"/// Kind of local or import type."},
{"lineNum":"  564","line":"pub enum LocalOrImport<T>"},
{"lineNum":"  565","line":"where"},
{"lineNum":"  566","line":"    T: LocalImport,"},
{"lineNum":"  567","line":"{"},
{"lineNum":"  568","line":"    /// Local."},
{"lineNum":"  569","line":"    Local(T::Local),"},
{"lineNum":"  570","line":"    /// Import."},
{"lineNum":"  571","line":"    Import(T::Import),"},
{"lineNum":"  572","line":"}"},
{"lineNum":"  573","line":""},
{"lineNum":"  574","line":"impl<T> LocalOrImport<T>"},
{"lineNum":"  575","line":"where"},
{"lineNum":"  576","line":"    T: LocalImport,"},
{"lineNum":"  577","line":"{"},
{"lineNum":"  578","line":"    /// Returns `Some` if self is local,  `None` if self is an import."},
{"lineNum":"  579","line":"    pub fn local(self) -> Option<T::Local> {"},
{"lineNum":"  580","line":"        match self {"},
{"lineNum":"  581","line":"            LocalOrImport::Local(local) => Some(local),"},
{"lineNum":"  582","line":"            LocalOrImport::Import(_) => None,"},
{"lineNum":"  583","line":"        }"},
{"lineNum":"  584","line":"    }"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"    /// Returns `Some` if self is an import,  `None` if self is local."},
{"lineNum":"  587","line":"    pub fn import(self) -> Option<T::Import> {"},
{"lineNum":"  588","line":"        match self {"},
{"lineNum":"  589","line":"            LocalOrImport::Import(import) => Some(import),"},
{"lineNum":"  590","line":"            LocalOrImport::Local(_) => None,"},
{"lineNum":"  591","line":"        }"},
{"lineNum":"  592","line":"    }"},
{"lineNum":"  593","line":"}"},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"#[cfg(test)]"},
{"lineNum":"  596","line":"mod tests {"},
{"lineNum":"  597","line":"    use crate::types::NativeWasmType;"},
{"lineNum":"  598","line":"    use crate::types::WasmExternType;"},
{"lineNum":"  599","line":""},
{"lineNum":"  600","line":"    #[test]"},
{"lineNum":"  601","line":"    fn test_native_types_round_trip() {"},
{"lineNum":"  602","line":"        assert_eq!("},
{"lineNum":"  603","line":"            42i32,"},
{"lineNum":"  604","line":"            i32::from_native(i32::from_binary((42i32).to_native().to_binary()))"},
{"lineNum":"  605","line":"        );"},
{"lineNum":"  606","line":""},
{"lineNum":"  607","line":"        assert_eq!("},
{"lineNum":"  608","line":"            -42i32,"},
{"lineNum":"  609","line":"            i32::from_native(i32::from_binary((-42i32).to_native().to_binary()))"},
{"lineNum":"  610","line":"        );"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"        use std::i64;"},
{"lineNum":"  613","line":"        let xi64 = i64::MAX;"},
{"lineNum":"  614","line":"        assert_eq!("},
{"lineNum":"  615","line":"            xi64,"},
{"lineNum":"  616","line":"            i64::from_native(i64::from_binary((xi64).to_native().to_binary()))"},
{"lineNum":"  617","line":"        );"},
{"lineNum":"  618","line":"        let yi64 = i64::MIN;"},
{"lineNum":"  619","line":"        assert_eq!("},
{"lineNum":"  620","line":"            yi64,"},
{"lineNum":"  621","line":"            i64::from_native(i64::from_binary((yi64).to_native().to_binary()))"},
{"lineNum":"  622","line":"        );"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"        assert_eq!("},
{"lineNum":"  625","line":"            16.5f32,"},
{"lineNum":"  626","line":"            f32::from_native(f32::from_binary((16.5f32).to_native().to_binary()))"},
{"lineNum":"  627","line":"        );"},
{"lineNum":"  628","line":""},
{"lineNum":"  629","line":"        assert_eq!("},
{"lineNum":"  630","line":"            -16.5f32,"},
{"lineNum":"  631","line":"            f32::from_native(f32::from_binary((-16.5f32).to_native().to_binary()))"},
{"lineNum":"  632","line":"        );"},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"        use std::f64;"},
{"lineNum":"  635","line":"        let xf64: f64 = f64::MAX;"},
{"lineNum":"  636","line":"        assert_eq!("},
{"lineNum":"  637","line":"            xf64,"},
{"lineNum":"  638","line":"            f64::from_native(f64::from_binary((xf64).to_native().to_binary()))"},
{"lineNum":"  639","line":"        );"},
{"lineNum":"  640","line":""},
{"lineNum":"  641","line":"        let yf64: f64 = f64::MIN;"},
{"lineNum":"  642","line":"        assert_eq!("},
{"lineNum":"  643","line":"            yf64,"},
{"lineNum":"  644","line":"            f64::from_native(f64::from_binary((yf64).to_native().to_binary()))"},
{"lineNum":"  645","line":"        );"},
{"lineNum":"  646","line":"    }"},
{"lineNum":"  647","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "compile_debug", "date" : "2019-11-28 11:37:30", "instrumented" : 77, "covered" : 0,};
var merged_data = [];
