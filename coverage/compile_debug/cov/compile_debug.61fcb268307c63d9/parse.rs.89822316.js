var data = {lines:[
{"lineNum":"    1","line":"//! The parse module contains common data structures and functions using to parse wasm files into"},
{"lineNum":"    2","line":"//! runtime data structures."},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"use crate::codegen::*;"},
{"lineNum":"    5","line":"use crate::{"},
{"lineNum":"    6","line":"    backend::{Backend, CompilerConfig, RunnableModule},"},
{"lineNum":"    7","line":"    error::CompileError,"},
{"lineNum":"    8","line":"    module::{"},
{"lineNum":"    9","line":"        DataInitializer, ExportIndex, ImportName, ModuleInfo, StringTable, StringTableBuilder,"},
{"lineNum":"   10","line":"        TableInitializer,"},
{"lineNum":"   11","line":"    },"},
{"lineNum":"   12","line":"    structures::{Map, TypedIndex},"},
{"lineNum":"   13","line":"    types::{"},
{"lineNum":"   14","line":"        ElementType, FuncIndex, FuncSig, GlobalDescriptor, GlobalIndex, GlobalInit,"},
{"lineNum":"   15","line":"        ImportedGlobalIndex, Initializer, MemoryDescriptor, MemoryIndex, SigIndex, TableDescriptor,"},
{"lineNum":"   16","line":"        TableIndex, Type, Value,"},
{"lineNum":"   17","line":"    },"},
{"lineNum":"   18","line":"    units::Pages,"},
{"lineNum":"   19","line":"};"},
{"lineNum":"   20","line":"use std::collections::HashMap;"},
{"lineNum":"   21","line":"use std::fmt::Debug;"},
{"lineNum":"   22","line":"use std::sync::{Arc, RwLock};"},
{"lineNum":"   23","line":"use wasmparser::{"},
{"lineNum":"   24","line":"    BinaryReaderError, ExternalKind, FuncType, ImportSectionEntryType, Operator, Type as WpType,"},
{"lineNum":"   25","line":"    WasmDecoder,"},
{"lineNum":"   26","line":"};"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"/// Kind of load error."},
{"lineNum":"   29","line":"#[derive(Debug)]","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   30","line":"pub enum LoadError {"},
{"lineNum":"   31","line":"    /// Parse error."},
{"lineNum":"   32","line":"    Parse(BinaryReaderError),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   33","line":"    /// Code generation error."},
{"lineNum":"   34","line":"    Codegen(String),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   35","line":"}"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"impl From<LoadError> for CompileError {"},
{"lineNum":"   38","line":"    fn from(other: LoadError) -> CompileError {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   39","line":"        CompileError::InternalError {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   40","line":"            msg: format!(\"{:?}\", other),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   41","line":"        }"},
{"lineNum":"   42","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   43","line":"}"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"impl From<BinaryReaderError> for LoadError {"},
{"lineNum":"   46","line":"    fn from(other: BinaryReaderError) -> LoadError {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   47","line":"        LoadError::Parse(other)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   49","line":"}"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"/// Read wasm binary into module data using the given backend, module code generator, middlewares,"},
{"lineNum":"   52","line":"/// and compiler configuration."},
{"lineNum":"   53","line":"pub fn read_module<","class":"linePartCov","hits":"1","order":"400","possible_hits":"2",},
{"lineNum":"   54","line":"    MCG: ModuleCodeGenerator<FCG, RM, E>,"},
{"lineNum":"   55","line":"    FCG: FunctionCodeGenerator<E>,"},
{"lineNum":"   56","line":"    RM: RunnableModule,"},
{"lineNum":"   57","line":"    E: Debug,"},
{"lineNum":"   58","line":">("},
{"lineNum":"   59","line":"    wasm: &[u8],"},
{"lineNum":"   60","line":"    backend: Backend,"},
{"lineNum":"   61","line":"    mcg: &mut MCG,"},
{"lineNum":"   62","line":"    middlewares: &mut MiddlewareChain,"},
{"lineNum":"   63","line":"    compiler_config: &CompilerConfig,"},
{"lineNum":"   64","line":") -> Result<Arc<RwLock<ModuleInfo>>, LoadError> {"},
{"lineNum":"   65","line":"    mcg.feed_compiler_config(compiler_config)","class":"linePartCov","hits":"2","order":"401","possible_hits":"3",},
{"lineNum":"   66","line":"        .map_err(|x| LoadError::Codegen(format!(\"{:?}\", x)))?;","class":"linePartCov","hits":"1","order":"406","possible_hits":"10",},
{"lineNum":"   67","line":"    let info = Arc::new(RwLock::new(ModuleInfo {","class":"lineCov","hits":"2","order":"430","possible_hits":"2",},
{"lineNum":"   68","line":"        memories: Map::new(),","class":"lineCov","hits":"1","order":"407","possible_hits":"1",},
{"lineNum":"   69","line":"        globals: Map::new(),","class":"lineCov","hits":"1","order":"408","possible_hits":"1",},
{"lineNum":"   70","line":"        tables: Map::new(),","class":"lineCov","hits":"1","order":"409","possible_hits":"1",},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"        imported_functions: Map::new(),","class":"lineCov","hits":"1","order":"410","possible_hits":"1",},
{"lineNum":"   73","line":"        imported_memories: Map::new(),","class":"lineCov","hits":"1","order":"411","possible_hits":"1",},
{"lineNum":"   74","line":"        imported_tables: Map::new(),","class":"lineCov","hits":"1","order":"412","possible_hits":"1",},
{"lineNum":"   75","line":"        imported_globals: Map::new(),","class":"lineCov","hits":"1","order":"413","possible_hits":"1",},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"        exports: Default::default(),","class":"lineCov","hits":"1","order":"414","possible_hits":"1",},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"        data_initializers: Vec::new(),","class":"lineCov","hits":"1","order":"415","possible_hits":"1",},
{"lineNum":"   80","line":"        elem_initializers: Vec::new(),","class":"lineCov","hits":"1","order":"416","possible_hits":"1",},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"        start_func: None,","class":"lineCov","hits":"1","order":"417","possible_hits":"1",},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"        func_assoc: Map::new(),","class":"lineCov","hits":"1","order":"418","possible_hits":"1",},
{"lineNum":"   85","line":"        signatures: Map::new(),","class":"lineCov","hits":"1","order":"419","possible_hits":"1",},
{"lineNum":"   86","line":"        backend: backend,","class":"lineCov","hits":"1","order":"420","possible_hits":"1",},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"        namespace_table: StringTable::new(),","class":"lineCov","hits":"1","order":"421","possible_hits":"1",},
{"lineNum":"   89","line":"        name_table: StringTable::new(),","class":"lineCov","hits":"1","order":"427","possible_hits":"1",},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"        em_symbol_map: compiler_config.symbol_map.clone(),","class":"lineCov","hits":"1","order":"428","possible_hits":"1",},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"        custom_sections: HashMap::new(),","class":"lineCov","hits":"1","order":"429","possible_hits":"1",},
{"lineNum":"   94","line":"    }));","class":"linePartCov","hits":"1","order":"431","possible_hits":"16",},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"    let mut parser = wasmparser::ValidatingParser::new(","class":"lineCov","hits":"1","order":"434","possible_hits":"1",},
{"lineNum":"   97","line":"        wasm,","class":"lineCov","hits":"1","order":"432","possible_hits":"1",},
{"lineNum":"   98","line":"        Some(validating_parser_config(&compiler_config.features)),","class":"lineCov","hits":"1","order":"433","possible_hits":"1",},
{"lineNum":"   99","line":"    );"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    let mut namespace_builder = Some(StringTableBuilder::new());","class":"lineCov","hits":"1","order":"435","possible_hits":"1",},
{"lineNum":"  102","line":"    let mut name_builder = Some(StringTableBuilder::new());","class":"lineCov","hits":"2","order":"441","possible_hits":"2",},
{"lineNum":"  103","line":"    let mut func_count: usize = 0;","class":"lineCov","hits":"1","order":"442","possible_hits":"1",},
{"lineNum":"  104","line":"    let mut mcg_info_fed = false;","class":"lineCov","hits":"1","order":"443","possible_hits":"1",},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    loop {","class":"lineCov","hits":"2","order":"444","possible_hits":"2",},
{"lineNum":"  107","line":"        use wasmparser::ParserState;"},
{"lineNum":"  108","line":"        let state = parser.read();","class":"lineCov","hits":"2","order":"445","possible_hits":"2",},
{"lineNum":"  109","line":"        match *state {","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  110","line":"            ParserState::Error(err) => Err(LoadError::Parse(err))?,","class":"linePartCov","hits":"1","order":"446","possible_hits":"3",},
{"lineNum":"  111","line":"            ParserState::TypeSectionEntry(ref ty) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":"                info.write()","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  113","line":"                    .unwrap()"},
{"lineNum":"  114","line":"                    .signatures"},
{"lineNum":"  115","line":"                    .push(func_type_to_func_sig(ty)?);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  116","line":"            }"},
{"lineNum":"  117","line":"            ParserState::ImportSectionEntry { module, field, ty } => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":"                let namespace_index = namespace_builder.as_mut().unwrap().register(module);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":"                let name_index = name_builder.as_mut().unwrap().register(field);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  120","line":"                let import_name = ImportName {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":"                    namespace_index,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"                    name_index,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"                };"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"                match ty {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  126","line":"                    ImportSectionEntryType::Function(sigindex) => {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  127","line":"                        let sigindex = SigIndex::new(sigindex as usize);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"                        info.write().unwrap().imported_functions.push(import_name);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":"                        info.write().unwrap().func_assoc.push(sigindex);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":"                        mcg.feed_import_function()","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  131","line":"                            .map_err(|x| LoadError::Codegen(format!(\"{:?}\", x)))?;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  132","line":"                    }"},
{"lineNum":"  133","line":"                    ImportSectionEntryType::Table(table_ty) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  134","line":"                        assert_eq!(table_ty.element_type, WpType::AnyFunc);"},
{"lineNum":"  135","line":"                        let table_desc = TableDescriptor {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  136","line":"                            element: ElementType::Anyfunc,"},
{"lineNum":"  137","line":"                            minimum: table_ty.limits.initial,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  138","line":"                            maximum: table_ty.limits.maximum,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  139","line":"                        };"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"                        info.write()","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  142","line":"                            .unwrap()"},
{"lineNum":"  143","line":"                            .imported_tables"},
{"lineNum":"  144","line":"                            .push((import_name, table_desc));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  145","line":"                    }"},
{"lineNum":"  146","line":"                    ImportSectionEntryType::Memory(memory_ty) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":"                        let mem_desc = MemoryDescriptor::new(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  148","line":"                            Pages(memory_ty.limits.initial),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  149","line":"                            memory_ty.limits.maximum.map(|max| Pages(max)),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  150","line":"                            memory_ty.shared,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  151","line":"                        )"},
{"lineNum":"  152","line":"                        .map_err(|x| LoadError::Codegen(format!(\"{:?}\", x)))?;","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"                        info.write()","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  155","line":"                            .unwrap()"},
{"lineNum":"  156","line":"                            .imported_memories"},
{"lineNum":"  157","line":"                            .push((import_name, mem_desc));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  158","line":"                    }"},
{"lineNum":"  159","line":"                    ImportSectionEntryType::Global(global_ty) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":"                        let global_desc = GlobalDescriptor {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"                            mutable: global_ty.mutable,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  162","line":"                            ty: wp_type_to_type(global_ty.content_type)?,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  163","line":"                        };"},
{"lineNum":"  164","line":"                        info.write()","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  165","line":"                            .unwrap()"},
{"lineNum":"  166","line":"                            .imported_globals"},
{"lineNum":"  167","line":"                            .push((import_name, global_desc));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  168","line":"                    }"},
{"lineNum":"  169","line":"                }"},
{"lineNum":"  170","line":"            }"},
{"lineNum":"  171","line":"            ParserState::FunctionSectionEntry(sigindex) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":"                let sigindex = SigIndex::new(sigindex as usize);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  173","line":"                info.write().unwrap().func_assoc.push(sigindex);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  174","line":"            }"},
{"lineNum":"  175","line":"            ParserState::TableSectionEntry(table_ty) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  176","line":"                let table_desc = TableDescriptor {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  177","line":"                    element: ElementType::Anyfunc,"},
{"lineNum":"  178","line":"                    minimum: table_ty.limits.initial,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  179","line":"                    maximum: table_ty.limits.maximum,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  180","line":"                };"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"                info.write().unwrap().tables.push(table_desc);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"            }"},
{"lineNum":"  184","line":"            ParserState::MemorySectionEntry(memory_ty) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  185","line":"                let mem_desc = MemoryDescriptor::new(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  186","line":"                    Pages(memory_ty.limits.initial),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"                    memory_ty.limits.maximum.map(|max| Pages(max)),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  188","line":"                    memory_ty.shared,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  189","line":"                )"},
{"lineNum":"  190","line":"                .map_err(|x| LoadError::Codegen(format!(\"{:?}\", x)))?;","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"                info.write().unwrap().memories.push(mem_desc);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":"            }"},
{"lineNum":"  194","line":"            ParserState::ExportSectionEntry { field, kind, index } => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  195","line":"                let export_index = match kind {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  196","line":"                    ExternalKind::Function => ExportIndex::Func(FuncIndex::new(index as usize)),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  197","line":"                    ExternalKind::Table => ExportIndex::Table(TableIndex::new(index as usize)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"                    ExternalKind::Memory => ExportIndex::Memory(MemoryIndex::new(index as usize)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"                    ExternalKind::Global => ExportIndex::Global(GlobalIndex::new(index as usize)),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  200","line":"                };"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"                info.write()","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  203","line":"                    .unwrap()"},
{"lineNum":"  204","line":"                    .exports"},
{"lineNum":"  205","line":"                    .insert(field.to_string(), export_index);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  206","line":"            }"},
{"lineNum":"  207","line":"            ParserState::StartSectionEntry(start_index) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  208","line":"                info.write().unwrap().start_func = Some(FuncIndex::new(start_index as usize));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  209","line":"            }"},
{"lineNum":"  210","line":"            ParserState::BeginFunctionBody { .. } => {"},
{"lineNum":"  211","line":"                let id = func_count;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  212","line":"                if !mcg_info_fed {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  213","line":"                    mcg_info_fed = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  214","line":"                    info.write().unwrap().namespace_table =","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  215","line":"                        namespace_builder.take().unwrap().finish();","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  216","line":"                    info.write().unwrap().name_table = name_builder.take().unwrap().finish();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  217","line":"                    mcg.feed_signatures(info.read().unwrap().signatures.clone())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  218","line":"                        .map_err(|x| LoadError::Codegen(format!(\"{:?}\", x)))?;","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  219","line":"                    mcg.feed_function_signatures(info.read().unwrap().func_assoc.clone())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  220","line":"                        .map_err(|x| LoadError::Codegen(format!(\"{:?}\", x)))?;","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  221","line":"                    mcg.check_precondition(&info.read().unwrap())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  222","line":"                        .map_err(|x| LoadError::Codegen(format!(\"{:?}\", x)))?;","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  223","line":"                }"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"                let fcg = mcg","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  226","line":"                    .next_function(Arc::clone(&info))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  227","line":"                    .map_err(|x| LoadError::Codegen(format!(\"{:?}\", x)))?;","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"                let info_read = info.read().unwrap();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  230","line":"                let sig = info_read","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  231","line":"                    .signatures"},
{"lineNum":"  232","line":"                    .get("},
{"lineNum":"  233","line":"                        *info","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  234","line":"                            .read()"},
{"lineNum":"  235","line":"                            .unwrap()"},
{"lineNum":"  236","line":"                            .func_assoc"},
{"lineNum":"  237","line":"                            .get(FuncIndex::new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  238","line":"                                id as usize + info.read().unwrap().imported_functions.len(),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  239","line":"                            ))"},
{"lineNum":"  240","line":"                            .unwrap(),"},
{"lineNum":"  241","line":"                    )"},
{"lineNum":"  242","line":"                    .unwrap();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  243","line":"                for ret in sig.returns() {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  244","line":"                    fcg.feed_return(type_to_wp_type(*ret))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  245","line":"                        .map_err(|x| LoadError::Codegen(format!(\"{:?}\", x)))?;","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  246","line":"                }"},
{"lineNum":"  247","line":"                for param in sig.params() {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  248","line":"                    fcg.feed_param(type_to_wp_type(*param))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  249","line":"                        .map_err(|x| LoadError::Codegen(format!(\"{:?}\", x)))?;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  250","line":"                }"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"                let mut body_begun = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"                loop {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  255","line":"                    let state = parser.read();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  256","line":"                    match state {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  257","line":"                        ParserState::Error(err) => return Err(LoadError::Parse(*err)),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  258","line":"                        ParserState::FunctionBodyLocals { ref locals } => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  259","line":"                            for &(count, ty) in locals.iter() {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  260","line":"                                fcg.feed_local(ty, count as usize)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  261","line":"                                    .map_err(|x| LoadError::Codegen(format!(\"{:?}\", x)))?;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  262","line":"                            }"},
{"lineNum":"  263","line":"                        }"},
{"lineNum":"  264","line":"                        ParserState::CodeOperator(op) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":"                            if !body_begun {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  266","line":"                                body_begun = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  267","line":"                                fcg.begin_body(&info.read().unwrap())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  268","line":"                                    .map_err(|x| LoadError::Codegen(format!(\"{:?}\", x)))?;","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  269","line":"                                middlewares","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  270","line":"                                    .run("},
{"lineNum":"  271","line":"                                        Some(fcg),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  272","line":"                                        Event::Internal(InternalEvent::FunctionBegin(id as u32)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  273","line":"                                        &info.read().unwrap(),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  274","line":"                                    )","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  275","line":"                                    .map_err(|x| LoadError::Codegen(x))?;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  276","line":"                            }"},
{"lineNum":"  277","line":"                            middlewares","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  278","line":"                                .run(Some(fcg), Event::Wasm(op), &info.read().unwrap())","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  279","line":"                                .map_err(|x| LoadError::Codegen(x))?;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  280","line":"                        }"},
{"lineNum":"  281","line":"                        ParserState::EndFunctionBody => break,"},
{"lineNum":"  282","line":"                        _ => unreachable!(),"},
{"lineNum":"  283","line":"                    }"},
{"lineNum":"  284","line":"                }"},
{"lineNum":"  285","line":"                middlewares","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  286","line":"                    .run("},
{"lineNum":"  287","line":"                        Some(fcg),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  288","line":"                        Event::Internal(InternalEvent::FunctionEnd),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  289","line":"                        &info.read().unwrap(),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  290","line":"                    )","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  291","line":"                    .map_err(|x| LoadError::Codegen(x))?;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  292","line":"                fcg.finalize()","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  293","line":"                    .map_err(|x| LoadError::Codegen(format!(\"{:?}\", x)))?;","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  294","line":"                func_count = func_count.wrapping_add(1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  295","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  296","line":"            ParserState::BeginActiveElementSectionEntry(table_index) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  297","line":"                let table_index = TableIndex::new(table_index as usize);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  298","line":"                let mut elements: Option<Vec<FuncIndex>> = None;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  299","line":"                let mut base: Option<Initializer> = None;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"                loop {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":"                    let state = parser.read();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  303","line":"                    match *state {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  304","line":"                        ParserState::Error(err) => return Err(LoadError::Parse(err)),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  305","line":"                        ParserState::InitExpressionOperator(ref op) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  306","line":"                            base = Some(eval_init_expr(op)?)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  307","line":"                        }"},
{"lineNum":"  308","line":"                        ParserState::ElementSectionEntryBody(ref _elements) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  309","line":"                            elements = Some(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  310","line":"                                _elements","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  311","line":"                                    .iter()"},
{"lineNum":"  312","line":"                                    .cloned()"},
{"lineNum":"  313","line":"                                    .map(|index| FuncIndex::new(index as usize))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  314","line":"                                    .collect(),"},
{"lineNum":"  315","line":"                            );"},
{"lineNum":"  316","line":"                        }"},
{"lineNum":"  317","line":"                        ParserState::BeginInitExpressionBody"},
{"lineNum":"  318","line":"                        | ParserState::EndInitExpressionBody => {}"},
{"lineNum":"  319","line":"                        ParserState::EndElementSectionEntry => break,"},
{"lineNum":"  320","line":"                        _ => unreachable!(),"},
{"lineNum":"  321","line":"                    }"},
{"lineNum":"  322","line":"                }"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"                let table_init = TableInitializer {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  325","line":"                    table_index,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  326","line":"                    base: base.unwrap(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  327","line":"                    elements: elements.unwrap(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  328","line":"                };"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"                info.write().unwrap().elem_initializers.push(table_init);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  331","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  332","line":"            ParserState::BeginActiveDataSectionEntry(memory_index) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  333","line":"                let memory_index = MemoryIndex::new(memory_index as usize);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  334","line":"                let mut base: Option<Initializer> = None;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  335","line":"                let mut data: Vec<u8> = vec![];"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"                loop {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  338","line":"                    let state = parser.read();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  339","line":"                    match *state {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  340","line":"                        ParserState::Error(err) => return Err(LoadError::Parse(err)),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  341","line":"                        ParserState::InitExpressionOperator(ref op) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  342","line":"                            base = Some(eval_init_expr(op)?)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  343","line":"                        }"},
{"lineNum":"  344","line":"                        ParserState::DataSectionEntryBodyChunk(chunk) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  345","line":"                            data.extend_from_slice(chunk);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  346","line":"                        }"},
{"lineNum":"  347","line":"                        ParserState::BeginInitExpressionBody"},
{"lineNum":"  348","line":"                        | ParserState::EndInitExpressionBody => {}"},
{"lineNum":"  349","line":"                        ParserState::BeginDataSectionEntryBody(_)"},
{"lineNum":"  350","line":"                        | ParserState::EndDataSectionEntryBody => {}"},
{"lineNum":"  351","line":"                        ParserState::EndDataSectionEntry => break,"},
{"lineNum":"  352","line":"                        _ => unreachable!(),"},
{"lineNum":"  353","line":"                    }"},
{"lineNum":"  354","line":"                }"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"                let data_init = DataInitializer {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  357","line":"                    memory_index,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  358","line":"                    base: base.unwrap(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  359","line":"                    data,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  360","line":"                };"},
{"lineNum":"  361","line":"                info.write().unwrap().data_initializers.push(data_init);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  362","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  363","line":"            ParserState::BeginGlobalSectionEntry(ty) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  364","line":"                let init = loop {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  365","line":"                    let state = parser.read();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  366","line":"                    match *state {"},
{"lineNum":"  367","line":"                        ParserState::Error(err) => return Err(LoadError::Parse(err)),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  368","line":"                        ParserState::InitExpressionOperator(ref op) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  369","line":"                            break eval_init_expr(op)?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  370","line":"                        }"},
{"lineNum":"  371","line":"                        ParserState::BeginInitExpressionBody => {}"},
{"lineNum":"  372","line":"                        _ => unreachable!(),"},
{"lineNum":"  373","line":"                    }"},
{"lineNum":"  374","line":"                };"},
{"lineNum":"  375","line":"                let desc = GlobalDescriptor {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  376","line":"                    mutable: ty.mutable,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  377","line":"                    ty: wp_type_to_type(ty.content_type)?,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  378","line":"                };"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"                let global_init = GlobalInit { desc, init };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"                info.write().unwrap().globals.push(global_init);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  383","line":"            }"},
{"lineNum":"  384","line":"            ParserState::EndWasm => {"},
{"lineNum":"  385","line":"                // TODO Consolidate with BeginFunction body if possible"},
{"lineNum":"  386","line":"                if !mcg_info_fed {","class":"lineCov","hits":"2","order":"447","possible_hits":"2",},
{"lineNum":"  387","line":"                    info.write().unwrap().namespace_table =","class":"linePartCov","hits":"3","order":"460","possible_hits":"4",},
{"lineNum":"  388","line":"                        namespace_builder.take().unwrap().finish();","class":"linePartCov","hits":"2","order":"448","possible_hits":"5",},
{"lineNum":"  389","line":"                    info.write().unwrap().name_table = name_builder.take().unwrap().finish();","class":"linePartCov","hits":"1","order":"463","possible_hits":"2",},
{"lineNum":"  390","line":"                    mcg.feed_signatures(info.read().unwrap().signatures.clone())","class":"linePartCov","hits":"2","order":"464","possible_hits":"3",},
{"lineNum":"  391","line":"                        .map_err(|x| LoadError::Codegen(format!(\"{:?}\", x)))?;","class":"linePartCov","hits":"1","order":"491","possible_hits":"10",},
{"lineNum":"  392","line":"                    mcg.feed_function_signatures(info.read().unwrap().func_assoc.clone())","class":"linePartCov","hits":"2","order":"494","possible_hits":"3",},
{"lineNum":"  393","line":"                        .map_err(|x| LoadError::Codegen(format!(\"{:?}\", x)))?;","class":"linePartCov","hits":"1","order":"503","possible_hits":"10",},
{"lineNum":"  394","line":"                    mcg.check_precondition(&info.read().unwrap())","class":"linePartCov","hits":"2","order":"504","possible_hits":"3",},
{"lineNum":"  395","line":"                        .map_err(|x| LoadError::Codegen(format!(\"{:?}\", x)))?;","class":"linePartCov","hits":"1","order":"508","possible_hits":"10",},
{"lineNum":"  396","line":"                }"},
{"lineNum":"  397","line":"                break;"},
{"lineNum":"  398","line":"            }"},
{"lineNum":"  399","line":"            _ => {}"},
{"lineNum":"  400","line":"        }"},
{"lineNum":"  401","line":"    }"},
{"lineNum":"  402","line":"    Ok(info)","class":"lineCov","hits":"1","order":"509","possible_hits":"1",},
{"lineNum":"  403","line":"}","class":"linePartCov","hits":"3","order":"510","possible_hits":"8",},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"/// Convert given `WpType` to `Type`."},
{"lineNum":"  406","line":"pub fn wp_type_to_type(ty: WpType) -> Result<Type, BinaryReaderError> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  407","line":"    match ty {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  408","line":"        WpType::I32 => Ok(Type::I32),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  409","line":"        WpType::I64 => Ok(Type::I64),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  410","line":"        WpType::F32 => Ok(Type::F32),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  411","line":"        WpType::F64 => Ok(Type::F64),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  412","line":"        WpType::V128 => Ok(Type::V128),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  413","line":"        _ => {"},
{"lineNum":"  414","line":"            return Err(BinaryReaderError {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  415","line":"                message: \"broken invariant, invalid type\","},
{"lineNum":"  416","line":"                offset: -1isize as usize,"},
{"lineNum":"  417","line":"            });"},
{"lineNum":"  418","line":"        }"},
{"lineNum":"  419","line":"    }"},
{"lineNum":"  420","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"/// Convert given `Type` to `WpType`."},
{"lineNum":"  423","line":"pub fn type_to_wp_type(ty: Type) -> WpType {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  424","line":"    match ty {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  425","line":"        Type::I32 => WpType::I32,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  426","line":"        Type::I64 => WpType::I64,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  427","line":"        Type::F32 => WpType::F32,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  428","line":"        Type::F64 => WpType::F64,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  429","line":"        Type::V128 => WpType::V128,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  430","line":"    }"},
{"lineNum":"  431","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"fn func_type_to_func_sig(func_ty: &FuncType) -> Result<FuncSig, BinaryReaderError> {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  434","line":"    assert_eq!(func_ty.form, WpType::Func);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"    Ok(FuncSig::new(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  437","line":"        func_ty","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  438","line":"            .params"},
{"lineNum":"  439","line":"            .iter()"},
{"lineNum":"  440","line":"            .cloned()"},
{"lineNum":"  441","line":"            .map(wp_type_to_type)"},
{"lineNum":"  442","line":"            .collect::<Result<Vec<_>, _>>()?,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  443","line":"        func_ty","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  444","line":"            .returns"},
{"lineNum":"  445","line":"            .iter()"},
{"lineNum":"  446","line":"            .cloned()"},
{"lineNum":"  447","line":"            .map(wp_type_to_type)"},
{"lineNum":"  448","line":"            .collect::<Result<Vec<_>, _>>()?,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  449","line":"    ))","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  450","line":"}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"fn eval_init_expr(op: &Operator) -> Result<Initializer, BinaryReaderError> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  453","line":"    Ok(match *op {","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  454","line":"        Operator::GetGlobal { global_index } => {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  455","line":"            Initializer::GetGlobal(ImportedGlobalIndex::new(global_index as usize))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  456","line":"        }"},
{"lineNum":"  457","line":"        Operator::I32Const { value } => Initializer::Const(Value::I32(value)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  458","line":"        Operator::I64Const { value } => Initializer::Const(Value::I64(value)),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  459","line":"        Operator::F32Const { value } => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  460","line":"            Initializer::Const(Value::F32(f32::from_bits(value.bits())))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  461","line":"        }"},
{"lineNum":"  462","line":"        Operator::F64Const { value } => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  463","line":"            Initializer::Const(Value::F64(f64::from_bits(value.bits())))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  464","line":"        }"},
{"lineNum":"  465","line":"        Operator::V128Const { value } => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  466","line":"            Initializer::Const(Value::V128(u128::from_le_bytes(*value.bytes())))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  467","line":"        }"},
{"lineNum":"  468","line":"        _ => {"},
{"lineNum":"  469","line":"            return Err(BinaryReaderError {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  470","line":"                message: \"init expr evaluation failed: unsupported opcode\","},
{"lineNum":"  471","line":"                offset: -1isize as usize,"},
{"lineNum":"  472","line":"            });"},
{"lineNum":"  473","line":"        }"},
{"lineNum":"  474","line":"    })"},
{"lineNum":"  475","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "compile_debug", "date" : "2019-11-28 11:37:30", "instrumented" : 265, "covered" : 45,};
var merged_data = [];
