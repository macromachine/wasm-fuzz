var data = {lines:[
{"lineNum":"    1","line":"use crate::error::MemoryCreationError;"},
{"lineNum":"    2","line":"use crate::error::MemoryProtectionError;"},
{"lineNum":"    3","line":"use errno;"},
{"lineNum":"    4","line":"use nix::libc;"},
{"lineNum":"    5","line":"use page_size;"},
{"lineNum":"    6","line":"use std::ops::{Bound, RangeBounds};"},
{"lineNum":"    7","line":"use std::{fs::File, os::unix::io::IntoRawFd, path::Path, ptr, slice, sync::Arc};"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"unsafe impl Send for Memory {}"},
{"lineNum":"   10","line":"unsafe impl Sync for Memory {}"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"/// Data for a sized and protected region of memory."},
{"lineNum":"   13","line":"#[derive(Debug)]"},
{"lineNum":"   14","line":"pub struct Memory {"},
{"lineNum":"   15","line":"    ptr: *mut u8,"},
{"lineNum":"   16","line":"    size: usize,"},
{"lineNum":"   17","line":"    protection: Protect,"},
{"lineNum":"   18","line":"    fd: Option<Arc<RawFd>>,"},
{"lineNum":"   19","line":"}"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"impl Memory {"},
{"lineNum":"   22","line":"    /// Create a new memory from the given path value and protection."},
{"lineNum":"   23","line":"    pub fn from_file_path<P>(path: P, protection: Protect) -> Result<Self, MemoryCreationError>"},
{"lineNum":"   24","line":"    where"},
{"lineNum":"   25","line":"        P: AsRef<Path>,"},
{"lineNum":"   26","line":"    {"},
{"lineNum":"   27","line":"        let file = File::open(path)?;"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"        let file_len = file.metadata()?.len();"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"        let raw_fd = RawFd::from_file(file);"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"        let ptr = unsafe {"},
{"lineNum":"   34","line":"            libc::mmap("},
{"lineNum":"   35","line":"                ptr::null_mut(),"},
{"lineNum":"   36","line":"                file_len as usize,"},
{"lineNum":"   37","line":"                protection.to_protect_const() as i32,"},
{"lineNum":"   38","line":"                libc::MAP_PRIVATE,"},
{"lineNum":"   39","line":"                raw_fd.0,"},
{"lineNum":"   40","line":"                0,"},
{"lineNum":"   41","line":"            )"},
{"lineNum":"   42","line":"        };"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"        if ptr == -1 as _ {"},
{"lineNum":"   45","line":"            Err(MemoryCreationError::VirtualMemoryAllocationFailed("},
{"lineNum":"   46","line":"                file_len as usize,"},
{"lineNum":"   47","line":"                errno::errno().to_string(),"},
{"lineNum":"   48","line":"            ))"},
{"lineNum":"   49","line":"        } else {"},
{"lineNum":"   50","line":"            Ok(Self {"},
{"lineNum":"   51","line":"                ptr: ptr as *mut u8,"},
{"lineNum":"   52","line":"                size: file_len as usize,"},
{"lineNum":"   53","line":"                protection,"},
{"lineNum":"   54","line":"                fd: Some(Arc::new(raw_fd)),"},
{"lineNum":"   55","line":"            })"},
{"lineNum":"   56","line":"        }"},
{"lineNum":"   57","line":"    }"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    /// Create a new memory with the given size and protection."},
{"lineNum":"   60","line":"    pub fn with_size_protect(size: usize, protection: Protect) -> Result<Self, String> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   61","line":"        if size == 0 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   62","line":"            return Ok(Self {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   63","line":"                ptr: ptr::null_mut(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   64","line":"                size: 0,"},
{"lineNum":"   65","line":"                protection,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"                fd: None,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":"            });"},
{"lineNum":"   68","line":"        }"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"        let size = round_up_to_page_size(size, page_size::get());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"        let ptr = unsafe {"},
{"lineNum":"   73","line":"            libc::mmap(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"                ptr::null_mut(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"                size,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   76","line":"                protection.to_protect_const() as i32,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":"                libc::MAP_PRIVATE | libc::MAP_ANON,"},
{"lineNum":"   78","line":"                -1,"},
{"lineNum":"   79","line":"                0,"},
{"lineNum":"   80","line":"            )"},
{"lineNum":"   81","line":"        };"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"        if ptr == -1 as _ {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   84","line":"            Err(errno::errno().to_string())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"        } else {"},
{"lineNum":"   86","line":"            Ok(Self {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"                ptr: ptr as *mut u8,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"                size,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"                protection,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"                fd: None,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   91","line":"            })"},
{"lineNum":"   92","line":"        }"},
{"lineNum":"   93","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    /// Create a new memory with the given size."},
{"lineNum":"   96","line":"    pub fn with_size(size: usize) -> Result<Self, MemoryCreationError> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   97","line":"        if size == 0 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   98","line":"            return Ok(Self {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"                ptr: ptr::null_mut(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":"                size: 0,"},
{"lineNum":"  101","line":"                protection: Protect::None,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"                fd: None,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"            });"},
{"lineNum":"  104","line":"        }"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"        let size = round_up_to_page_size(size, page_size::get());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"        let ptr = unsafe {"},
{"lineNum":"  109","line":"            libc::mmap(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":"                ptr::null_mut(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":"                size,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":"                libc::PROT_NONE,"},
{"lineNum":"  113","line":"                libc::MAP_PRIVATE | libc::MAP_ANON,"},
{"lineNum":"  114","line":"                -1,"},
{"lineNum":"  115","line":"                0,"},
{"lineNum":"  116","line":"            )"},
{"lineNum":"  117","line":"        };"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"        if ptr == -1 as _ {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  120","line":"            Err(MemoryCreationError::VirtualMemoryAllocationFailed(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":"                size,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"                errno::errno().to_string(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"            ))"},
{"lineNum":"  124","line":"        } else {"},
{"lineNum":"  125","line":"            Ok(Self {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  126","line":"                ptr: ptr as *mut u8,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":"                size,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"                protection: Protect::None,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":"                fd: None,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":"            })"},
{"lineNum":"  131","line":"        }"},
{"lineNum":"  132","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"    /// Protect this memory with the given range bounds and protection."},
{"lineNum":"  135","line":"    pub unsafe fn protect(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  136","line":"        &mut self,"},
{"lineNum":"  137","line":"        range: impl RangeBounds<usize>,"},
{"lineNum":"  138","line":"        protection: Protect,"},
{"lineNum":"  139","line":"    ) -> Result<(), MemoryProtectionError> {"},
{"lineNum":"  140","line":"        let protect = protection.to_protect_const();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"        let range_start = match range.start_bound() {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  143","line":"            Bound::Included(start) => *start,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  144","line":"            Bound::Excluded(start) => *start,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  145","line":"            Bound::Unbounded => 0,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  146","line":"        };"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"        let range_end = match range.end_bound() {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  149","line":"            Bound::Included(end) => *end,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  150","line":"            Bound::Excluded(end) => *end,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  151","line":"            Bound::Unbounded => self.size(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  152","line":"        };"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"        let page_size = page_size::get();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":"        let start = self","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  156","line":"            .ptr"},
{"lineNum":"  157","line":"            .add(round_down_to_page_size(range_start, page_size));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":"        let size = round_up_to_page_size(range_end - range_start, page_size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  159","line":"        assert!(size <= self.size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"        let success = libc::mprotect(start as _, size, protect as i32);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  162","line":"        if success == -1 {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  163","line":"            Err(MemoryProtectionError::ProtectionFailed(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":"                start as usize,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  165","line":"                size,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":"                errno::errno().to_string(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  167","line":"            ))"},
{"lineNum":"  168","line":"        } else {"},
{"lineNum":"  169","line":"            self.protection = protection;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  170","line":"            Ok(())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  171","line":"        }"},
{"lineNum":"  172","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"    /// Split this memory into multiple memories by the given offset."},
{"lineNum":"  175","line":"    pub fn split_at(mut self, offset: usize) -> (Memory, Memory) {"},
{"lineNum":"  176","line":"        let page_size = page_size::get();"},
{"lineNum":"  177","line":"        if offset % page_size == 0 {"},
{"lineNum":"  178","line":"            let second_ptr = unsafe { self.ptr.add(offset) };"},
{"lineNum":"  179","line":"            let second_size = self.size - offset;"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"            self.size = offset;"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"            let second = Memory {"},
{"lineNum":"  184","line":"                ptr: second_ptr,"},
{"lineNum":"  185","line":"                size: second_size,"},
{"lineNum":"  186","line":"                protection: self.protection,"},
{"lineNum":"  187","line":"                fd: self.fd.clone(),"},
{"lineNum":"  188","line":"            };"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"            (self, second)"},
{"lineNum":"  191","line":"        } else {"},
{"lineNum":"  192","line":"            panic!(\"offset must be multiple of page size: {}\", offset)"},
{"lineNum":"  193","line":"        }"},
{"lineNum":"  194","line":"    }"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"    /// Gets the size of this memory."},
{"lineNum":"  197","line":"    pub fn size(&self) -> usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"        self.size","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    /// Gets a slice for this memory."},
{"lineNum":"  202","line":"    pub unsafe fn as_slice(&self) -> &[u8] {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  203","line":"        slice::from_raw_parts(self.ptr, self.size)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  204","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"    /// Gets a mutable slice for this memory."},
{"lineNum":"  207","line":"    pub unsafe fn as_slice_mut(&mut self) -> &mut [u8] {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  208","line":"        slice::from_raw_parts_mut(self.ptr, self.size)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  209","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"    /// Gets the protect kind of this memory."},
{"lineNum":"  212","line":"    pub fn protection(&self) -> Protect {"},
{"lineNum":"  213","line":"        self.protection"},
{"lineNum":"  214","line":"    }"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"    /// Gets mutable pointer to the memory."},
{"lineNum":"  217","line":"    pub fn as_ptr(&self) -> *mut u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  218","line":"        self.ptr","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  219","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  220","line":"}"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"impl Drop for Memory {"},
{"lineNum":"  223","line":"    fn drop(&mut self) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  224","line":"        if !self.ptr.is_null() {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  225","line":"            let success = unsafe { libc::munmap(self.ptr as _, self.size) };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  226","line":"            assert_eq!(success, 0, \"failed to unmap memory: {}\", errno::errno());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  227","line":"        }"},
{"lineNum":"  228","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  229","line":"}"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"impl Clone for Memory {"},
{"lineNum":"  232","line":"    fn clone(&self) -> Self {"},
{"lineNum":"  233","line":"        let temp_protection = if self.protection.is_writable() {"},
{"lineNum":"  234","line":"            self.protection"},
{"lineNum":"  235","line":"        } else {"},
{"lineNum":"  236","line":"            Protect::ReadWrite"},
{"lineNum":"  237","line":"        };"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"        let mut new = Memory::with_size_protect(self.size, temp_protection).unwrap();"},
{"lineNum":"  240","line":"        unsafe {"},
{"lineNum":"  241","line":"            new.as_slice_mut().copy_from_slice(self.as_slice());"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"            if temp_protection != self.protection {"},
{"lineNum":"  244","line":"                new.protect(.., self.protection).unwrap();"},
{"lineNum":"  245","line":"            }"},
{"lineNum":"  246","line":"        }"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"        new"},
{"lineNum":"  249","line":"    }"},
{"lineNum":"  250","line":"}"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"/// Kinds of memory protection."},
{"lineNum":"  253","line":"#[derive(Serialize, Deserialize, Debug, Copy, Clone, PartialEq, Eq)]"},
{"lineNum":"  254","line":"#[allow(dead_code)]"},
{"lineNum":"  255","line":"pub enum Protect {"},
{"lineNum":"  256","line":"    /// Read/write/exec allowed."},
{"lineNum":"  257","line":"    None,"},
{"lineNum":"  258","line":"    /// Read only."},
{"lineNum":"  259","line":"    Read,"},
{"lineNum":"  260","line":"    /// Read/write only."},
{"lineNum":"  261","line":"    ReadWrite,"},
{"lineNum":"  262","line":"    /// Read/exec only."},
{"lineNum":"  263","line":"    ReadExec,"},
{"lineNum":"  264","line":"    /// Read/write/exec only."},
{"lineNum":"  265","line":"    ReadWriteExec,"},
{"lineNum":"  266","line":"}"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"impl Protect {"},
{"lineNum":"  269","line":"    fn to_protect_const(self) -> u32 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  270","line":"        match self {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  271","line":"            Protect::None => 0,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  272","line":"            Protect::Read => 1,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  273","line":"            Protect::ReadWrite => 1 | 2,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  274","line":"            Protect::ReadExec => 1 | 4,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  275","line":"            Protect::ReadWriteExec => 1 | 2 | 4,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  276","line":"        }"},
{"lineNum":"  277","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"    /// Returns true if this memory is readable."},
{"lineNum":"  280","line":"    pub fn is_readable(self) -> bool {"},
{"lineNum":"  281","line":"        match self {"},
{"lineNum":"  282","line":"            Protect::Read | Protect::ReadWrite | Protect::ReadExec | Protect::ReadWriteExec => true,"},
{"lineNum":"  283","line":"            _ => false,"},
{"lineNum":"  284","line":"        }"},
{"lineNum":"  285","line":"    }"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"    /// Returns true if this memory is writable."},
{"lineNum":"  288","line":"    pub fn is_writable(self) -> bool {"},
{"lineNum":"  289","line":"        match self {"},
{"lineNum":"  290","line":"            Protect::ReadWrite | Protect::ReadWriteExec => true,"},
{"lineNum":"  291","line":"            _ => false,"},
{"lineNum":"  292","line":"        }"},
{"lineNum":"  293","line":"    }"},
{"lineNum":"  294","line":"}"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"#[derive(Debug)]"},
{"lineNum":"  297","line":"struct RawFd(i32);"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"impl RawFd {"},
{"lineNum":"  300","line":"    fn from_file(f: File) -> Self {"},
{"lineNum":"  301","line":"        RawFd(f.into_raw_fd())"},
{"lineNum":"  302","line":"    }"},
{"lineNum":"  303","line":"}"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"impl Drop for RawFd {"},
{"lineNum":"  306","line":"    fn drop(&mut self) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  307","line":"        let success = unsafe { libc::close(self.0) };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  308","line":"        assert_eq!(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  309","line":"            success,"},
{"lineNum":"  310","line":"            0,"},
{"lineNum":"  311","line":"            \"failed to close mmapped file descriptor: {}\","},
{"lineNum":"  312","line":"            errno::errno()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  313","line":"        );"},
{"lineNum":"  314","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  315","line":"}"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"/// Round `size` up to the nearest multiple of `page_size`."},
{"lineNum":"  318","line":"fn round_up_to_page_size(size: usize, page_size: usize) -> usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  319","line":"    assert!(page_size.is_power_of_two());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  320","line":"    (size + (page_size - 1)) & !(page_size - 1)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  321","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"/// Round `size` down to the nearest multiple of `page_size`."},
{"lineNum":"  324","line":"fn round_down_to_page_size(size: usize, page_size: usize) -> usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  325","line":"    assert!(page_size.is_power_of_two());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  326","line":"    size & !(page_size - 1)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  327","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "compile_debug", "date" : "2019-11-28 11:37:30", "instrumented" : 101, "covered" : 0,};
var merged_data = [];
