var data = {lines:[
{"lineNum":"    1","line":"// https://llvm.org/docs/StackMaps.html#stackmap-section"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"use byteorder::{LittleEndian, ReadBytesExt};"},
{"lineNum":"    4","line":"use std::io::{self, Cursor};"},
{"lineNum":"    5","line":"use wasmer_runtime_core::vm::Ctx;"},
{"lineNum":"    6","line":"use wasmer_runtime_core::{"},
{"lineNum":"    7","line":"    module::ModuleInfo,"},
{"lineNum":"    8","line":"    structures::TypedIndex,"},
{"lineNum":"    9","line":"    types::{GlobalIndex, LocalOrImport, TableIndex},"},
{"lineNum":"   10","line":"};"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#[derive(Default, Debug, Clone)]","class":"lineCov","hits":"2","order":"387","possible_hits":"2",},
{"lineNum":"   13","line":"pub struct StackmapRegistry {"},
{"lineNum":"   14","line":"    pub entries: Vec<StackmapEntry>,","class":"lineCov","hits":"1","order":"388","possible_hits":"1",},
{"lineNum":"   15","line":"}"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"#[derive(Debug, Clone)]"},
{"lineNum":"   18","line":"pub struct StackmapEntry {"},
{"lineNum":"   19","line":"    pub kind: StackmapEntryKind,"},
{"lineNum":"   20","line":"    pub local_function_id: usize,"},
{"lineNum":"   21","line":"    pub opcode_offset: usize,"},
{"lineNum":"   22","line":"    pub value_semantics: Vec<ValueSemantic>,"},
{"lineNum":"   23","line":"    pub local_count: usize,"},
{"lineNum":"   24","line":"    pub stack_count: usize,"},
{"lineNum":"   25","line":"    pub is_start: bool,"},
{"lineNum":"   26","line":"}"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"#[derive(Debug, Clone)]"},
{"lineNum":"   29","line":"pub enum ValueSemantic {"},
{"lineNum":"   30","line":"    WasmLocal(usize),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   31","line":"    WasmStack(usize),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   32","line":"    Ctx,"},
{"lineNum":"   33","line":"    SignalMem,"},
{"lineNum":"   34","line":"    PointerToMemoryBase,"},
{"lineNum":"   35","line":"    PointerToMemoryBound, // 64-bit"},
{"lineNum":"   36","line":"    MemoryBase,"},
{"lineNum":"   37","line":"    MemoryBound, // 64-bit"},
{"lineNum":"   38","line":"    PointerToGlobal(usize),"},
{"lineNum":"   39","line":"    Global(usize),"},
{"lineNum":"   40","line":"    PointerToTableBase,"},
{"lineNum":"   41","line":"    PointerToTableBound,"},
{"lineNum":"   42","line":"    ImportedFuncPointer(usize),"},
{"lineNum":"   43","line":"    ImportedFuncCtx(usize),"},
{"lineNum":"   44","line":"    DynamicSigindice(usize),"},
{"lineNum":"   45","line":"}"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"#[derive(Debug, Clone, Copy, Eq, PartialEq)]","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   48","line":"pub enum StackmapEntryKind {"},
{"lineNum":"   49","line":"    FunctionHeader,"},
{"lineNum":"   50","line":"    Loop,"},
{"lineNum":"   51","line":"    Call,"},
{"lineNum":"   52","line":"    Trappable,"},
{"lineNum":"   53","line":"}"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"impl StackmapEntry {"},
{"lineNum":"   56","line":"    #[cfg(all(any(target_os = \"linux\", target_os = \"macos\"), target_arch = \"x86_64\"))]"},
{"lineNum":"   57","line":"    pub fn populate_msm(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   58","line":"        &self,"},
{"lineNum":"   59","line":"        module_info: &ModuleInfo,"},
{"lineNum":"   60","line":"        code_addr: usize,"},
{"lineNum":"   61","line":"        llvm_map: &StackMap,"},
{"lineNum":"   62","line":"        size_record: &StkSizeRecord,"},
{"lineNum":"   63","line":"        map_record: &StkMapRecord,"},
{"lineNum":"   64","line":"        end: Option<(&StackmapEntry, &StkMapRecord)>,"},
{"lineNum":"   65","line":"        msm: &mut wasmer_runtime_core::state::ModuleStateMap,"},
{"lineNum":"   66","line":"    ) {"},
{"lineNum":"   67","line":"        use std::collections::{BTreeMap, HashMap};"},
{"lineNum":"   68","line":"        use wasmer_runtime_core::state::{"},
{"lineNum":"   69","line":"            x64::{new_machine_state, X64Register, GPR},"},
{"lineNum":"   70","line":"            FunctionStateMap, MachineStateDiff, MachineValue, OffsetInfo, RegisterIndex,"},
{"lineNum":"   71","line":"            SuspendOffset, WasmAbstractValue,"},
{"lineNum":"   72","line":"        };"},
{"lineNum":"   73","line":"        use wasmer_runtime_core::vm;"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"        let func_base_addr = (size_record.function_address as usize)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   76","line":"            .checked_sub(code_addr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":"            .unwrap();"},
{"lineNum":"   78","line":"        let target_offset = func_base_addr + map_record.instruction_offset as usize;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   79","line":"        assert!(self.is_start);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"        if msm.local_functions.len() == self.local_function_id {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   82","line":"            assert_eq!(self.kind, StackmapEntryKind::FunctionHeader);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   83","line":"            msm.local_functions.insert(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   84","line":"                target_offset,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"                FunctionStateMap::new(new_machine_state(), self.local_function_id, 0, vec![]),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   86","line":"            );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"        } else if msm.local_functions.len() == self.local_function_id + 1 {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   88","line":"        } else {"},
{"lineNum":"   89","line":"            panic!(\"unordered local functions\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"        }"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"        let (_, fsm) = msm.local_functions.iter_mut().last().unwrap();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"        assert_eq!(self.value_semantics.len(), map_record.locations.len());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"        // System V requires 16-byte alignment before each call instruction."},
{"lineNum":"   97","line":"        // Considering the saved rbp we need to ensure the stack size % 16 always equals to 8."},
{"lineNum":"   98","line":"        assert!(size_record.stack_size % 16 == 8);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"        // Layout begins just below saved rbp. (push rbp; mov rbp, rsp)"},
{"lineNum":"  101","line":"        let mut machine_stack_half_layout: Vec<MachineValue> ="},
{"lineNum":"  102","line":"            vec![MachineValue::Undefined; (size_record.stack_size - 8) as usize / 4];","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  103","line":"        let mut regs: Vec<(RegisterIndex, MachineValue)> = vec![];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  104","line":"        let mut stack_constants: HashMap<usize, u64> = HashMap::new();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"        let mut prev_frame_diff: BTreeMap<usize, Option<MachineValue>> = BTreeMap::new();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"        let mut wasm_locals: Vec<WasmAbstractValue> = vec![];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  109","line":"        let mut wasm_stack: Vec<WasmAbstractValue> = vec![];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"        for (i, loc) in map_record.locations.iter().enumerate() {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  112","line":"            let mv = match self.value_semantics[i] {","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  113","line":"                ValueSemantic::WasmLocal(x) => {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  114","line":"                    if x != wasm_locals.len() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":"                        panic!(\"unordered local values\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  116","line":"                    }"},
{"lineNum":"  117","line":"                    wasm_locals.push(WasmAbstractValue::Runtime);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":"                    MachineValue::WasmLocal(x)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":"                }"},
{"lineNum":"  120","line":"                ValueSemantic::WasmStack(x) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":"                    if x != wasm_stack.len() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"                        panic!(\"unordered stack values\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"                    }"},
{"lineNum":"  124","line":"                    wasm_stack.push(WasmAbstractValue::Runtime);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"                    MachineValue::WasmStack(x)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  126","line":"                }"},
{"lineNum":"  127","line":"                ValueSemantic::Ctx => MachineValue::Vmctx,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"                ValueSemantic::SignalMem => {"},
{"lineNum":"  129","line":"                    MachineValue::VmctxDeref(vec![Ctx::offset_interrupt_signal_mem() as usize, 0])","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  130","line":"                }"},
{"lineNum":"  131","line":"                ValueSemantic::PointerToMemoryBase => {"},
{"lineNum":"  132","line":"                    MachineValue::VmctxDeref(vec![Ctx::offset_memory_base() as usize])","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  133","line":"                }"},
{"lineNum":"  134","line":"                ValueSemantic::PointerToMemoryBound => {"},
{"lineNum":"  135","line":"                    MachineValue::VmctxDeref(vec![Ctx::offset_memory_bound() as usize])","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  136","line":"                }"},
{"lineNum":"  137","line":"                ValueSemantic::MemoryBase => {"},
{"lineNum":"  138","line":"                    MachineValue::VmctxDeref(vec![Ctx::offset_memory_base() as usize, 0])","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  139","line":"                }"},
{"lineNum":"  140","line":"                ValueSemantic::MemoryBound => {"},
{"lineNum":"  141","line":"                    MachineValue::VmctxDeref(vec![Ctx::offset_memory_bound() as usize, 0])","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  142","line":"                }"},
{"lineNum":"  143","line":"                ValueSemantic::PointerToGlobal(idx) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"                    MachineValue::VmctxDeref(deref_global(module_info, idx, false))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  145","line":"                }"},
{"lineNum":"  146","line":"                ValueSemantic::Global(idx) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":"                    MachineValue::VmctxDeref(deref_global(module_info, idx, true))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":"                }"},
{"lineNum":"  149","line":"                ValueSemantic::PointerToTableBase => {"},
{"lineNum":"  150","line":"                    MachineValue::VmctxDeref(deref_table_base(module_info, 0, false))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  151","line":"                }"},
{"lineNum":"  152","line":"                ValueSemantic::PointerToTableBound => {"},
{"lineNum":"  153","line":"                    MachineValue::VmctxDeref(deref_table_bound(module_info, 0, false))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":"                }"},
{"lineNum":"  155","line":"                ValueSemantic::ImportedFuncPointer(idx) => MachineValue::VmctxDeref(vec![","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  156","line":"                    Ctx::offset_imported_funcs() as usize,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  157","line":"                    vm::ImportedFunc::size() as usize * idx","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  158","line":"                        + vm::ImportedFunc::offset_func() as usize,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":"                    0,"},
{"lineNum":"  160","line":"                ]),"},
{"lineNum":"  161","line":"                ValueSemantic::ImportedFuncCtx(idx) => MachineValue::VmctxDeref(vec![","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  162","line":"                    Ctx::offset_imported_funcs() as usize,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  163","line":"                    vm::ImportedFunc::size() as usize * idx","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  164","line":"                        + vm::ImportedFunc::offset_func_ctx() as usize,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  165","line":"                    0,"},
{"lineNum":"  166","line":"                ]),"},
{"lineNum":"  167","line":"                ValueSemantic::DynamicSigindice(idx) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  168","line":"                    MachineValue::VmctxDeref(vec![Ctx::offset_signatures() as usize, idx * 4, 0])","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  169","line":"                }"},
{"lineNum":"  170","line":"            };"},
{"lineNum":"  171","line":"            match loc.ty {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  172","line":"                LocationType::Register => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  173","line":"                    let index = X64Register::from_dwarf_regnum(loc.dwarf_regnum)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  174","line":"                        .expect(\"invalid regnum\")"},
{"lineNum":"  175","line":"                        .to_index();"},
{"lineNum":"  176","line":"                    regs.push((index, mv));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  177","line":"                }"},
{"lineNum":"  178","line":"                LocationType::Constant => {"},
{"lineNum":"  179","line":"                    let v = loc.offset_or_small_constant as u32 as u64;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  180","line":"                    match mv {"},
{"lineNum":"  181","line":"                        MachineValue::WasmStack(x) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":"                            stack_constants.insert(x, v);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"                            *wasm_stack.last_mut().unwrap() = WasmAbstractValue::Const(v);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"                        }"},
{"lineNum":"  185","line":"                        _ => {} // TODO"},
{"lineNum":"  186","line":"                    }"},
{"lineNum":"  187","line":"                }"},
{"lineNum":"  188","line":"                LocationType::ConstantIndex => {"},
{"lineNum":"  189","line":"                    let v ="},
{"lineNum":"  190","line":"                        llvm_map.constants[loc.offset_or_small_constant as usize].large_constant;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  191","line":"                    match mv {"},
{"lineNum":"  192","line":"                        MachineValue::WasmStack(x) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":"                            stack_constants.insert(x, v);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":"                            *wasm_stack.last_mut().unwrap() = WasmAbstractValue::Const(v);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  195","line":"                        }"},
{"lineNum":"  196","line":"                        _ => {} // TODO"},
{"lineNum":"  197","line":"                    }"},
{"lineNum":"  198","line":"                }"},
{"lineNum":"  199","line":"                LocationType::Direct => match mv {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  200","line":"                    MachineValue::WasmLocal(_) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  201","line":"                        assert_eq!(loc.location_size, 8); // the pointer itself","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  202","line":"                        assert!(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  203","line":"                            X64Register::from_dwarf_regnum(loc.dwarf_regnum).unwrap()","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  204","line":"                                == X64Register::GPR(GPR::RBP)"},
{"lineNum":"  205","line":"                        );"},
{"lineNum":"  206","line":"                        if loc.offset_or_small_constant >= 0 {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  207","line":"                            assert!(loc.offset_or_small_constant >= 16); // (saved_rbp, return_address)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  208","line":"                            assert!(loc.offset_or_small_constant % 8 == 0);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  209","line":"                            prev_frame_diff","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  210","line":"                                .insert((loc.offset_or_small_constant as usize - 16) / 8, Some(mv));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  211","line":"                        } else {"},
{"lineNum":"  212","line":"                            let stack_offset = ((-loc.offset_or_small_constant) / 4) as usize;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  213","line":"                            assert!(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  214","line":"                                stack_offset > 0 && stack_offset <= machine_stack_half_layout.len()","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  215","line":"                            );"},
{"lineNum":"  216","line":"                            machine_stack_half_layout[stack_offset - 1] = mv;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  217","line":"                        }"},
{"lineNum":"  218","line":"                    }"},
{"lineNum":"  219","line":"                    _ => unreachable!(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  220","line":"                        \"Direct location type is not expected for values other than local\""},
{"lineNum":"  221","line":"                    ),"},
{"lineNum":"  222","line":"                },"},
{"lineNum":"  223","line":"                LocationType::Indirect => {"},
{"lineNum":"  224","line":"                    assert!(loc.offset_or_small_constant < 0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  225","line":"                    assert!(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  226","line":"                        X64Register::from_dwarf_regnum(loc.dwarf_regnum).unwrap()","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  227","line":"                            == X64Register::GPR(GPR::RBP)"},
{"lineNum":"  228","line":"                    );"},
{"lineNum":"  229","line":"                    let stack_offset = ((-loc.offset_or_small_constant) / 4) as usize;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  230","line":"                    assert!(stack_offset > 0 && stack_offset <= machine_stack_half_layout.len());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  231","line":"                    machine_stack_half_layout[stack_offset - 1] = mv;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  232","line":"                }"},
{"lineNum":"  233","line":"            }"},
{"lineNum":"  234","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"        assert_eq!(wasm_stack.len(), self.stack_count);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  237","line":"        assert_eq!(wasm_locals.len(), self.local_count);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"        let mut machine_stack_layout: Vec<MachineValue> ="},
{"lineNum":"  240","line":"            Vec::with_capacity(machine_stack_half_layout.len() / 2);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"        for i in 0..machine_stack_half_layout.len() / 2 {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  243","line":"            let major = &machine_stack_half_layout[i * 2 + 1]; // mod 8 == 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  244","line":"            let minor = &machine_stack_half_layout[i * 2]; // mod 8 == 4","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  245","line":"            let only_major = match *minor {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":"                MachineValue::Undefined => true,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  247","line":"                _ => false,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  248","line":"            };"},
{"lineNum":"  249","line":"            if only_major {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  250","line":"                machine_stack_layout.push(major.clone());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":"            } else {"},
{"lineNum":"  252","line":"                machine_stack_layout.push(MachineValue::TwoHalves(Box::new((","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  253","line":"                    major.clone(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  254","line":"                    minor.clone(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  255","line":"                ))));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  256","line":"            }"},
{"lineNum":"  257","line":"        }"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"        let diff = MachineStateDiff {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":"            last: None,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  261","line":"            stack_push: machine_stack_layout,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":"            stack_pop: 0,"},
{"lineNum":"  263","line":"            prev_frame_diff,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":"            reg_diff: regs,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":"            wasm_stack_push: wasm_stack,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  266","line":"            wasm_stack_pop: 0,"},
{"lineNum":"  267","line":"            wasm_stack_private_depth: 0,"},
{"lineNum":"  268","line":"            wasm_inst_offset: self.opcode_offset,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":"        };"},
{"lineNum":"  270","line":"        let diff_id = fsm.diffs.len();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  271","line":"        fsm.diffs.push(diff);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"        match self.kind {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  274","line":"            StackmapEntryKind::FunctionHeader => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  275","line":"                fsm.locals = wasm_locals;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  276","line":"            }"},
{"lineNum":"  277","line":"            _ => {"},
{"lineNum":"  278","line":"                assert_eq!(fsm.locals, wasm_locals);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  279","line":"            }"},
{"lineNum":"  280","line":"        }"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"        let end_offset = {"},
{"lineNum":"  283","line":"            if let Some(end) = end {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  284","line":"                let (end_entry, end_record) = end;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  285","line":"                assert_eq!(end_entry.is_start, false);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  286","line":"                assert_eq!(self.opcode_offset, end_entry.opcode_offset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  287","line":"                let end_offset = func_base_addr + end_record.instruction_offset as usize;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  288","line":"                assert!(end_offset >= target_offset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  289","line":"                end_offset","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  290","line":"            } else {"},
{"lineNum":"  291","line":"                target_offset + 1","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  292","line":"            }"},
{"lineNum":"  293","line":"        };"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"        match self.kind {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  296","line":"            StackmapEntryKind::Loop => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  297","line":"                fsm.wasm_offset_to_target_offset","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  298","line":"                    .insert(self.opcode_offset, SuspendOffset::Loop(target_offset));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  299","line":"                fsm.loop_offsets.insert(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  300","line":"                    target_offset,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  301","line":"                    OffsetInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":"                        end_offset,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  303","line":"                        diff_id,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  304","line":"                        activate_offset: target_offset,"},
{"lineNum":"  305","line":"                    },"},
{"lineNum":"  306","line":"                );"},
{"lineNum":"  307","line":"            }"},
{"lineNum":"  308","line":"            StackmapEntryKind::Call => {"},
{"lineNum":"  309","line":"                fsm.wasm_offset_to_target_offset","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  310","line":"                    .insert(self.opcode_offset, SuspendOffset::Call(target_offset));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  311","line":"                fsm.call_offsets.insert(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  312","line":"                    target_offset,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  313","line":"                    OffsetInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  314","line":"                        end_offset: end_offset + 1, // The return address is just after \'call\' instruction. Offset by one here.","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  315","line":"                        diff_id,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  316","line":"                        activate_offset: target_offset,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  317","line":"                    },"},
{"lineNum":"  318","line":"                );"},
{"lineNum":"  319","line":"            }"},
{"lineNum":"  320","line":"            StackmapEntryKind::Trappable => {"},
{"lineNum":"  321","line":"                fsm.wasm_offset_to_target_offset","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  322","line":"                    .insert(self.opcode_offset, SuspendOffset::Trappable(target_offset));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  323","line":"                fsm.trappable_offsets.insert(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  324","line":"                    target_offset,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  325","line":"                    OffsetInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  326","line":"                        end_offset,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  327","line":"                        diff_id,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  328","line":"                        activate_offset: target_offset,"},
{"lineNum":"  329","line":"                    },"},
{"lineNum":"  330","line":"                );"},
{"lineNum":"  331","line":"            }"},
{"lineNum":"  332","line":"            StackmapEntryKind::FunctionHeader => {"},
{"lineNum":"  333","line":"                fsm.wasm_function_header_target_offset = Some(SuspendOffset::Loop(target_offset));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  334","line":"                fsm.loop_offsets.insert(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  335","line":"                    target_offset,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  336","line":"                    OffsetInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  337","line":"                        end_offset,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  338","line":"                        diff_id,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  339","line":"                        activate_offset: target_offset,"},
{"lineNum":"  340","line":"                    },"},
{"lineNum":"  341","line":"                );"},
{"lineNum":"  342","line":"            }"},
{"lineNum":"  343","line":"        }"},
{"lineNum":"  344","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  345","line":"}"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"#[derive(Clone, Debug, Default)]","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  348","line":"pub struct StackMap {"},
{"lineNum":"  349","line":"    pub version: u8,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  350","line":"    pub stk_size_records: Vec<StkSizeRecord>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  351","line":"    pub constants: Vec<Constant>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  352","line":"    pub stk_map_records: Vec<StkMapRecord>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  353","line":"}"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"#[derive(Copy, Clone, Debug, Default)]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  356","line":"pub struct StkSizeRecord {"},
{"lineNum":"  357","line":"    pub function_address: u64,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  358","line":"    pub stack_size: u64,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  359","line":"    pub record_count: u64,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  360","line":"}"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"#[derive(Copy, Clone, Debug, Default)]"},
{"lineNum":"  363","line":"pub struct Constant {"},
{"lineNum":"  364","line":"    pub large_constant: u64,"},
{"lineNum":"  365","line":"}"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"#[derive(Clone, Debug, Default)]","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  368","line":"pub struct StkMapRecord {"},
{"lineNum":"  369","line":"    pub patchpoint_id: u64,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  370","line":"    pub instruction_offset: u32,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  371","line":"    pub locations: Vec<Location>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  372","line":"    pub live_outs: Vec<LiveOut>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  373","line":"}"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"#[derive(Copy, Clone, Debug)]"},
{"lineNum":"  376","line":"pub struct Location {"},
{"lineNum":"  377","line":"    pub ty: LocationType,"},
{"lineNum":"  378","line":"    pub location_size: u16,"},
{"lineNum":"  379","line":"    pub dwarf_regnum: u16,"},
{"lineNum":"  380","line":"    pub offset_or_small_constant: i32,"},
{"lineNum":"  381","line":"}"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"#[derive(Copy, Clone, Debug, Default)]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  384","line":"pub struct LiveOut {"},
{"lineNum":"  385","line":"    pub dwarf_regnum: u16,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  386","line":"    pub size_in_bytes: u8,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  387","line":"}"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"#[derive(Copy, Clone, Debug)]"},
{"lineNum":"  390","line":"pub enum LocationType {"},
{"lineNum":"  391","line":"    Register,"},
{"lineNum":"  392","line":"    Direct,"},
{"lineNum":"  393","line":"    Indirect,"},
{"lineNum":"  394","line":"    Constant,"},
{"lineNum":"  395","line":"    ConstantIndex,"},
{"lineNum":"  396","line":"}"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"impl StackMap {"},
{"lineNum":"  399","line":"    pub fn parse(raw: &[u8]) -> io::Result<StackMap> {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  400","line":"        let mut reader = Cursor::new(raw);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  401","line":"        let mut map = StackMap::default();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"        let version = reader.read_u8()?;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  404","line":"        if version != 3 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  405","line":"            return Err(io::Error::new(io::ErrorKind::Other, \"version is not 3\"));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  406","line":"        }"},
{"lineNum":"  407","line":"        map.version = version;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  408","line":"        if reader.read_u8()? != 0 {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  409","line":"            return Err(io::Error::new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  410","line":"                io::ErrorKind::Other,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  411","line":"                \"reserved field is not zero (1)\","},
{"lineNum":"  412","line":"            ));"},
{"lineNum":"  413","line":"        }"},
{"lineNum":"  414","line":"        if reader.read_u16::<LittleEndian>()? != 0 {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  415","line":"            return Err(io::Error::new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  416","line":"                io::ErrorKind::Other,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  417","line":"                \"reserved field is not zero (2)\","},
{"lineNum":"  418","line":"            ));"},
{"lineNum":"  419","line":"        }"},
{"lineNum":"  420","line":"        let num_functions = reader.read_u32::<LittleEndian>()?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  421","line":"        let num_constants = reader.read_u32::<LittleEndian>()?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  422","line":"        let num_records = reader.read_u32::<LittleEndian>()?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  423","line":"        for _ in 0..num_functions {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  424","line":"            let mut record = StkSizeRecord::default();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  425","line":"            record.function_address = reader.read_u64::<LittleEndian>()?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  426","line":"            record.stack_size = reader.read_u64::<LittleEndian>()?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  427","line":"            record.record_count = reader.read_u64::<LittleEndian>()?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  428","line":"            map.stk_size_records.push(record);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  429","line":"        }"},
{"lineNum":"  430","line":"        for _ in 0..num_constants {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  431","line":"            map.constants.push(Constant {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  432","line":"                large_constant: reader.read_u64::<LittleEndian>()?,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  433","line":"            });","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  434","line":"        }"},
{"lineNum":"  435","line":"        for _ in 0..num_records {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  436","line":"            let mut record = StkMapRecord::default();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"            record.patchpoint_id = reader.read_u64::<LittleEndian>()?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  439","line":"            record.instruction_offset = reader.read_u32::<LittleEndian>()?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  440","line":"            if reader.read_u16::<LittleEndian>()? != 0 {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  441","line":"                return Err(io::Error::new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  442","line":"                    io::ErrorKind::Other,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  443","line":"                    \"reserved field is not zero (3)\","},
{"lineNum":"  444","line":"                ));"},
{"lineNum":"  445","line":"            }"},
{"lineNum":"  446","line":"            let num_locations = reader.read_u16::<LittleEndian>()?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  447","line":"            for _ in 0..num_locations {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  448","line":"                let ty = reader.read_u8()?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"                let mut location = Location {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  451","line":"                    ty: match ty {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  452","line":"                        1 => LocationType::Register,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  453","line":"                        2 => LocationType::Direct,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  454","line":"                        3 => LocationType::Indirect,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  455","line":"                        4 => LocationType::Constant,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  456","line":"                        5 => LocationType::ConstantIndex,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  457","line":"                        _ => {"},
{"lineNum":"  458","line":"                            return Err(io::Error::new(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  459","line":"                                io::ErrorKind::Other,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  460","line":"                                \"unknown location type\","},
{"lineNum":"  461","line":"                            ))"},
{"lineNum":"  462","line":"                        }"},
{"lineNum":"  463","line":"                    },"},
{"lineNum":"  464","line":"                    location_size: 0,"},
{"lineNum":"  465","line":"                    dwarf_regnum: 0,"},
{"lineNum":"  466","line":"                    offset_or_small_constant: 0,"},
{"lineNum":"  467","line":"                };"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"                if reader.read_u8()? != 0 {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  470","line":"                    return Err(io::Error::new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  471","line":"                        io::ErrorKind::Other,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  472","line":"                        \"reserved field is not zero (4)\","},
{"lineNum":"  473","line":"                    ));"},
{"lineNum":"  474","line":"                }"},
{"lineNum":"  475","line":"                location.location_size = reader.read_u16::<LittleEndian>()?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  476","line":"                location.dwarf_regnum = reader.read_u16::<LittleEndian>()?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  477","line":"                if reader.read_u16::<LittleEndian>()? != 0 {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  478","line":"                    return Err(io::Error::new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  479","line":"                        io::ErrorKind::Other,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  480","line":"                        \"reserved field is not zero (5)\","},
{"lineNum":"  481","line":"                    ));"},
{"lineNum":"  482","line":"                }"},
{"lineNum":"  483","line":"                location.offset_or_small_constant = reader.read_i32::<LittleEndian>()?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"                record.locations.push(location);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  486","line":"            }"},
{"lineNum":"  487","line":"            if reader.position() % 8 != 0 {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  488","line":"                if reader.read_u32::<LittleEndian>()? != 0 {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  489","line":"                    return Err(io::Error::new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  490","line":"                        io::ErrorKind::Other,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  491","line":"                        \"reserved field is not zero (6)\","},
{"lineNum":"  492","line":"                    ));"},
{"lineNum":"  493","line":"                }"},
{"lineNum":"  494","line":"            }"},
{"lineNum":"  495","line":"            if reader.read_u16::<LittleEndian>()? != 0 {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  496","line":"                return Err(io::Error::new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  497","line":"                    io::ErrorKind::Other,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  498","line":"                    \"reserved field is not zero (7)\","},
{"lineNum":"  499","line":"                ));"},
{"lineNum":"  500","line":"            }"},
{"lineNum":"  501","line":"            let num_live_outs = reader.read_u16::<LittleEndian>()?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  502","line":"            for _ in 0..num_live_outs {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  503","line":"                let mut liveout = LiveOut::default();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"                liveout.dwarf_regnum = reader.read_u16::<LittleEndian>()?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  506","line":"                if reader.read_u8()? != 0 {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  507","line":"                    return Err(io::Error::new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  508","line":"                        io::ErrorKind::Other,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  509","line":"                        \"reserved field is not zero (8)\","},
{"lineNum":"  510","line":"                    ));"},
{"lineNum":"  511","line":"                }"},
{"lineNum":"  512","line":"                liveout.size_in_bytes = reader.read_u8()?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"                record.live_outs.push(liveout);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  515","line":"            }"},
{"lineNum":"  516","line":"            if reader.position() % 8 != 0 {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  517","line":"                if reader.read_u32::<LittleEndian>()? != 0 {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  518","line":"                    return Err(io::Error::new(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  519","line":"                        io::ErrorKind::Other,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  520","line":"                        \"reserved field is not zero (9)\","},
{"lineNum":"  521","line":"                    ));"},
{"lineNum":"  522","line":"                }"},
{"lineNum":"  523","line":"            }"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"            map.stk_map_records.push(record);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  526","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  527","line":"        Ok(map)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  528","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  529","line":"}"},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":"fn deref_global(info: &ModuleInfo, idx: usize, deref_into_value: bool) -> Vec<usize> {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  532","line":"    let mut x: Vec<usize> = match GlobalIndex::new(idx).local_or_import(info) {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  533","line":"        LocalOrImport::Local(idx) => vec![Ctx::offset_globals() as usize, idx.index() * 8, 0],","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  534","line":"        LocalOrImport::Import(idx) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  535","line":"            vec![Ctx::offset_imported_globals() as usize, idx.index() * 8, 0]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  536","line":"        }"},
{"lineNum":"  537","line":"    };"},
{"lineNum":"  538","line":"    if deref_into_value {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  539","line":"        x.push(0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  540","line":"    }"},
{"lineNum":"  541","line":"    x","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  542","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"fn deref_table_base(info: &ModuleInfo, idx: usize, deref_into_value: bool) -> Vec<usize> {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  545","line":"    let mut x: Vec<usize> = match TableIndex::new(idx).local_or_import(info) {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  546","line":"        LocalOrImport::Local(idx) => vec![Ctx::offset_tables() as usize, idx.index() * 8, 0],","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  547","line":"        LocalOrImport::Import(idx) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  548","line":"            vec![Ctx::offset_imported_tables() as usize, idx.index() * 8, 0]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  549","line":"        }"},
{"lineNum":"  550","line":"    };"},
{"lineNum":"  551","line":"    if deref_into_value {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  552","line":"        x.push(0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  553","line":"    }"},
{"lineNum":"  554","line":"    x","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  555","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"fn deref_table_bound(info: &ModuleInfo, idx: usize, deref_into_value: bool) -> Vec<usize> {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  558","line":"    let mut x: Vec<usize> = match TableIndex::new(idx).local_or_import(info) {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  559","line":"        LocalOrImport::Local(idx) => vec![Ctx::offset_tables() as usize, idx.index() * 8, 8],","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  560","line":"        LocalOrImport::Import(idx) => {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  561","line":"            vec![Ctx::offset_imported_tables() as usize, idx.index() * 8, 8]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  562","line":"        }"},
{"lineNum":"  563","line":"    };"},
{"lineNum":"  564","line":"    if deref_into_value {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  565","line":"        x.push(0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  566","line":"    }"},
{"lineNum":"  567","line":"    x","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  568","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "compile_debug", "date" : "2019-11-28 11:37:30", "instrumented" : 285, "covered" : 2,};
var merged_data = [];
