var data = {lines:[
{"lineNum":"    1","line":"#pragma once"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"#include <cstddef>"},
{"lineNum":"    4","line":"#include <cstdint>"},
{"lineNum":"    5","line":"#include <exception>"},
{"lineNum":"    6","line":"#include <functional>"},
{"lineNum":"    7","line":"#include <iostream>"},
{"lineNum":"    8","line":"#include <memory>"},
{"lineNum":"    9","line":"#include <setjmp.h>"},
{"lineNum":"   10","line":"#include <sstream>"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#include <llvm/ExecutionEngine/RuntimeDyld.h>"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"typedef enum {"},
{"lineNum":"   15","line":"  PROTECT_NONE,"},
{"lineNum":"   16","line":"  PROTECT_READ,"},
{"lineNum":"   17","line":"  PROTECT_READ_WRITE,"},
{"lineNum":"   18","line":"  PROTECT_READ_EXECUTE,"},
{"lineNum":"   19","line":"} mem_protect_t;"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"typedef enum {"},
{"lineNum":"   22","line":"  RESULT_OK,"},
{"lineNum":"   23","line":"  RESULT_ALLOCATE_FAILURE,"},
{"lineNum":"   24","line":"  RESULT_PROTECT_FAILURE,"},
{"lineNum":"   25","line":"  RESULT_DEALLOC_FAILURE,"},
{"lineNum":"   26","line":"  RESULT_OBJECT_LOAD_FAILURE,"},
{"lineNum":"   27","line":"} result_t;"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"typedef result_t (*alloc_memory_t)(size_t size, mem_protect_t protect,"},
{"lineNum":"   30","line":"                                   uint8_t **ptr_out, size_t *size_out);"},
{"lineNum":"   31","line":"typedef result_t (*protect_memory_t)(uint8_t *ptr, size_t size,"},
{"lineNum":"   32","line":"                                     mem_protect_t protect);"},
{"lineNum":"   33","line":"typedef result_t (*dealloc_memory_t)(uint8_t *ptr, size_t size);"},
{"lineNum":"   34","line":"typedef uintptr_t (*lookup_vm_symbol_t)(const char *name_ptr, size_t length);"},
{"lineNum":"   35","line":"typedef void (*fde_visitor_t)(uint8_t *fde);"},
{"lineNum":"   36","line":"typedef result_t (*visit_fde_t)(uint8_t *fde, size_t size,"},
{"lineNum":"   37","line":"                                fde_visitor_t visitor);"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"typedef void (*trampoline_t)(void *, void *, void *, void *);"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"typedef struct {"},
{"lineNum":"   42","line":"  /* Memory management. */"},
{"lineNum":"   43","line":"  alloc_memory_t alloc_memory;"},
{"lineNum":"   44","line":"  protect_memory_t protect_memory;"},
{"lineNum":"   45","line":"  dealloc_memory_t dealloc_memory;"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"  lookup_vm_symbol_t lookup_vm_symbol;"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"  visit_fde_t visit_fde;"},
{"lineNum":"   50","line":"} callbacks_t;"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"typedef struct {"},
{"lineNum":"   53","line":"  size_t data, vtable;"},
{"lineNum":"   54","line":"} box_any_t;"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"enum WasmTrapType {"},
{"lineNum":"   57","line":"  Unreachable = 0,"},
{"lineNum":"   58","line":"  IncorrectCallIndirectSignature = 1,"},
{"lineNum":"   59","line":"  MemoryOutOfBounds = 2,"},
{"lineNum":"   60","line":"  CallIndirectOOB = 3,"},
{"lineNum":"   61","line":"  IllegalArithmetic = 4,"},
{"lineNum":"   62","line":"  Unknown,"},
{"lineNum":"   63","line":"};"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"extern \"C\" void callback_trampoline(void *, void *);"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"struct MemoryManager : llvm::RuntimeDyld::MemoryManager {"},
{"lineNum":"   68","line":"public:"},
{"lineNum":"   69","line":"  MemoryManager(callbacks_t callbacks) : callbacks(callbacks) {}","class":"linePartCov","hits":"3","order":"595","possible_hits":"4",},
{"lineNum":"   70","line":"  virtual ~MemoryManager() override;"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"  inline uint8_t *get_stack_map_ptr() const { return stack_map_ptr; }","class":"linePartCov","hits":"3","order":"696","possible_hits":"4",},
{"lineNum":"   73","line":"  inline size_t get_stack_map_size() const { return stack_map_size; }","class":"linePartCov","hits":"3","order":"704","possible_hits":"4",},
{"lineNum":"   74","line":"  inline uint8_t *get_code_ptr() const { return (uint8_t *)code_start_ptr; }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   75","line":"  inline size_t get_code_size() const { return code_size; }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"  virtual uint8_t *allocateCodeSection(uintptr_t size, unsigned alignment,"},
{"lineNum":"   78","line":"                                       unsigned section_id,"},
{"lineNum":"   79","line":"                                       llvm::StringRef section_name) override;"},
{"lineNum":"   80","line":"  virtual uint8_t *allocateDataSection(uintptr_t size, unsigned alignment,"},
{"lineNum":"   81","line":"                                       unsigned section_id,"},
{"lineNum":"   82","line":"                                       llvm::StringRef section_name,"},
{"lineNum":"   83","line":"                                       bool read_only) override;"},
{"lineNum":"   84","line":"  virtual void reserveAllocationSpace(uintptr_t code_size, uint32_t code_align,"},
{"lineNum":"   85","line":"                                      uintptr_t read_data_size,"},
{"lineNum":"   86","line":"                                      uint32_t read_data_align,"},
{"lineNum":"   87","line":"                                      uintptr_t read_write_data_size,"},
{"lineNum":"   88","line":"                                      uint32_t read_write_data_align) override;"},
{"lineNum":"   89","line":"  /* Turn on the `reserveAllocationSpace` callback. */"},
{"lineNum":"   90","line":"  virtual bool needsToReserveAllocationSpace() override;"},
{"lineNum":"   91","line":"  virtual void registerEHFrames(uint8_t *addr, uint64_t LoadAddr,"},
{"lineNum":"   92","line":"                                size_t size) override;"},
{"lineNum":"   93","line":"  virtual void deregisterEHFrames() override;"},
{"lineNum":"   94","line":"  virtual bool finalizeMemory(std::string *ErrMsg = nullptr) override;"},
{"lineNum":"   95","line":"  virtual void notifyObjectLoaded(llvm::RuntimeDyld &RTDyld,"},
{"lineNum":"   96","line":"                                  const llvm::object::ObjectFile &Obj) override;"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"private:"},
{"lineNum":"   99","line":"  struct Section {"},
{"lineNum":"  100","line":"    uint8_t *base;"},
{"lineNum":"  101","line":"    size_t size;"},
{"lineNum":"  102","line":"  };"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"  uint8_t *allocate_bump(Section &section, uintptr_t &bump_ptr, size_t size,"},
{"lineNum":"  105","line":"                         size_t align);"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"  Section code_section, read_section, readwrite_section;"},
{"lineNum":"  108","line":"  uintptr_t code_start_ptr;"},
{"lineNum":"  109","line":"  size_t code_size;"},
{"lineNum":"  110","line":"  uintptr_t code_bump_ptr, read_bump_ptr, readwrite_bump_ptr;"},
{"lineNum":"  111","line":"  uint8_t *eh_frame_ptr;"},
{"lineNum":"  112","line":"  size_t eh_frame_size;"},
{"lineNum":"  113","line":"  bool eh_frames_registered = false;"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"  callbacks_t callbacks;"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"  uint8_t *stack_map_ptr = nullptr;"},
{"lineNum":"  118","line":"  size_t stack_map_size = 0;"},
{"lineNum":"  119","line":"};"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"struct WasmErrorSink {"},
{"lineNum":"  122","line":"  WasmTrapType *trap_out;"},
{"lineNum":"  123","line":"  box_any_t *user_error;"},
{"lineNum":"  124","line":"};"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"struct WasmException : std::exception {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  127","line":"public:"},
{"lineNum":"  128","line":"  virtual std::string description() const noexcept { return \"unknown\"; }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"  virtual const char *what() const noexcept override {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  131","line":"    return \"wasm exception\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"  virtual void write_error(WasmErrorSink &out) const noexcept {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":"    *out.trap_out = WasmTrapType::Unknown;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  136","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  137","line":"};"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"void catch_unwind(std::function<void()> &&f);"},
{"lineNum":"  140","line":"[[noreturn]] void unsafe_unwind(WasmException *exception);"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"struct UncatchableException : WasmException {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  143","line":"public:"},
{"lineNum":"  144","line":"  virtual std::string description() const noexcept override {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  145","line":"    return \"Uncatchable exception\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  146","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  147","line":"};"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"struct UserException : UncatchableException {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  150","line":"public:"},
{"lineNum":"  151","line":"  UserException(size_t data, size_t vtable) : error_data({data, vtable}) {}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"  virtual std::string description() const noexcept override {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  154","line":"    return \"user exception\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"  // The parts of a `Box<dyn Any>`."},
{"lineNum":"  158","line":"  box_any_t error_data;"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"  virtual void write_error(WasmErrorSink &out) const noexcept override {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"    *out.user_error = error_data;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  162","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  163","line":"};"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"struct BreakpointException : UncatchableException {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  166","line":"public:"},
{"lineNum":"  167","line":"  BreakpointException(uintptr_t callback) : callback(callback) {}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"  virtual std::string description() const noexcept override {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  170","line":"    return \"breakpoint exception\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  171","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"  uintptr_t callback;"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"  virtual void write_error(WasmErrorSink &out) const noexcept override {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  176","line":"    puts(\"CB TRAMPOLINE\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  177","line":"    callback_trampoline(out.user_error, (void *)callback);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  178","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  179","line":"};"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"struct WasmModule {","class":"linePartCov","hits":"2","order":"764","possible_hits":"3",},
{"lineNum":"  182","line":"public:"},
{"lineNum":"  183","line":"  WasmModule(const uint8_t *object_start, size_t object_size,"},
{"lineNum":"  184","line":"             callbacks_t callbacks);"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"  void *get_func(llvm::StringRef name) const;"},
{"lineNum":"  187","line":"  uint8_t *get_stack_map_ptr() const;"},
{"lineNum":"  188","line":"  size_t get_stack_map_size() const;"},
{"lineNum":"  189","line":"  uint8_t *get_code_ptr() const;"},
{"lineNum":"  190","line":"  size_t get_code_size() const;"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"  bool _init_failed = false;"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"private:"},
{"lineNum":"  195","line":"  std::unique_ptr<MemoryManager> memory_manager;"},
{"lineNum":"  196","line":"  std::unique_ptr<llvm::object::ObjectFile> object_file;"},
{"lineNum":"  197","line":"  std::unique_ptr<llvm::RuntimeDyld> runtime_dyld;"},
{"lineNum":"  198","line":"};"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"struct WasmTrap : UncatchableException {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  201","line":"public:"},
{"lineNum":"  202","line":"  WasmTrap(WasmTrapType type) : type(type) {}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"  virtual std::string description() const noexcept override {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  205","line":"    std::ostringstream ss;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  206","line":"    ss << \"WebAssembly trap:\" << \'\\n\' << \" - type: \" << type << \'\\n\';","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"    return ss.str();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  209","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"  WasmTrapType type;"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"  virtual void write_error(WasmErrorSink &out) const noexcept override {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  214","line":"    *out.trap_out = type;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  215","line":"  }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"private:"},
{"lineNum":"  218","line":"  friend std::ostream &operator<<(std::ostream &out, const WasmTrapType &ty) {"},
{"lineNum":"  219","line":"    switch (ty) {"},
{"lineNum":"  220","line":"    case WasmTrapType::Unreachable:"},
{"lineNum":"  221","line":"      out << \"unreachable\";"},
{"lineNum":"  222","line":"      break;"},
{"lineNum":"  223","line":"    case WasmTrapType::IncorrectCallIndirectSignature:"},
{"lineNum":"  224","line":"      out << \"incorrect call_indirect signature\";"},
{"lineNum":"  225","line":"      break;"},
{"lineNum":"  226","line":"    case WasmTrapType::MemoryOutOfBounds:"},
{"lineNum":"  227","line":"      out << \"memory access out-of-bounds\";"},
{"lineNum":"  228","line":"      break;"},
{"lineNum":"  229","line":"    case WasmTrapType::CallIndirectOOB:"},
{"lineNum":"  230","line":"      out << \"call_indirect out-of-bounds\";"},
{"lineNum":"  231","line":"      break;"},
{"lineNum":"  232","line":"    case WasmTrapType::IllegalArithmetic:"},
{"lineNum":"  233","line":"      out << \"illegal arithmetic operation\";"},
{"lineNum":"  234","line":"      break;"},
{"lineNum":"  235","line":"    case WasmTrapType::Unknown:"},
{"lineNum":"  236","line":"    default:"},
{"lineNum":"  237","line":"      out << \"unknown\";"},
{"lineNum":"  238","line":"      break;"},
{"lineNum":"  239","line":"    }"},
{"lineNum":"  240","line":"    return out;"},
{"lineNum":"  241","line":"  }"},
{"lineNum":"  242","line":"};"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"struct CatchableException : WasmException {"},
{"lineNum":"  245","line":"public:"},
{"lineNum":"  246","line":"  CatchableException(uint32_t type_id, uint32_t value_num)"},
{"lineNum":"  247","line":"      : type_id(type_id), value_num(value_num) {}"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"  virtual std::string description() const noexcept override {"},
{"lineNum":"  250","line":"    return \"catchable exception\";"},
{"lineNum":"  251","line":"  }"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"  uint32_t type_id, value_num;"},
{"lineNum":"  254","line":"  uint64_t values[1];"},
{"lineNum":"  255","line":"};"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"extern \"C\" {"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"result_t module_load(const uint8_t *mem_ptr, size_t mem_size,"},
{"lineNum":"  260","line":"                     callbacks_t callbacks, WasmModule **module_out) {","class":"lineCov","hits":"2","order":"591","possible_hits":"2",},
{"lineNum":"  261","line":"  *module_out = new WasmModule(mem_ptr, mem_size, callbacks);","class":"linePartCov","hits":"3","order":"592","possible_hits":"4",},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"  if ((*module_out)->_init_failed) {","class":"lineCov","hits":"3","order":"683","possible_hits":"3",},
{"lineNum":"  264","line":"    return RESULT_OBJECT_LOAD_FAILURE;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":"  }"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"  return RESULT_OK;","class":"lineCov","hits":"1","order":"684","possible_hits":"1",},
{"lineNum":"  268","line":"}","class":"linePartCov","hits":"1","order":"685","possible_hits":"3",},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"[[noreturn]] void throw_trap(WasmTrapType ty) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  271","line":"  unsafe_unwind(new WasmTrap(ty));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  272","line":"}"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"void module_delete(WasmModule *module) { delete module; }","class":"linePartCov","hits":"5","order":"763","possible_hits":"6",},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"// Throw a fat pointer that\'s assumed to be `*mut dyn Any` on the rust"},
{"lineNum":"  277","line":"// side."},
{"lineNum":"  278","line":"[[noreturn]] void throw_any(size_t data, size_t vtable) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  279","line":"  unsafe_unwind(new UserException(data, vtable));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  280","line":"}"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"// Throw a pointer that\'s assumed to be codegen::BreakpointHandler on the"},
{"lineNum":"  283","line":"// rust side."},
{"lineNum":"  284","line":"[[noreturn]] void throw_breakpoint(uintptr_t callback) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  285","line":"  unsafe_unwind(new BreakpointException(callback));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  286","line":"}"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"bool invoke_trampoline(trampoline_t trampoline, void *ctx, void *func,"},
{"lineNum":"  289","line":"                       void *params, void *results, WasmTrapType *trap_out,"},
{"lineNum":"  290","line":"                       box_any_t *user_error, void *invoke_env) noexcept {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  291","line":"  try {"},
{"lineNum":"  292","line":"    catch_unwind([trampoline, ctx, func, params, results]() {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  293","line":"      trampoline(ctx, func, params, results);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  294","line":"    });","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  295","line":"    return true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  296","line":"  } catch (std::unique_ptr<WasmException> &e) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  297","line":"    WasmErrorSink sink;"},
{"lineNum":"  298","line":"    sink.trap_out = trap_out;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  299","line":"    sink.user_error = user_error;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  300","line":"    e->write_error(sink);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  301","line":"    return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":"  } catch (...) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  303","line":"    *trap_out = WasmTrapType::Unknown;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  304","line":"    return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  305","line":"  }"},
{"lineNum":"  306","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"void *get_func_symbol(WasmModule *module, const char *name) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  309","line":"  return module->get_func(llvm::StringRef(name));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  310","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"const uint8_t *llvm_backend_get_stack_map_ptr(const WasmModule *module) {","class":"lineCov","hits":"1","order":"692","possible_hits":"1",},
{"lineNum":"  313","line":"  return module->get_stack_map_ptr();","class":"lineCov","hits":"1","order":"693","possible_hits":"1",},
{"lineNum":"  314","line":"}","class":"linePartCov","hits":"1","order":"698","possible_hits":"2",},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"size_t llvm_backend_get_stack_map_size(const WasmModule *module) {","class":"lineCov","hits":"1","order":"700","possible_hits":"1",},
{"lineNum":"  317","line":"  return module->get_stack_map_size();","class":"lineCov","hits":"1","order":"701","possible_hits":"1",},
{"lineNum":"  318","line":"}","class":"linePartCov","hits":"1","order":"706","possible_hits":"2",},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"const uint8_t *llvm_backend_get_code_ptr(const WasmModule *module) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  321","line":"  return module->get_code_ptr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  322","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"size_t llvm_backend_get_code_size(const WasmModule *module) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  325","line":"  return module->get_code_size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  326","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  327","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "compile_debug", "date" : "2019-11-28 11:37:30", "instrumented" : 87, "covered" : 16,};
var merged_data = [];
