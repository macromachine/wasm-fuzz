var data = {lines:[
{"lineNum":"    1","line":"use crate::intrinsics::Intrinsics;"},
{"lineNum":"    2","line":"use inkwell::{"},
{"lineNum":"    3","line":"    builder::Builder,"},
{"lineNum":"    4","line":"    context::Context,"},
{"lineNum":"    5","line":"    module::{Linkage, Module},"},
{"lineNum":"    6","line":"    types::{BasicType, FunctionType},"},
{"lineNum":"    7","line":"    values::FunctionValue,"},
{"lineNum":"    8","line":"    AddressSpace,"},
{"lineNum":"    9","line":"};"},
{"lineNum":"   10","line":"use wasmer_runtime_core::{"},
{"lineNum":"   11","line":"    module::ModuleInfo,"},
{"lineNum":"   12","line":"    structures::{SliceMap, TypedIndex},"},
{"lineNum":"   13","line":"    types::{FuncSig, SigIndex, Type},"},
{"lineNum":"   14","line":"};"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"pub fn generate_trampolines<\'ctx>(","class":"linePartCov","hits":"1","order":"530","possible_hits":"2",},
{"lineNum":"   17","line":"    info: &ModuleInfo,"},
{"lineNum":"   18","line":"    signatures: &SliceMap<SigIndex, FunctionType<\'ctx>>,"},
{"lineNum":"   19","line":"    module: &Module<\'ctx>,"},
{"lineNum":"   20","line":"    context: &\'ctx Context,"},
{"lineNum":"   21","line":"    builder: &Builder<\'ctx>,"},
{"lineNum":"   22","line":"    intrinsics: &Intrinsics<\'ctx>,"},
{"lineNum":"   23","line":") -> Result<(), String> {"},
{"lineNum":"   24","line":"    for (sig_index, sig) in info.signatures.iter() {","class":"linePartCov","hits":"2","order":"531","possible_hits":"4",},
{"lineNum":"   25","line":"        let func_type = signatures[sig_index];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"        let trampoline_sig = intrinsics.void_ty.fn_type(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   28","line":"            &[","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":"                intrinsics.ctx_ptr_ty.as_basic_type_enum(), // vmctx ptr","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   30","line":"                func_type","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   31","line":"                    .ptr_type(AddressSpace::Generic)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   32","line":"                    .as_basic_type_enum(), // func ptr"},
{"lineNum":"   33","line":"                intrinsics.i64_ptr_ty.as_basic_type_enum(), // args ptr","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"                intrinsics.i64_ptr_ty.as_basic_type_enum(), // returns ptr","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   35","line":"            ],"},
{"lineNum":"   36","line":"            false,"},
{"lineNum":"   37","line":"        );"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"        let trampoline_func = module.add_function(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   40","line":"            &format!(\"trmp{}\", sig_index.index()),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   41","line":"            trampoline_sig,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   42","line":"            Some(Linkage::External),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"        );","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"        generate_trampoline(trampoline_func, sig, context, builder, intrinsics)?;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   46","line":"    }"},
{"lineNum":"   47","line":"    Ok(())","class":"lineCov","hits":"1","order":"532","possible_hits":"1",},
{"lineNum":"   48","line":"}","class":"lineCov","hits":"2","order":"533","possible_hits":"2",},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"fn generate_trampoline<\'ctx>(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   51","line":"    trampoline_func: FunctionValue,"},
{"lineNum":"   52","line":"    func_sig: &FuncSig,"},
{"lineNum":"   53","line":"    context: &\'ctx Context,"},
{"lineNum":"   54","line":"    builder: &Builder<\'ctx>,"},
{"lineNum":"   55","line":"    intrinsics: &Intrinsics<\'ctx>,"},
{"lineNum":"   56","line":") -> Result<(), String> {"},
{"lineNum":"   57","line":"    let entry_block = context.append_basic_block(trampoline_func, \"entry\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   58","line":"    builder.position_at_end(&entry_block);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"    let (vmctx_ptr, func_ptr, args_ptr, returns_ptr) = match trampoline_func.get_params().as_slice()","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   61","line":"    {"},
{"lineNum":"   62","line":"        &[vmctx_ptr, func_ptr, args_ptr, returns_ptr] => (","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   63","line":"            vmctx_ptr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   64","line":"            func_ptr.into_pointer_value(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":"            args_ptr.into_pointer_value(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"            returns_ptr.into_pointer_value(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":"        ),"},
{"lineNum":"   68","line":"        _ => return Err(\"trampoline function unimplemented\".to_string()),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   69","line":"    };","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"    let cast_ptr_ty = |wasmer_ty| match wasmer_ty {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   72","line":"        Type::I32 | Type::F32 => intrinsics.i32_ptr_ty,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   73","line":"        Type::I64 | Type::F64 => intrinsics.i64_ptr_ty,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"        Type::V128 => intrinsics.i128_ptr_ty,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"    };","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    let mut args_vec = Vec::with_capacity(func_sig.params().len() + 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   78","line":"    args_vec.push(vmctx_ptr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    let mut i = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"    for param_ty in func_sig.params().iter() {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   82","line":"        let index = intrinsics.i32_ty.const_int(i as _, false);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"        let item_pointer = unsafe { builder.build_in_bounds_gep(args_ptr, &[index], \"arg_ptr\") };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"        let casted_pointer_type = cast_ptr_ty(*param_ty);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"        let typed_item_pointer ="},
{"lineNum":"   88","line":"            builder.build_pointer_cast(item_pointer, casted_pointer_type, \"typed_arg_pointer\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"        let arg = builder.build_load(typed_item_pointer, \"arg\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   91","line":"        args_vec.push(arg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"        i = i + 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   93","line":"        if *param_ty == Type::V128 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   94","line":"            i = i + 1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   95","line":"        }"},
{"lineNum":"   96","line":"    }"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    let call_site = builder.build_call(func_ptr, &args_vec, \"call\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    match func_sig.returns() {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  101","line":"        &[] => {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"        &[one_ret] => {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  103","line":"            let ret_ptr_type = cast_ptr_ty(one_ret);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"            let typed_ret_ptr ="},
{"lineNum":"  106","line":"                builder.build_pointer_cast(returns_ptr, ret_ptr_type, \"typed_ret_ptr\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":"            builder.build_store(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  108","line":"                typed_ret_ptr,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  109","line":"                call_site.try_as_basic_value().left().unwrap(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":"            );"},
{"lineNum":"  111","line":"        }"},
{"lineNum":"  112","line":"        _ => {"},
{"lineNum":"  113","line":"            return Err(\"trampoline function multi-value returns unimplemented\".to_string());","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  114","line":"        }"},
{"lineNum":"  115","line":"    }"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"    builder.build_return(None);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":"    Ok(())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "compile_debug", "date" : "2019-11-28 11:37:30", "instrumented" : 60, "covered" : 4,};
var merged_data = [];
