var data = {lines:[
{"lineNum":"    1","line":"use super::{BoxedMap, SliceMap, TypedIndex};"},
{"lineNum":"    2","line":"use std::{"},
{"lineNum":"    3","line":"    iter::{self, Extend, FromIterator},"},
{"lineNum":"    4","line":"    marker::PhantomData,"},
{"lineNum":"    5","line":"    mem,"},
{"lineNum":"    6","line":"    ops::{Deref, DerefMut},"},
{"lineNum":"    7","line":"    slice, vec,"},
{"lineNum":"    8","line":"};"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"/// Dense item map"},
{"lineNum":"   11","line":"#[derive(Serialize, Deserialize, Debug, Clone)]","class":"linePartCov","hits":"4","order":"468","possible_hits":"53",},
{"lineNum":"   12","line":"pub struct Map<K, V>"},
{"lineNum":"   13","line":"where"},
{"lineNum":"   14","line":"    K: TypedIndex,"},
{"lineNum":"   15","line":"{"},
{"lineNum":"   16","line":"    elems: Vec<V>,","class":"linePartCov","hits":"4","order":"469","possible_hits":"28",},
{"lineNum":"   17","line":"    _marker: PhantomData<K>,","class":"linePartCov","hits":"4","order":"470","possible_hits":"28",},
{"lineNum":"   18","line":"}"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"impl<K, V> Map<K, V>"},
{"lineNum":"   21","line":"where"},
{"lineNum":"   22","line":"    K: TypedIndex,"},
{"lineNum":"   23","line":"{"},
{"lineNum":"   24","line":"    /// Creates a new `Map`."},
{"lineNum":"   25","line":"    pub fn new() -> Self {","class":"lineCov","hits":"13","order":"378","possible_hits":"13",},
{"lineNum":"   26","line":"        Self {","class":"lineCov","hits":"13","order":"380","possible_hits":"13",},
{"lineNum":"   27","line":"            elems: Vec::new(),","class":"lineCov","hits":"13","order":"379","possible_hits":"13",},
{"lineNum":"   28","line":"            _marker: PhantomData,"},
{"lineNum":"   29","line":"        }"},
{"lineNum":"   30","line":"    }","class":"linePartCov","hits":"13","order":"381","possible_hits":"26",},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    /// Creates a new empty `Map` with the given capacity."},
{"lineNum":"   33","line":"    pub fn with_capacity(capacity: usize) -> Self {"},
{"lineNum":"   34","line":"        Self {"},
{"lineNum":"   35","line":"            elems: Vec::with_capacity(capacity),"},
{"lineNum":"   36","line":"            _marker: PhantomData,"},
{"lineNum":"   37","line":"        }"},
{"lineNum":"   38","line":"    }"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    /// Clears the map. Keeps the allocated memory for future use."},
{"lineNum":"   41","line":"    pub fn clear(&mut self) {","class":"lineCov","hits":"1","order":"725","possible_hits":"1",},
{"lineNum":"   42","line":"        self.elems.clear();","class":"lineCov","hits":"1","order":"726","possible_hits":"1",},
{"lineNum":"   43","line":"    }","class":"linePartCov","hits":"1","order":"727","possible_hits":"2",},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"    /// Returns the size of this map."},
{"lineNum":"   46","line":"    pub fn len(&self) -> usize {","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   47","line":"        self.elems.len()","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   48","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    /// Returns true if this map is empty."},
{"lineNum":"   51","line":"    pub fn is_empty(&self) -> bool {"},
{"lineNum":"   52","line":"        self.elems.is_empty()"},
{"lineNum":"   53","line":"    }"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"    /// Adds a new value to this map."},
{"lineNum":"   56","line":"    pub fn push(&mut self, value: V) -> K {","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"   57","line":"        let len = self.len();","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"   58","line":"        self.elems.push(value);","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   59","line":"        K::new(len)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   60","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    /// Returns the next index into the map."},
{"lineNum":"   63","line":"    pub fn next_index(&self) -> K {"},
{"lineNum":"   64","line":"        K::new(self.len())"},
{"lineNum":"   65","line":"    }"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"    /// Reserves the given size."},
{"lineNum":"   68","line":"    pub fn reserve_exact(&mut self, size: usize) {"},
{"lineNum":"   69","line":"        self.elems.reserve_exact(size);"},
{"lineNum":"   70","line":"    }"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    /// Convert this into a `BoxedMap`."},
{"lineNum":"   73","line":"    pub fn into_boxed_map(self) -> BoxedMap<K, V> {"},
{"lineNum":"   74","line":"        BoxedMap::new(self.elems.into_boxed_slice())"},
{"lineNum":"   75","line":"    }"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    /// Convert this into a `Vec`."},
{"lineNum":"   78","line":"    pub fn into_vec(self) -> Vec<V> {"},
{"lineNum":"   79","line":"        self.elems"},
{"lineNum":"   80","line":"    }"},
{"lineNum":"   81","line":"}"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"impl<K, V> Map<K, V>"},
{"lineNum":"   84","line":"where"},
{"lineNum":"   85","line":"    K: TypedIndex,"},
{"lineNum":"   86","line":"    V: Clone,"},
{"lineNum":"   87","line":"{"},
{"lineNum":"   88","line":"    /// Resize this map to the given new length and value."},
{"lineNum":"   89","line":"    pub fn resize(&mut self, new_len: usize, value: V) {"},
{"lineNum":"   90","line":"        self.elems.resize(new_len, value);"},
{"lineNum":"   91","line":"    }"},
{"lineNum":"   92","line":"}"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"impl<K, V> Extend<V> for Map<K, V>"},
{"lineNum":"   95","line":"where"},
{"lineNum":"   96","line":"    K: TypedIndex,"},
{"lineNum":"   97","line":"{"},
{"lineNum":"   98","line":"    fn extend<I: IntoIterator<Item = V>>(&mut self, iter: I) {"},
{"lineNum":"   99","line":"        self.elems.extend(iter);"},
{"lineNum":"  100","line":"    }"},
{"lineNum":"  101","line":"}"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"impl<K, V> FromIterator<V> for Map<K, V>"},
{"lineNum":"  104","line":"where"},
{"lineNum":"  105","line":"    K: TypedIndex,"},
{"lineNum":"  106","line":"{"},
{"lineNum":"  107","line":"    fn from_iter<I: IntoIterator<Item = V>>(iter: I) -> Self {","class":"lineCov","hits":"3","order":"451","possible_hits":"3",},
{"lineNum":"  108","line":"        let elems: Vec<V> = iter.into_iter().collect();","class":"lineCov","hits":"3","order":"452","possible_hits":"3",},
{"lineNum":"  109","line":"        Self {","class":"lineCov","hits":"3","order":"454","possible_hits":"3",},
{"lineNum":"  110","line":"            elems,","class":"lineCov","hits":"3","order":"453","possible_hits":"3",},
{"lineNum":"  111","line":"            _marker: PhantomData,"},
{"lineNum":"  112","line":"        }"},
{"lineNum":"  113","line":"    }","class":"linePartCov","hits":"3","order":"455","possible_hits":"6",},
{"lineNum":"  114","line":"}"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"impl<K, V> Deref for Map<K, V>"},
{"lineNum":"  117","line":"where"},
{"lineNum":"  118","line":"    K: TypedIndex,"},
{"lineNum":"  119","line":"{"},
{"lineNum":"  120","line":"    type Target = SliceMap<K, V>;"},
{"lineNum":"  121","line":"    fn deref(&self) -> &SliceMap<K, V> {","class":"linePartCov","hits":"2","order":"474","possible_hits":"7",},
{"lineNum":"  122","line":"        unsafe { mem::transmute::<&[V], _>(self.elems.as_slice()) }","class":"linePartCov","hits":"2","order":"475","possible_hits":"7",},
{"lineNum":"  123","line":"    }","class":"linePartCov","hits":"2","order":"476","possible_hits":"14",},
{"lineNum":"  124","line":"}"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"impl<K, V> DerefMut for Map<K, V>"},
{"lineNum":"  127","line":"where"},
{"lineNum":"  128","line":"    K: TypedIndex,"},
{"lineNum":"  129","line":"{"},
{"lineNum":"  130","line":"    fn deref_mut(&mut self) -> &mut SliceMap<K, V> {"},
{"lineNum":"  131","line":"        unsafe { mem::transmute::<&mut [V], _>(self.elems.as_mut_slice()) }"},
{"lineNum":"  132","line":"    }"},
{"lineNum":"  133","line":"}"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"pub struct IntoIter<K, V>"},
{"lineNum":"  136","line":"where"},
{"lineNum":"  137","line":"    K: TypedIndex,"},
{"lineNum":"  138","line":"{"},
{"lineNum":"  139","line":"    enumerated: iter::Enumerate<vec::IntoIter<V>>,"},
{"lineNum":"  140","line":"    _marker: PhantomData<K>,"},
{"lineNum":"  141","line":"}"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"impl<K, V> IntoIter<K, V>"},
{"lineNum":"  144","line":"where"},
{"lineNum":"  145","line":"    K: TypedIndex,"},
{"lineNum":"  146","line":"{"},
{"lineNum":"  147","line":"    pub(in crate::structures) fn new(into_iter: vec::IntoIter<V>) -> Self {"},
{"lineNum":"  148","line":"        Self {"},
{"lineNum":"  149","line":"            enumerated: into_iter.enumerate(),"},
{"lineNum":"  150","line":"            _marker: PhantomData,"},
{"lineNum":"  151","line":"        }"},
{"lineNum":"  152","line":"    }"},
{"lineNum":"  153","line":"}"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"impl<K, V> Iterator for IntoIter<K, V>"},
{"lineNum":"  156","line":"where"},
{"lineNum":"  157","line":"    K: TypedIndex,"},
{"lineNum":"  158","line":"{"},
{"lineNum":"  159","line":"    type Item = (K, V);"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"    fn next(&mut self) -> Option<(K, V)> {"},
{"lineNum":"  162","line":"        self.enumerated.next().map(|(i, v)| (K::new(i), v))"},
{"lineNum":"  163","line":"    }"},
{"lineNum":"  164","line":"}"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"impl<K, V> IntoIterator for Map<K, V>"},
{"lineNum":"  167","line":"where"},
{"lineNum":"  168","line":"    K: TypedIndex,"},
{"lineNum":"  169","line":"{"},
{"lineNum":"  170","line":"    type Item = (K, V);"},
{"lineNum":"  171","line":"    type IntoIter = IntoIter<K, V>;"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    fn into_iter(self) -> Self::IntoIter {"},
{"lineNum":"  174","line":"        IntoIter::new(self.elems.into_iter())"},
{"lineNum":"  175","line":"    }"},
{"lineNum":"  176","line":"}"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"impl<\'a, K, V> IntoIterator for &\'a Map<K, V>"},
{"lineNum":"  179","line":"where"},
{"lineNum":"  180","line":"    K: TypedIndex,"},
{"lineNum":"  181","line":"{"},
{"lineNum":"  182","line":"    type Item = (K, &\'a V);"},
{"lineNum":"  183","line":"    type IntoIter = Iter<\'a, K, V>;"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"    fn into_iter(self) -> Self::IntoIter {","class":"lineCov","hits":"1","order":"497","possible_hits":"1",},
{"lineNum":"  186","line":"        Iter::new(self.elems.iter())","class":"lineCov","hits":"1","order":"498","possible_hits":"1",},
{"lineNum":"  187","line":"    }","class":"linePartCov","hits":"1","order":"499","possible_hits":"2",},
{"lineNum":"  188","line":"}"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"impl<\'a, K, V> IntoIterator for &\'a mut Map<K, V>"},
{"lineNum":"  191","line":"where"},
{"lineNum":"  192","line":"    K: TypedIndex,"},
{"lineNum":"  193","line":"{"},
{"lineNum":"  194","line":"    type Item = (K, &\'a mut V);"},
{"lineNum":"  195","line":"    type IntoIter = IterMut<\'a, K, V>;"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"    fn into_iter(self) -> Self::IntoIter {"},
{"lineNum":"  198","line":"        IterMut::new(self.elems.iter_mut())"},
{"lineNum":"  199","line":"    }"},
{"lineNum":"  200","line":"}"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"/// Iterator for a `Map`."},
{"lineNum":"  203","line":"pub struct Iter<\'a, K: TypedIndex, V: \'a> {"},
{"lineNum":"  204","line":"    enumerated: iter::Enumerate<slice::Iter<\'a, V>>,"},
{"lineNum":"  205","line":"    _marker: PhantomData<K>,"},
{"lineNum":"  206","line":"}"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"impl<\'a, K: TypedIndex, V: \'a> Iter<\'a, K, V> {"},
{"lineNum":"  209","line":"    pub(in crate::structures) fn new(iter: slice::Iter<\'a, V>) -> Self {","class":"lineCov","hits":"2","order":"479","possible_hits":"2",},
{"lineNum":"  210","line":"        Self {","class":"lineCov","hits":"2","order":"481","possible_hits":"2",},
{"lineNum":"  211","line":"            enumerated: iter.enumerate(),","class":"lineCov","hits":"2","order":"480","possible_hits":"2",},
{"lineNum":"  212","line":"            _marker: PhantomData,"},
{"lineNum":"  213","line":"        }"},
{"lineNum":"  214","line":"    }","class":"linePartCov","hits":"2","order":"482","possible_hits":"4",},
{"lineNum":"  215","line":"}"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"impl<\'a, K: TypedIndex, V: \'a> Iterator for Iter<\'a, K, V> {"},
{"lineNum":"  218","line":"    type Item = (K, &\'a V);"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"    fn next(&mut self) -> Option<Self::Item> {","class":"lineCov","hits":"2","order":"485","possible_hits":"2",},
{"lineNum":"  221","line":"        self.enumerated.next().map(|(i, v)| (K::new(i), v))","class":"linePartCov","hits":"2","order":"486","possible_hits":"6",},
{"lineNum":"  222","line":"    }","class":"linePartCov","hits":"2","order":"487","possible_hits":"4",},
{"lineNum":"  223","line":"}"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"/// Mutable iterator for a `Map`."},
{"lineNum":"  226","line":"pub struct IterMut<\'a, K: TypedIndex, V: \'a> {"},
{"lineNum":"  227","line":"    enumerated: iter::Enumerate<slice::IterMut<\'a, V>>,"},
{"lineNum":"  228","line":"    _marker: PhantomData<K>,"},
{"lineNum":"  229","line":"}"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"impl<\'a, K: TypedIndex, V: \'a> IterMut<\'a, K, V> {"},
{"lineNum":"  232","line":"    pub(in crate::structures) fn new(iter: slice::IterMut<\'a, V>) -> Self {"},
{"lineNum":"  233","line":"        Self {"},
{"lineNum":"  234","line":"            enumerated: iter.enumerate(),"},
{"lineNum":"  235","line":"            _marker: PhantomData,"},
{"lineNum":"  236","line":"        }"},
{"lineNum":"  237","line":"    }"},
{"lineNum":"  238","line":"}"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"impl<\'a, K: TypedIndex, V: \'a> Iterator for IterMut<\'a, K, V> {"},
{"lineNum":"  241","line":"    type Item = (K, &\'a mut V);"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"    fn next(&mut self) -> Option<Self::Item> {"},
{"lineNum":"  244","line":"        self.enumerated.next().map(|(i, v)| (K::new(i), v))"},
{"lineNum":"  245","line":"    }"},
{"lineNum":"  246","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "compile_debug", "date" : "2019-11-28 11:37:30", "instrumented" : 36, "covered" : 28,};
var merged_data = [];
